#line 2 "../bisonflex/cmdoptions.yy.cpp"

#line 4 "../bisonflex/cmdoptions.yy.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer cmdoptionsFlexLexer
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstring>
/* end standard C++ headers. */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

/* %if-not-reentrant */
extern int yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
/* %endif */

/* %if-c++-only */
	std::istream* yy_input_file;
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */
/* %if-not-reentrant */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
/* %endif */

void *cmdoptionsalloc (yy_size_t  );
void *cmdoptionsrealloc (void *,yy_size_t  );
void cmdoptionsfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext

#include "FlexLexer.h"

int yyFlexLexer::yywrap() { return 1; }
int yyFlexLexer::yylex()
	{
	LexerError( "yyFlexLexer::yylex invoked but %option yyclass used" );
	return 0;
	}

#define YY_DECL int FlexScanner::yylex()

/* %if-c-only Standard (non-C++) definition */
/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 183
#define YY_END_OF_BUFFER 184
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1023] =
    {   0,
        0,    0,  184,  182,  180,  181,  178,  182,   37,  177,
      177,  178,  176,  176,   36,  176,  177,  177,  177,  177,
      176,  176,  176,  176,  176,  176,  177,  177,    7,  177,
      177,  177,  177,   88,   89,  177,  177,  177,  177,  177,
       90,  177,  177,  180,  181,  178,    0,    0,  177,  177,
      177,  177,  177,  177,  177,  177,   82,  177,  177,  177,
        6,    8,   69,  177,  177,    9,  177,    1,  178,  176,
      177,    0,  177,  177,  177,  176,   75,  176,  177,  177,
      177,  176,   71,  177,  177,  177,  177,  177,  176,  177,
      177,  176,  176,  176,  177,  177,  177,  176,  177,  177,

      177,  177,  177,  177,  177,  121,   73,  177,  177,  177,
      177,  177,  177,  177,  177,  177,  177,  177,   10,  177,
      177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
      177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
      177,  177,  177,  177,  177,  177,  179,    0,  177,  177,
      177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
      177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
        0,    2,  178,    3,    0,  177,  177,  177,  177,  177,
      177,  177,  177,  177,  177,  177,  177,  177,   31,  177,
      177,  177,  177,  177,  176,  177,  177,  177,  177,  177,

      177,  176,  177,  177,  177,  177,  177,  177,  177,  177,
      177,  177,  177,  177,   72,  177,  177,  177,  177,  177,
      177,  100,   30,  177,  177,  177,  177,   11,  177,  177,
      177,  177,  177,   53,   74,  142,   40,  177,  177,  177,
      177,  177,  177,  177,  177,  177,   54,  177,  177,  127,
      177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
      177,  177,  177,    0,  177,  177,  177,  177,  177,  177,
      177,  177,  177,  177,  177,  177,  177,   12,  177,  177,
      177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
       22,   26,  177,  177,  177,  177,   85,   52,  177,  177,

      177,  177,  177,  177,  177,  177,  116,  117,  177,  177,
      177,  177,  177,  110,  177,  177,  177,  177,  177,  177,
      177,  120,   87,   67,  177,  177,  177,  177,   23,  177,
       15,  130,   27,  177,  177,  153,  177,  124,  177,  177,
      177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
      177,  177,  177,  177,  177,  109,  177,  177,  177,  177,
      177,  177,  177,  177,  177,  177,  177,  128,  177,  177,
      177,  177,  177,  177,   64,   63,  177,  177,  177,  177,
       39,  177,  177,    5,  177,   83,  177,  177,  177,  177,
      177,  177,  177,  177,   70,  177,  177,  177,  177,  177,

      177,  177,  177,  177,  177,  177,   20,  177,  177,  177,
      177,  177,  177,  177,  177,  177,  177,   16,  177,  177,
      177,  177,  177,  177,   57,   21,  177,   13,  177,  177,
      177,  177,  177,  169,   86,  177,  177,  177,  177,  177,
      177,  177,  145,  177,  177,  177,  177,  177,  177,  177,
      177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
      171,  177,  177,  177,   17,  177,  177,  177,  177,  177,
      177,  177,  177,  177,  177,  177,   38,  177,  177,  177,
      177,  177,    4,  177,  177,  177,  177,  177,  177,  177,
      177,  177,   28,  177,  177,  177,  177,  177,  177,  177,

      177,  177,  177,  177,  177,  165,  177,  177,  177,  177,
      177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
      177,  177,  177,  177,  177,  177,  177,  129,   93,  177,
      177,  177,  151,  177,  177,  177,  177,  177,  177,  177,
      177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
      177,  177,  177,  177,  177,  177,  131,  177,  177,  105,
       66,  177,  177,   65,  177,  177,  177,  177,  177,  177,
      177,  177,   45,  177,  177,  177,  177,  177,  177,  177,
      177,   77,  177,  177,  177,  177,  177,  177,  177,  177,
      177,  177,  177,  177,  177,  177,  177,  177,  177,  177,

      177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
       97,  177,  177,  177,  177,  177,  177,  177,  177,  177,
      177,  177,  177,  177,  177,  177,   41,  177,  133,  147,
      177,  134,  177,  152,  177,  177,  135,  177,  136,   35,
      177,  154,  177,  177,  177,  177,  177,   14,  177,  177,
      177,  177,  177,  177,  177,  177,   19,  177,  177,  177,
      177,  177,  177,  177,  177,  177,  177,  177,   24,  177,
      177,  177,  177,  177,  177,  177,  177,   84,  177,  177,
      177,  177,  177,  177,  177,  144,  177,  177,  177,  177,
      177,  111,  177,  177,  177,  177,  177,  177,  177,  177,

      177,  177,  177,  177,  177,  177,  177,  177,  177,   34,
      177,  177,  177,  177,  173,  177,  177,  177,   25,  177,
      148,  175,  177,  177,  149,  177,  177,   18,  177,  177,
       44,  177,  177,  177,  177,  177,  177,  177,  177,  177,
      177,  177,  177,  177,  177,  177,  150,  177,  177,  166,
      177,  177,  177,  177,  177,  177,  139,  177,  177,  177,
      177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
       56,  177,  177,  177,  177,  177,  177,  177,  177,  177,
      177,  126,  125,  177,  177,  177,  177,  177,  161,  177,
       68,  101,  177,  177,  177,  177,  177,  177,  177,  177,

      177,  177,  177,  177,  177,  177,  177,   80,  177,  132,
      177,  177,  163,  177,  114,  177,  177,   42,  140,  177,
      177,  119,  177,  177,  177,  177,   58,   59,  177,  141,
      177,  177,  177,  177,  177,  177,  123,  103,  177,  177,
      177,  177,  177,  177,  177,  177,   43,  177,  106,  177,
      177,  177,  177,  177,  177,  177,  177,   60,  177,  177,
      177,  177,  177,  177,   76,  177,  162,  177,  170,  115,
      157,  172,  177,  177,  177,  177,  177,  177,  177,  177,
      156,  177,  177,  177,  177,  177,  112,   96,  177,  177,
      164,  177,  177,  177,  177,  177,  177,  177,  177,  177,

      177,  177,   81,   62,  177,  177,  177,  177,  113,  177,
      177,  177,  177,  174,  177,  177,   91,  177,  177,  177,
      177,  177,  177,  177,  177,  177,  177,  177,   95,  177,
      177,  177,   47,  177,  177,  177,   79,  177,  177,  177,
       61,  177,  177,  118,  177,  177,  177,  168,  177,  177,
      177,   98,  177,  177,   55,  177,  177,  177,  177,  177,
      177,  177,  177,  177,   51,  177,  177,  177,  177,  143,
      177,  177,   99,  177,  177,  177,  177,  177,   94,  177,
      177,  177,  177,   33,   32,  177,  177,   46,  177,  177,
      177,  158,  177,  104,  160,   92,  138,  177,  146,  177,

      177,  177,   78,   48,  177,  177,  177,  177,  177,  177,
      107,  177,  177,   49,  108,  177,  155,  102,   50,   29,
      159,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    5,    5,    5,    5,    1,    5,
        5,    7,    5,    8,    9,   10,   11,   12,   13,   14,
       15,   16,   17,   18,   18,   19,   18,   20,    1,    1,
       21,    1,    1,    5,   22,   23,   24,   25,   25,   25,
       26,   27,   26,   26,   28,   26,   29,   26,   26,   26,
       26,   26,   30,   26,   26,   26,   26,   31,   26,   26,
        1,   32,    1,    5,   33,    1,   34,   35,   36,   37,

       38,   39,   40,   41,   42,   43,   44,   45,   46,   47,
       48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
       58,   59,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[60] =
    {   0,
        1,    1,    1,    2,    3,    4,    1,    5,    6,    6,
        3,    6,    6,    6,    6,    6,    6,    6,    6,    1,
        1,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    3,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6
    } ;

static yyconst flex_int16_t yy_base[1029] =
    {   0,
        0,    0, 1247, 1248,   58, 1243,    0,   59,    0,   88,
      114,   54,  162,   51, 1248,  137, 1225,   59,   46,  130,
      200,  182,  184,  172,  213,  235,   47,  170,  226,  144,
      202,  169,   61,  239,  276,  223,  259,  242,  228,  168,
       60,  248,  151,   85, 1241,    0, 1237,  152,    0,    0,
       32, 1200,  157,  242, 1199, 1202, 1201, 1192,  180, 1189,
     1181,  237, 1197,  204, 1196,    0, 1175, 1248,  330,  225,
      340,  203, 1210, 1173, 1196,  252,  245,  267, 1187, 1192,
     1174,  284,  268,  266, 1178, 1177, 1186,  291,  335, 1189,
      314,  292,  336,  314, 1186, 1170, 1184,  315, 1174, 1178,

     1182, 1169, 1181, 1159, 1179,    0, 1159, 1177,  287, 1152,
     1169,  251, 1156, 1154, 1160, 1158, 1165, 1164,    0, 1164,
     1154,  345, 1154, 1146, 1161, 1151,  347, 1152,  346, 1151,
     1155,  351, 1159, 1156,  265,  344, 1147, 1156,  352, 1140,
     1149, 1149, 1135, 1134, 1135, 1136, 1248,  226, 1146, 1128,
     1141, 1144,  356, 1124, 1141, 1131, 1128, 1129, 1139, 1132,
     1131,  357, 1132,  361, 1121, 1134, 1131,  355, 1115, 1118,
     1161, 1248,  406,    0,    0, 1139, 1150, 1110, 1124, 1115,
     1118, 1116, 1115, 1121, 1110, 1111, 1119, 1118,    0, 1114,
     1096, 1112, 1089, 1108,  364, 1111, 1091, 1107, 1097, 1092,

     1095,  380, 1087, 1087, 1089, 1098, 1093,  122, 1100, 1088,
     1094, 1094, 1092, 1093,    0, 1088, 1079, 1073,  295, 1091,
     1087,    0,    0, 1089, 1084, 1086, 1066, 1067, 1067, 1079,
     1072, 1073,  381,    0,    0,    0,    0, 1081, 1074, 1073,
     1059, 1074, 1070, 1075, 1070, 1068,    0, 1051, 1049,    0,
      377, 1061, 1063,  369, 1065, 1048, 1061, 1065, 1046,  381,
     1049, 1062, 1044, 1087, 1051, 1050, 1057, 1035, 1043, 1038,
     1034, 1034, 1039, 1045, 1033, 1041, 1046,    0, 1025, 1043,
     1026, 1032, 1033, 1038, 1036, 1018, 1019, 1028, 1027, 1018,
        0,    0, 1014, 1025, 1027, 1017,    0,  306, 1017, 1024,

     1021, 1019, 1021, 1014,  397, 1013,    0,    0, 1016,  997,
     1012, 1007, 1019, 1018,  992, 1015, 1010,  989,  995,  996,
      999,    0,    0,    0, 1010,  991, 1003, 1004,    0, 1001,
        0,    0,    0,  987, 1001,    0,  995,    0,  987,  982,
      995,  987,  980,  996,  983,  983,  980,  984,  989,  968,
      981,  980,  983,  978,  980,    0,  967,  966,  978,  973,
      972,  960,  970,  967,  957,  971,  955,    0,  387,  963,
      967,  971,  962,  957,  956,    0,  963,  959,  959,  965,
      964,  958,  937,    0,  943,    0,  955,  956,  938,  942,
      944,  954,  941,  948,    0,  934,  942,  930,  943,  935,

      956,  964,  920,  931,  927,  928,    0,  916,  926,  934,
      924,  918,  399,  923,  920,  929,  914,    0,  932,  917,
      930,  912,  924,  927,  950,  909,  908,    0,  903,  897,
      918,  919,  901,    0,    0,  915,  892,  911,  900,  911,
      893,  911,    0,  904,  909,  897,  888,  887,  902,  905,
      892,  896,  883,  889,  891,  877,  893,  897,  884,  888,
        0,  882,  888,  389,    0,  866,  883,  889,  884,  863,
      875,  872,  870,  868,  869,  877,    0,  396,  877,  864,
      863,  877,    0,  852,  868,  860,  873,  866,  871,  852,
      865,  862,    0,  843,  851,  876,  884,  858,  858,  861,

      841,  408,  859,  847,  854,    0,  842,  851,  846,  853,
      852,  849,  830,  404,  849,  844,  829,  838,  838,  829,
      828,  823,  833,  830,  825,  819,  819,  837,    0,  835,
      815,  833,    0,  808,  827,  824,  825,  829,  819,  812,
      817,  820,  810,  804,  817,  809,  815,  815,  802,  812,
      802,  810,  810,  811,  796,  796,    0,  790,  784,  808,
      793,  799,  801,  799,  783,  790,  782,  781,  790,  782,
      777,  776,    0,  793,  774,  768,  787,  784,  771,  785,
      774,  787,  781,  794,  784,  774,  768,  763,  771,  770,
      769,  757,  760,  766,  760,  751,  760,  764,  766,  749,

      755,  766,  751,  745,  750,  747,  744,  760,  433,  749,
      750,  743,  752,  742,  750,  745,  748,  748,  742,  730,
      749,  734,  742,  734,  736,  729,    0,  730,    0,    0,
      742,    0,  736,    0,  735,  735,    0,  737,    0,    0,
      734,    0,  722,  734,  715,  722,  727,    0,  726,  711,
      720,  712,  711,  710,  707,  713,  714,  717,  709,  698,
      700,  685,  690,  694,   52,  157,  325,  365,    0,  382,
      386,  387,  417,  417,  399,  410,  402,    0,  423,  419,
      417,  422,  423,  424,  415,    0,  417,  431,  424,  433,
      426,    0,  422,  451,  457,  437,  425,  427,  417,  437,

      444,  438,  432,  442,  434,  444,  447,  450,  444,    0,
      449,  440,  454,  454,    0,  455,  449,  439,    0,  455,
        0,    0,  457,  442,    0,  483,  461,    0,  456,  457,
        0,  465,  453,  469,  455,  457,  469,  472,  466,  473,
      474,  457,  474,  499,  465,  476,    0,  469,  482,    0,
      479,  467,  472,  478,  485,  470,    0,  472,  473,  488,
      489,  479,  493,  496,  493,  515,  519,  491,  487,  502,
        0,  494,  496,  491,  503,  490,  502,  506,  507,  499,
      508,    0,  514,  508,  507,  496,  499,  498,    0,  514,
        0,    0,  520,  522,  523,  515,  511,  518,  524,  521,

      526,  518,  527,  524,  513,  514,  530,    0,  533,    0,
      519,  519,    0,  535,    0,  534,  537,    0,    0,  524,
      529,    0,  531,  534,  534,  533,    0,    0,  529,  550,
      539,  545,  552,  549,  554,  538,    0,    0,  546,  543,
      554,  559,  546,  557,  543,  557,    0,  547,    0,  546,
      554,  555,  549,  570,  570,  567,  562,    0,  559,  570,
      575,  557,  571,  561,    0,  575,    0,  576,    0,    0,
        0,    0,  576,  583,  579,  571,  581,  569,  585,  585,
        0,  572,  567,  573,  569,  590,    0,    0,  592,  574,
        0,  579,  590,  595,  596,  587,  588,  585,  601,  587,

      582,  589,    0,    0,  605,  591,  602,  607,    0,  609,
      599,  609,  613,    0,  614,  613,    0,  599,  599,  614,
      604,  603,  609,  601,  622,  614,  609,  617,    0,  627,
      628,  629,    0,  613,  627,  617,    0,  632,  618,  626,
        0,  630,  627,    0,  626,  638,  639,    0,  632,  641,
      642,    0,  630,  629,    0,  632,  646,  634,  652,  644,
      650,  651,  644,  653,    0,  641,  642,  660,  642,    0,
      642,  642,    0,  649,  654,  648,  663,  660,    0,  652,
      666,  665,  653,    0,    0,  658,  656,    0,  671,  670,
      677,    0,  670,    0,    0,    0,    0,  665,    0,  680,

      677,  682,    0,    0,  683,  680,  679,  684,  674,  676,
        0,  683,  678,    0,    0,  687,    0,    0,    0,    0,
        0, 1248,  723,  728,  730,  735,  741,  747
    } ;

static yyconst flex_int16_t yy_def[1029] =
    {   0,
     1022,    1, 1022, 1022, 1022, 1022, 1023, 1024, 1025, 1022,
       10, 1023,   11,   13, 1022,   13,   11,   11,   11,   11,
       13,   13,   13,   13,   13,   13,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11, 1022, 1022, 1023, 1026, 1026, 1025,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11, 1022, 1027,   13,
       11, 1022,   11,   11,   11,   13,   13,   13,   11,   11,
       11,   13,   11,   11,   11,   11,   11,   11,   13,   11,
       11,   13,   13,   13,   11,   11,   11,   13,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11, 1022, 1022,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
     1028, 1022, 1027,   71, 1023,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   13,   11,   11,   11,   11,   11,

       11,   13,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11, 1026,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,    0, 1022, 1022, 1022, 1022, 1022, 1022
    } ;

static yyconst flex_int16_t yy_nxt[1308] =
    {   0,
        4,    5,    6,    5,    7,    8,    4,    9,   10,   11,
       12,   13,   14,   14,   14,   14,   14,   14,   14,    4,
       15,   16,   16,   16,   16,   17,   18,   19,   17,   20,
       17,    7,   11,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   17,   30,   31,   32,   33,   34,   35,   17,
       36,   37,   38,   39,   40,   41,   42,   17,   43,   44,
       68,   44,   47,   47,   69,   72,   72,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   72,   72,
       72,   50,  149,   74,  102,  150,   44,   73,   44,  741,
       47,   47,   46,  144,  115,   49,   50,   50,   46,   50,

       50,   50,   50,   50,   50,   50,   50,   50,  116,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   46,
       50,   51,   52,   50,   53,   54,   55,   56,   57,   58,
       50,   50,   59,   50,   60,   61,   62,   50,   63,   64,
       50,   50,   65,   66,   50,   50,   67,   50,   50,   72,
       50,   50,   50,   50,   50,   50,   72,  147,   50,  322,
       50,   50,   50,   72,   50,   50,  323,   50,   50,   50,
       72,  148,   50,   70,   70,   70,   70,   70,   70,   70,
       70,  110,   75,   70,   70,   70,   70,   72,   72,   72,
      742,   72,   71,   50,  152,   70,   70,   70,   70,   70,

       70,   72,   50,   72,  113,  143,  114,  103,  146,   89,
      153,  104,   50,  175,   50,  105,   82,  160,   71,   72,
       90,   72,   83,   84,   87,   91,   85,  161,   50,   86,
       50,   88,   72,   76,  175,   77,  264,   78,   50,  111,
       50,  167,   72,   50,   79,   72,   92,   72,   93,  112,
       80,   94,  168,   81,   72,   50,   50,  264,   72,   95,
      132,   72,  106,   96,  141,   50,  107,   72,   98,   97,
      164,  108,  109,  117,  133,   50,   99,  118,   72,  142,
      154,   50,   50,  100,  221,  119,  101,  165,  155,  145,
      222,   50,  139,  120,  121,   72,  134,   50,  249,  140,

      185,   50,  179,  135,  187,  188,  333,  136,   50,  122,
      137,  138,  189,  123,   50,  250,  124,  125,  180,  186,
      126,  127,   50,   50,  128,  217,  129,  130,  218,  131,
      171,  171,  172,  171,  184,  171,  171,  171,  405,  193,
       50,  194,  201,  406,   50,   50,  334,  199,   50,  171,
      171,  174,  174,  174,  174,  174,  174,  174,  174,  200,
      207,  174,  174,  174,  174,   50,   50,  203,  743,  195,
       50,   50,  202,  174,  174,  174,  174,  174,  174,  196,
      231,  232,  238,  241,  245,  255,  197,  251,  252,  269,
      279,   50,   50,  242,   50,  233,  282,  283,  287,  288,

      239,  270,  246,  280,  364,  256,  171,  171,  172,  171,
       50,  171,  171,  171,  346,  360,  744,  309,  347,  365,
       50,  467,  371,  468,  554,  171,  171,  745,  361,  413,
      746,  316,  372,  348,  507,  508,   50,  509,  414,  747,
      590,  415,  555,  567,  602,  568,  591,  694,  603,  695,
      748,  416,  749,  750,  751,  752,  753,  754,  755,  756,
      757,  758,  759,  760,  761,  762,  763,  764,  765,  766,
      767,  768,  769,  770,  771,  772,  773,  774,  775,  776,
      777,  778,  779,  780,  781,  782,  783,  784,  785,  786,
      787,  788,  789,  790,  791,  792,  793,  794,  795,  796,

      797,  798,  799,  800,  801,  802,  803,  804,  805,  806,
      807,  808,  809,  810,  811,  812,  813,  814,  815,  816,
      817,  818,  819,  820,  821,  822,  823,  824,  825,  826,
      827,  828,  829,  830,  831,  832,  833,  835,  836,  834,
      837,  838,  839,  840,  841,  842,  843,  844,  845,  846,
      847,  848,  849,  850,  851,  852,  853,  854,  855,  857,
      858,  856,  859,  860,  861,  862,  863,  864,  865,  866,
      867,  868,  869,  870,  871,  872,  873,  874,  875,  876,
      877,  878,  879,  880,  881,  882,  883,  884,  885,  886,
      887,  888,  889,  890,  891,  892,  893,  894,  895,  896,

      897,  898,  899,  900,  901,  902,  903,  904,  905,  906,
      907,  908,  909,  910,  912,  913,  914,  911,  915,  916,
      917,  918,  919,  920,  921,  922,  923,  924,  925,  926,
      927,  928,  929,  930,  931,  932,  933,  934,  935,  936,
      937,  938,  939,  940,  941,  942,  943,  944,  945,  946,
      947,  948,  949,  950,  951,  952,  953,  954,  955,  956,
      957,  958,  959,  960,  961,  962,  963,  964,  965,  966,
      967,  968,  969,  970,  971,  972,  973,  974,  975,  976,
      977,  978,  979,  980,  981,  982,  983,  984,  985,  986,
      987,  988,  989,  990,  991,  992,  993,  994,  995,  996,

      997,  998,  999, 1000, 1001, 1002, 1003, 1004, 1005, 1006,
     1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016,
     1017, 1018, 1019, 1020, 1021,   46,  740,  739,   46,   48,
       48,  738,  737,   48,   49,   49,   47,   47,   47,  736,
       47,  173,  173,  173,  173,  173,  173,  171,  171,  171,
      171,  171,  171,  735,  734,  733,  732,  731,  730,  729,
      728,  727,  726,  725,  724,  723,  722,  721,  720,  719,
      718,  717,  716,  715,  714,  713,  712,  711,  710,  709,
      708,  707,  706,  705,  704,  703,  702,  701,  700,  699,
      698,  697,  696,  693,  692,  691,  690,  689,  688,  687,

      686,  685,  684,  683,  682,  681,  680,  679,  678,  677,
      676,  675,  674,  673,  672,  671,  670,  669,  668,  667,
      666,  665,  664,  663,  662,  661,  660,  659,  658,  657,
      656,  655,  654,  653,  652,  651,  650,  649,  648,  647,
      646,  645,  644,  643,  642,  641,  640,  639,  638,  637,
      636,  635,  634,  633,  632,  631,  630,  629,  628,  627,
      626,  625,  624,  623,  622,  621,  620,  619,  618,  617,
      616,  615,  614,  613,  612,  611,  610,  609,  608,  607,
      606,  605,  604,  601,  600,  599,  598,  597,  596,  595,
      594,  593,  592,  589,  588,  587,  586,  585,  584,  583,

      582,  581,  580,  579,  578,  577,  576,  575,  574,  573,
      572,  571,  570,  569,  566,  565,  564,  563,  562,  561,
      560,  559,  558,  557,  556,  553,  552,  551,  550,  549,
      548,  547,  546,  545,  544,  543,  542,  541,  540,  539,
      538,  537,  536,  535,  534,  533,  532,  531,  530,  529,
      528,  527,  526,  525,  524,  523,  522,  521,  520,  519,
      518,  517,  516,  515,  514,  513,  512,  511,  510,  506,
      505,  504,  503,  502,  501,  500,  499,  498,  497,  496,
      495,  494,  493,  492,  491,  490,  489,  488,  487,  486,
      485,  484,  483,  482,  481,  480,  479,  478,  477,  476,

      475,  474,  473,  472,  471,  470,  469,  466,  465,  464,
      463,  462,  461,  460,  459,  458,  457,  456,  455,  454,
      453,  452,  451,  450,  449,  448,  447,  446,  445,  444,
      443,  442,  441,  440,  439,  438,  437,  436,  435,  434,
      433,  432,  431,  430,  429,  428,  427,  426,  425,  424,
      423,  422,  421,  420,  419,  418,  417,  412,  411,  410,
      409,  408,  407,  404,  403,  402,  401,  400,  399,  398,
      397,  396,  395,  394,  393,  392,  391,  390,  389,  388,
      387,  386,  385,  384,  383,  382,  381,  380,  379,  378,
      377,  376, 1022,  375,  374,  373,  370,  369,  368,  367,

      366,  363,  362,  359,  358,  357,  356,  355,  354,  353,
      352,  351,  350,  349,  345,  344,  343,  342,  341,  340,
      339,  338,  337,  336,  335,  332,  331,  330,  329,  328,
      327,  326,  325,  324,  321,  320,  319,  318,  317,  315,
      314,  313,  312,  311,  310,  308,  307,  306,  305,  304,
      303,  302,  301,  300,  299,  298,  297,  296,  295,  294,
      293,  292,  291,  172,  290,  289,  286,  285,  284,  281,
      278,  277,  276,  275,  274,  273,  272,  271,  268,  267,
      266,  265,  263,  262,  261,  260,  259,  258,  257,  254,
      253,  248,  247,  244,  243,  240,  237,  236,  235,  234,

      230,  229,  228,  227,  226,  225,  224,  223,  220,  219,
      216,  215,  214,  213,  212,  211,  210,  209,  208,  206,
      205,  204,  198,  192,  191,  190,  183,  182,  181,  178,
      177,  176,  170,  169,  166,  163,  162,  159,  158,  157,
      156,  151,  147,   45,   72,   45, 1022,    3, 1022, 1022,
     1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022,
     1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022,
     1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022,
     1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022,
     1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022,

     1022, 1022, 1022, 1022, 1022, 1022, 1022
    } ;

static yyconst flex_int16_t yy_chk[1308] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    5,
       12,    5,    8,    8,   12,   19,   27,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,   18,   41,
       33,   14,   51,   19,   27,   51,   44,   18,   44,  665,
        8,    8,   10,   41,   33,   10,   10,   10,   10,   10,

       10,   10,   10,   10,   10,   10,   10,   14,   33,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   11,   11,   20,
       11,   11,   11,   11,   11,   11,   16,   48,   11,  208,
       11,   11,   11,   30,   11,   11,  208,   16,   11,   11,
       43,   48,   11,   13,   13,   13,   13,   13,   13,   13,
       13,   30,   20,   13,   13,   13,   13,   40,   32,   28,
      666,   24,   13,   16,   53,   13,   13,   13,   13,   13,

       13,   22,   24,   23,   32,   40,   32,   28,   43,   24,
       53,   28,   22,   72,   23,   28,   22,   59,   13,   21,
       24,   31,   22,   22,   23,   24,   22,   59,   24,   22,
       21,   23,   25,   21,   72,   21,  148,   21,   22,   31,
       23,   64,   36,   25,   21,   29,   25,   39,   25,   31,
       21,   25,   64,   21,   26,   70,   21,  148,   34,   25,
       36,   38,   29,   25,   39,   26,   29,   42,   26,   25,
       62,   29,   29,   34,   36,   77,   26,   34,   37,   39,
       54,   70,   76,   26,  112,   34,   26,   62,   54,   42,
      112,   26,   38,   34,   34,   35,   37,   78,  135,   38,

       83,   77,   76,   37,   84,   84,  219,   37,   76,   35,
       37,   37,   84,   35,   82,  135,   35,   35,   78,   83,
       35,   35,   92,   78,   35,  109,   35,   35,  109,   35,
       69,   69,   69,   69,   82,   69,   69,   69,  298,   88,
       82,   88,   92,  298,   94,   98,  219,   91,   92,   69,
       69,   71,   71,   71,   71,   71,   71,   71,   71,   91,
       98,   71,   71,   71,   71,   89,   93,   94,  667,   89,
       94,   98,   93,   71,   71,   71,   71,   71,   71,   89,
      122,  122,  127,  129,  132,  139,   89,  136,  136,  153,
      162,   89,   93,  129,  195,  122,  164,  164,  168,  168,

      127,  153,  132,  162,  254,  139,  173,  173,  173,  173,
      202,  173,  173,  173,  233,  251,  668,  195,  233,  254,
      195,  369,  260,  369,  464,  173,  173,  670,  251,  305,
      671,  202,  260,  233,  413,  413,  202,  413,  305,  672,
      502,  305,  464,  478,  514,  478,  502,  609,  514,  609,
      673,  305,  674,  675,  676,  677,  679,  680,  681,  682,
      683,  684,  685,  687,  688,  689,  690,  691,  693,  694,
      695,  696,  697,  698,  699,  700,  701,  702,  703,  704,
      705,  706,  707,  708,  709,  711,  712,  713,  714,  716,
      717,  718,  720,  723,  724,  726,  727,  729,  730,  732,

      733,  734,  735,  736,  737,  738,  739,  740,  741,  742,
      743,  744,  745,  746,  748,  749,  751,  752,  753,  754,
      755,  756,  758,  759,  760,  761,  762,  763,  764,  765,
      766,  767,  768,  769,  770,  772,  773,  774,  775,  773,
      776,  777,  778,  779,  780,  781,  783,  784,  785,  786,
      787,  788,  790,  793,  794,  795,  796,  797,  798,  799,
      800,  798,  801,  802,  803,  804,  805,  806,  807,  809,
      811,  812,  814,  816,  817,  820,  821,  823,  824,  825,
      826,  829,  830,  831,  832,  833,  834,  835,  836,  839,
      840,  841,  842,  843,  844,  845,  846,  848,  850,  851,

      852,  853,  854,  855,  856,  857,  859,  860,  861,  862,
      863,  864,  866,  868,  873,  874,  875,  868,  876,  877,
      878,  879,  880,  882,  883,  884,  885,  886,  889,  890,
      892,  893,  894,  895,  896,  897,  898,  899,  900,  901,
      902,  905,  906,  907,  908,  910,  911,  912,  913,  913,
      915,  916,  918,  919,  920,  921,  922,  923,  924,  925,
      926,  927,  928,  930,  931,  932,  934,  935,  936,  938,
      939,  940,  942,  943,  945,  946,  947,  949,  950,  951,
      953,  954,  956,  957,  958,  959,  960,  961,  962,  963,
      964,  966,  967,  968,  969,  971,  972,  974,  975,  976,

      977,  978,  980,  981,  982,  983,  986,  987,  989,  990,
      991,  993,  998, 1000, 1001, 1002, 1005, 1006, 1007, 1008,
     1009, 1010, 1012, 1013, 1016, 1023,  664,  663, 1023, 1024,
     1024,  662,  661, 1024, 1025, 1025, 1026, 1026, 1026,  660,
     1026, 1027, 1027, 1027, 1027, 1027, 1027, 1028, 1028, 1028,
     1028, 1028, 1028,  659,  658,  657,  656,  655,  654,  653,
      652,  651,  650,  649,  647,  646,  645,  644,  643,  641,
      638,  636,  635,  633,  631,  628,  626,  625,  624,  623,
      622,  621,  620,  619,  618,  617,  616,  615,  614,  613,
      612,  611,  610,  608,  607,  606,  605,  604,  603,  602,

      601,  600,  599,  598,  597,  596,  595,  594,  593,  592,
      591,  590,  589,  588,  587,  586,  585,  584,  583,  582,
      581,  580,  579,  578,  577,  576,  575,  574,  572,  571,
      570,  569,  568,  567,  566,  565,  564,  563,  562,  561,
      560,  559,  558,  556,  555,  554,  553,  552,  551,  550,
      549,  548,  547,  546,  545,  544,  543,  542,  541,  540,
      539,  538,  537,  536,  535,  534,  532,  531,  530,  528,
      527,  526,  525,  524,  523,  522,  521,  520,  519,  518,
      517,  516,  515,  513,  512,  511,  510,  509,  508,  507,
      505,  504,  503,  501,  500,  499,  498,  497,  496,  495,

      494,  492,  491,  490,  489,  488,  487,  486,  485,  484,
      482,  481,  480,  479,  476,  475,  474,  473,  472,  471,
      470,  469,  468,  467,  466,  463,  462,  460,  459,  458,
      457,  456,  455,  454,  453,  452,  451,  450,  449,  448,
      447,  446,  445,  444,  442,  441,  440,  439,  438,  437,
      436,  433,  432,  431,  430,  429,  427,  426,  425,  424,
      423,  422,  421,  420,  419,  417,  416,  415,  414,  412,
      411,  410,  409,  408,  406,  405,  404,  403,  402,  401,
      400,  399,  398,  397,  396,  394,  393,  392,  391,  390,
      389,  388,  387,  385,  383,  382,  381,  380,  379,  378,

      377,  375,  374,  373,  372,  371,  370,  367,  366,  365,
      364,  363,  362,  361,  360,  359,  358,  357,  355,  354,
      353,  352,  351,  350,  349,  348,  347,  346,  345,  344,
      343,  342,  341,  340,  339,  337,  335,  334,  330,  328,
      327,  326,  325,  321,  320,  319,  318,  317,  316,  315,
      314,  313,  312,  311,  310,  309,  306,  304,  303,  302,
      301,  300,  299,  296,  295,  294,  293,  290,  289,  288,
      287,  286,  285,  284,  283,  282,  281,  280,  279,  277,
      276,  275,  274,  273,  272,  271,  270,  269,  268,  267,
      266,  265,  264,  263,  262,  261,  259,  258,  257,  256,

      255,  253,  252,  249,  248,  246,  245,  244,  243,  242,
      241,  240,  239,  238,  232,  231,  230,  229,  228,  227,
      226,  225,  224,  221,  220,  218,  217,  216,  214,  213,
      212,  211,  210,  209,  207,  206,  205,  204,  203,  201,
      200,  199,  198,  197,  196,  194,  193,  192,  191,  190,
      188,  187,  186,  185,  184,  183,  182,  181,  180,  179,
      178,  177,  176,  171,  170,  169,  167,  166,  165,  163,
      161,  160,  159,  158,  157,  156,  155,  154,  152,  151,
      150,  149,  146,  145,  144,  143,  142,  141,  140,  138,
      137,  134,  133,  131,  130,  128,  126,  125,  124,  123,

      121,  120,  118,  117,  116,  115,  114,  113,  111,  110,
      108,  107,  105,  104,  103,  102,  101,  100,   99,   97,
       96,   95,   90,   87,   86,   85,   81,   80,   79,   75,
       74,   73,   67,   65,   63,   61,   60,   58,   57,   56,
       55,   52,   47,   45,   17,    6,    3, 1022, 1022, 1022,
     1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022,
     1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022,
     1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022,
     1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022,
     1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022,

     1022, 1022, 1022, 1022, 1022, 1022, 1022
    } ;

static yyconst flex_int16_t yy_rule_linenum[183] =
    {   0,
       42,   43,   45,   48,   49,   50,   51,   52,   54,   55,
       56,   58,   59,   60,   61,   62,   63,   65,   67,   68,
       69,   70,   71,   72,   73,   74,   75,   77,   78,   79,
       80,   82,   83,   84,   85,   87,   88,   89,   90,   91,
       92,   93,   94,   95,   96,   97,   98,   99,  101,  102,
      104,  105,  106,  107,  108,  109,  110,  111,  112,  114,
      115,  116,  118,  119,  120,  121,  122,  123,  125,  127,
      128,  129,  130,  131,  132,  134,  135,  136,  137,  138,
      139,  141,  142,  143,  144,  145,  146,  147,  148,  149,
      150,  151,  152,  153,  154,  155,  156,  157,  158,  159,

      160,  161,  162,  163,  164,  165,  166,  167,  168,  169,
      170,  171,  173,  174,  175,  176,  177,  178,  179,  180,
      181,  182,  183,  184,  185,  186,  187,  188,  189,  190,
      191,  192,  193,  194,  195,  196,  197,  198,  199,  200,
      201,  202,  203,  204,  205,  206,  207,  208,  209,  210,
      211,  212,  213,  214,  215,  216,  217,  218,  219,  220,
      221,  222,  223,  224,  225,  226,  227,  228,  229,  230,
      231,  232,  233,  234,  235,  239,  240,  241,  242,  245,
      246,  247
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "../s/cmdoptions.l"
/******************************************************************************
* Copyright 2015-2022 Xilinx, Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
******************************************************************************/
/* This is the lexer/flexer input file, that tokenizes the register initialization file */
/* Run the cmdoptions.y file first through bison to generate the regidit.tab.hpp file, which is included herein */
/* Then run this file through flex to generate the cmdoptions.yy.c source code */
#line 22 "../s/cmdoptions.l"
 #include <stdio.h>
 #include "cmdoptionsscanner.h"
 #include "cmdoptions.tab.hpp"
 typedef CO::BisonParser::token tok;
#line 31 "../s/cmdoptions.l"
     # define YY_USER_ACTION  yylloc->columns (yyleng);
#line 1165 "../bisonflex/cmdoptions.yy.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#include <unistd.h>
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */
/* %if-bison-bridge */
/* %endif */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */
/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define ECHO LexerOutput( yytext, yyleng )
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
\
/* %if-c++-only C++ definition \ */\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#define YY_FATAL_ERROR(msg) LexerError( msg )
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define YY_DECL int yyFlexLexer::yylex()
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
/* %% [7.0] user's declarations go here */
#line 34 "../s/cmdoptions.l"



   yylloc->step ();




#line 1331 "../bisonflex/cmdoptions.yy.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyin = & std::cin;
/* %endif */

		if ( ! yyout )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyout = & std::cout;
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1023 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1022 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				std::cerr << "--scanner backing up\n";
			else if ( yy_act < 183 )
				std::cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
				         "(\"" << yytext << "\")\n";
			else if ( yy_act == 183 )
				std::cerr << "--accepting default rule (\"" << yytext << "\")\n";
			else if ( yy_act == 184 )
				std::cerr << "--(end of buffer or a NUL)\n";
			else
				std::cerr << "--EOF (start condition " << YY_START << ")\n";
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 42 "../s/cmdoptions.l"
{ comment(); }
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 43 "../s/cmdoptions.l"
/* ignore */;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 45 "../s/cmdoptions.l"
yylval->number=strtoul(yytext+2,NULL,16); return tok::HEXVALUE;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 48 "../s/cmdoptions.l"
return tok::_IMAGE;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 49 "../s/cmdoptions.l"
return tok::_FILL;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 50 "../s/cmdoptions.l"
return tok::_O_TOK;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 51 "../s/cmdoptions.l"
return tok::I;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 52 "../s/cmdoptions.l"
return tok::_P_TOK;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 54 "../s/cmdoptions.l"
return tok::_W;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 55 "../s/cmdoptions.l"
return tok::ON;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 56 "../s/cmdoptions.l"
return tok::OFF;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 58 "../s/cmdoptions.l"
return tok::_LOG;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 59 "../s/cmdoptions.l"
return tok::ERROR;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 60 "../s/cmdoptions.l"
return tok::WARNING;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 61 "../s/cmdoptions.l"
return tok::INFO;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 62 "../s/cmdoptions.l"
return tok::DEBUG;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 63 "../s/cmdoptions.l"
return tok::TRACE;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 65 "../s/cmdoptions.l"
return tok::_BIF_HELP;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 67 "../s/cmdoptions.l"
return tok::_ENCRYPT;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 68 "../s/cmdoptions.l"
return tok::BBRAM;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 69 "../s/cmdoptions.l"
return tok::EFUSE;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 70 "../s/cmdoptions.l"
return tok::HMAC;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 71 "../s/cmdoptions.l"
return tok::HMAC;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 72 "../s/cmdoptions.l"
return tok::STARTCBC;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 73 "../s/cmdoptions.l"
return tok::STARTCBC;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 74 "../s/cmdoptions.l"
return tok::KEY0;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 75 "../s/cmdoptions.l"
return tok::KEY0;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 77 "../s/cmdoptions.l"
return tok::_SPLIT;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 78 "../s/cmdoptions.l"
return tok::_PROCESS_BITSTREAM;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 79 "../s/cmdoptions.l"
return tok::MCS;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 80 "../s/cmdoptions.l"
return tok::BIN;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 82 "../s/cmdoptions.l"
return tok::_DUAL_QSPI_MODE;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 83 "../s/cmdoptions.l"
return tok::_DUAL_OSPI_MODE;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 84 "../s/cmdoptions.l"
return tok::PARALLEL;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 85 "../s/cmdoptions.l"
return tok::STACKED;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 87 "../s/cmdoptions.l"
return tok::EQUALS;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 88 "../s/cmdoptions.l"
return tok::COMMA;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 89 "../s/cmdoptions.l"
return tok::_DEBUG_TOK;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 90 "../s/cmdoptions.l"
return tok::_DUMP;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 91 "../s/cmdoptions.l"
return tok::DUMP_PLM;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 92 "../s/cmdoptions.l"
return tok::DUMP_PMC_CDO;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 93 "../s/cmdoptions.l"
return tok::DUMP_BOOT_FILES;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 94 "../s/cmdoptions.l"
return tok::DUMP_SLAVE_PDIS;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 95 "../s/cmdoptions.l"
return tok::_DUMP_DIR;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 96 "../s/cmdoptions.l"
return tok::_LEGACY;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 97 "../s/cmdoptions.l"
return tok::_PADIMAGEHEADER;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 98 "../s/cmdoptions.l"
return tok::_EFUSEPPKBITS;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 99 "../s/cmdoptions.l"
return tok::_GENERATE_HASHES;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 101 "../s/cmdoptions.l"
return tok::_SECUREDEBUG;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 102 "../s/cmdoptions.l"
return tok::_AUTHJTAG;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 104 "../s/cmdoptions.l"
return tok::_GENERATE_KEYS;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 105 "../s/cmdoptions.l"
return tok::AUTH;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 106 "../s/cmdoptions.l"
return tok::PEM;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 107 "../s/cmdoptions.l"
return tok::RSA;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 108 "../s/cmdoptions.l"
return tok::GREY;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 109 "../s/cmdoptions.l"
return tok::METAL;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 110 "../s/cmdoptions.l"
return tok::ECDSA;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 111 "../s/cmdoptions.l"
return tok::ECDSA;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 112 "../s/cmdoptions.l"
return tok::ECDSAP521;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 114 "../s/cmdoptions.l"
return tok::_NONBOOTING;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 115 "../s/cmdoptions.l"
return tok::_SPKSIGNATURE;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 116 "../s/cmdoptions.l"
return tok::_PACKAGENAME;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 118 "../s/cmdoptions.l"
return tok::_ARCH;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 119 "../s/cmdoptions.l"
return tok::ZYNQ;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 120 "../s/cmdoptions.l"
return tok::ZYNQMP;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 121 "../s/cmdoptions.l"
return tok::VERSAL;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 122 "../s/cmdoptions.l"
return tok::FPGA;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 123 "../s/cmdoptions.l"
return tok::VERSALNET;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 125 "../s/cmdoptions.l"
return tok::_R;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 127 "../s/cmdoptions.l"
return tok::_READ;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 128 "../s/cmdoptions.l"
return tok::READ_BH;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 129 "../s/cmdoptions.l"
return tok::READ_IHT;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 130 "../s/cmdoptions.l"
return tok::READ_IH;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 131 "../s/cmdoptions.l"
return tok::READ_PHT;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 132 "../s/cmdoptions.l"
return tok::READ_AC;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 134 "../s/cmdoptions.l"
return tok::_VERIFYKDF;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 135 "../s/cmdoptions.l"
return tok::_VERIFY;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 136 "../s/cmdoptions.l"
return tok::_ZYNQMPENCRDUMP;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 137 "../s/cmdoptions.l"
return tok::_NOAUTHBLOCKS;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 138 "../s/cmdoptions.l"
return tok::_ZYNQMPES1;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 139 "../s/cmdoptions.l"
return tok::_OVERLAYCDO;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 141 "../s/cmdoptions.l"
return tok::_H;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 142 "../s/cmdoptions.l"
return tok::_H;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 143 "../s/cmdoptions.l"
return tok::HBIFHELP;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 144 "../s/cmdoptions.l"
return tok::HARCH;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 145 "../s/cmdoptions.l"
return tok::HIMAGE;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 146 "../s/cmdoptions.l"
return tok::HFILL;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 147 "../s/cmdoptions.l"
return tok::HO;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 148 "../s/cmdoptions.l"
return tok::HP;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 149 "../s/cmdoptions.l"
return tok::HW;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 150 "../s/cmdoptions.l"
return tok::HEFUSEPPKBITS;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 151 "../s/cmdoptions.l"
return tok::HGENHASHES;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 152 "../s/cmdoptions.l"
return tok::HLEGACY;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 153 "../s/cmdoptions.l"
return tok::HPADHDR;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 154 "../s/cmdoptions.l"
return tok::H_SPKSIGN;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 155 "../s/cmdoptions.l"
return tok::HPACKAGE;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 156 "../s/cmdoptions.l"
return tok::HENCRYPT;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 157 "../s/cmdoptions.l"
return tok::HGENKEYS;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 158 "../s/cmdoptions.l"
return tok::HDQSPI;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 159 "../s/cmdoptions.l"
return tok::HLOG;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 160 "../s/cmdoptions.l"
return tok::HZYNQMPES1;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 161 "../s/cmdoptions.l"
return tok::HPROCESSBIT;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 162 "../s/cmdoptions.l"
return tok::HNONBOOTING;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 163 "../s/cmdoptions.l"
return tok::HENCRDUMP;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 164 "../s/cmdoptions.l"
return tok::HVERIFY;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 165 "../s/cmdoptions.l"
return tok::HVERIFYKDF;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 166 "../s/cmdoptions.l"
return tok::HSECUREDEBUG;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 167 "../s/cmdoptions.l"
return tok::HSECUREDEBUG;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 168 "../s/cmdoptions.l"
return tok::HREAD;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 169 "../s/cmdoptions.l"
return tok::HDUMP;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 170 "../s/cmdoptions.l"
return tok::HDUMPDIR;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 171 "../s/cmdoptions.l"
return tok::HOVLCDO;
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 173 "../s/cmdoptions.l"
return tok::H_BIF_AARCH32;
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 174 "../s/cmdoptions.l"
return tok::H_BIF_BIGENDIAN;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 175 "../s/cmdoptions.l"
return tok::H_BIF_BOOTCONFIG;
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 176 "../s/cmdoptions.l"
return tok::H_BIF_COPY;
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 177 "../s/cmdoptions.l"
return tok::H_BIF_CORE;
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 178 "../s/cmdoptions.l"
return tok::H_BIF_DELAY_HANDOFF;
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 179 "../s/cmdoptions.l"
return tok::H_BIF_DELAY_LOAD;
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 180 "../s/cmdoptions.l"
return tok::H_BIF_FILE;
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 181 "../s/cmdoptions.l"
return tok::H_BIF_ID;
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 182 "../s/cmdoptions.l"
return tok::H_BIF_IMAGE;
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 183 "../s/cmdoptions.l"
return tok::H_BIF_METAHDR;
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 184 "../s/cmdoptions.l"
return tok::H_BIF_NAME;
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 185 "../s/cmdoptions.l"
return tok::H_BIF_PARTITION;
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 186 "../s/cmdoptions.l"
return tok::H_BIF_PARENTID;
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 187 "../s/cmdoptions.l"
return tok::H_BIF_SLR;
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 188 "../s/cmdoptions.l"
return tok::H_BIF_TYPE;
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 189 "../s/cmdoptions.l"
return tok::H_BIF_KEYSRC;
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 190 "../s/cmdoptions.l"
return tok::H_BIF_INIT;
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 191 "../s/cmdoptions.l"
return tok::H_BIF_UDFBH;
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 192 "../s/cmdoptions.l"
return tok::H_BIF_AES;
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 193 "../s/cmdoptions.l"
return tok::H_BIF_PPK;
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 194 "../s/cmdoptions.l"
return tok::H_BIF_PSK;
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 195 "../s/cmdoptions.l"
return tok::H_BIF_SPK;
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 196 "../s/cmdoptions.l"
return tok::H_BIF_SSK;
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 197 "../s/cmdoptions.l"
return tok::H_BIF_SPKSIGN;
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 198 "../s/cmdoptions.l"
return tok::H_BIF_HDRSIGN;
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 199 "../s/cmdoptions.l"
return tok::H_BIF_BOOTIMAGE;
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 200 "../s/cmdoptions.l"
return tok::H_BIF_BL;
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 201 "../s/cmdoptions.l"
return tok::H_BIF_ENCR;
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 202 "../s/cmdoptions.l"
return tok::H_BIF_PID;
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 203 "../s/cmdoptions.l"
return tok::H_BIF_AUTH;
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 204 "../s/cmdoptions.l"
return tok::H_BIF_CHKSM;
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 205 "../s/cmdoptions.l"
return tok::H_BIF_POWNER;
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 206 "../s/cmdoptions.l"
return tok::H_BIF_POWNER;
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 207 "../s/cmdoptions.l"
return tok::H_BIF_PRESIGN;
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 208 "../s/cmdoptions.l"
return tok::H_BIF_UDF;
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 209 "../s/cmdoptions.l"
return tok::H_BIF_XIP;
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 210 "../s/cmdoptions.l"
return tok::H_BIF_ALIGN;
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 211 "../s/cmdoptions.l"
return tok::H_BIF_OFFSET;
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 212 "../s/cmdoptions.l"
return tok::H_BIF_RES;
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 213 "../s/cmdoptions.l"
return tok::H_BIF_LOAD;
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 214 "../s/cmdoptions.l"
return tok::H_BIF_STARTUP;
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 215 "../s/cmdoptions.l"
return tok::H_BIF_KEYSRCENCR;
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 216 "../s/cmdoptions.l"
return tok::H_BIF_FSBLCFG;
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 217 "../s/cmdoptions.l"
return tok::H_BIF_BOOTDEV;
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 218 "../s/cmdoptions.l"
return tok::H_BIF_DESTCPU;
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 219 "../s/cmdoptions.l"
return tok::H_BIF_DESTDEV;
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 220 "../s/cmdoptions.l"
return tok::H_BIF_EL;
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 221 "../s/cmdoptions.l"
return tok::H_BIF_TZ;
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 222 "../s/cmdoptions.l"
return tok::H_BIF_AUTHPARAM;
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 223 "../s/cmdoptions.l"
return tok::H_BIF_BHKEY;
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 224 "../s/cmdoptions.l"
return tok::H_BIF_PFW;
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 225 "../s/cmdoptions.l"
return tok::H_BIF_BLOCKS;
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 226 "../s/cmdoptions.l"
return tok::H_BIF_BHIV;
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 227 "../s/cmdoptions.l"
return tok::H_BIF_METAL;
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 228 "../s/cmdoptions.l"
return tok::H_BIF_ELYHNDOFF;
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 229 "../s/cmdoptions.l"
return tok::H_BIF_HIVEC;
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 230 "../s/cmdoptions.l"
return tok::H_BIF_BHSIGN;
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 231 "../s/cmdoptions.l"
return tok::H_SPLIT;
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 232 "../s/cmdoptions.l"
return tok::H_BIF_BOOTVEC;
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 233 "../s/cmdoptions.l"
return tok::H_BIF_PUFDATA;
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 234 "../s/cmdoptions.l"
return tok::H_DPACM_ENABLE;
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 235 "../s/cmdoptions.l"
return tok::H_BIF_USERKEYS;
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 239 "../s/cmdoptions.l"
yylval->cstring=strdup(yytext);         return tok::HEXSTRING;
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 240 "../s/cmdoptions.l"
yylval->cstring=strdup(yytext);  return tok::IDENTIFIER;
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 241 "../s/cmdoptions.l"
yylval->cstring=strdup(yytext);    return tok::FILENAME;
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 242 "../s/cmdoptions.l"
yylval->cstring=strdup(yytext+1); yylval->cstring[strlen(yytext)-2]=0; return tok::QFILENAME;
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 245 "../s/cmdoptions.l"
yylloc->step ();
	YY_BREAK
case 181:
/* rule 181 can match eol */
YY_RULE_SETUP
#line 246 "../s/cmdoptions.l"
yylloc->lines (yyleng); yylloc->step ();
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 247 "../s/cmdoptions.l"
LOG_ERROR("Unknown option on command line: %s\n",yytext);
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 248 "../s/cmdoptions.l"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 2357 "../bisonflex/cmdoptions.yy.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	cmdoptionsfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	cmdoptionsfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
int yyFlexLexer::yy_get_next_buffer()
/* %endif */
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					cmdoptionsrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) cmdoptionsrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_get_previous_state()
/* %endif */
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1023 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
/* %endif */
{
	register int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1023 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1022);

	return yy_is_jam ? 0 : yy_current_state;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyunput( int c, register char* yy_bp)
/* %endif */
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yyinput()
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyrestart( std::istream* input_file )
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_load_buffer_state()
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) cmdoptionsalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) cmdoptionsalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		cmdoptionsfree((void *) b->yy_ch_buf  );

	cmdoptionsfree((void *) b  );
}

/* %if-c-only */
/* %endif */

/* %if-c++-only */

extern "C" int isatty (int );

/* %endif */

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_is_interactive = 0;
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypop_buffer_state (void)
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yyensure_buffer_stack(void)
/* %endif */
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)cmdoptionsalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)cmdoptionsrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_push_state( int new_state )
/* %endif */
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) cmdoptionsalloc(new_size  );

		else
			(yy_start_stack) = (int *) cmdoptionsrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_pop_state()
/* %endif */
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yy_top_state()
/* %endif */
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* %if-reentrant */
/* %endif */
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *cmdoptionsalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *cmdoptionsrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void cmdoptionsfree (void * ptr )
{
	free( (char *) ptr );	/* see cmdoptionsrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 248 "../s/cmdoptions.l"




void CO::FlexScanner::comment()
{
    char c, c1;
    loop:
        while ((c = yyinput()) != '*' && c != 0) 
        {
            // putchar(c);
        }

    if ((c1 = yyinput()) != '/' && c != 0)
    {
        unput(c1);
        goto loop;
    }
}

