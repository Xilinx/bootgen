#line 2 "../bisonflex/bif.yy.cpp"

#line 4 "../bisonflex/bif.yy.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer bifFlexLexer
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstring>
/* end standard C++ headers. */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

/* %if-not-reentrant */
extern int yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
/* %endif */

/* %if-c++-only */
	std::istream* yy_input_file;
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */
/* %if-not-reentrant */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
/* %endif */

void *bifalloc (yy_size_t  );
void *bifrealloc (void *,yy_size_t  );
void biffree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext

#include "FlexLexer.h"

int yyFlexLexer::yywrap() { return 1; }
int yyFlexLexer::yylex()
	{
	LexerError( "yyFlexLexer::yylex invoked but %option yyclass used" );
	return 0;
	}

#define YY_DECL int FlexScanner::yylex()

/* %if-c-only Standard (non-C++) definition */
/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 270
#define YY_END_OF_BUFFER 271
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1224] =
    {   0,
        0,    0,  271,  269,  266,  267,  268,  269,  258,  260,
      249,  250,  251,  252,  244,  253,  264,  257,  238,  238,
      241,  242,  269,  243,  269,  240,  263,  245,  246,  262,
      263,  240,  240,  240,  240,  240,  240,  263,  263,  263,
      263,  263,  263,  263,  263,  263,  263,  263,  263,  263,
      263,  263,  247,  261,  248,  259,  266,  267,    0,    0,
      264,    1,  264,  238,  240,  264,  254,  255,  240,    0,
      263,  240,  240,  263,  240,  240,  240,  263,  263,  263,
      240,  263,  263,  263,  263,  263,  240,  240,  263,  263,
      263,  240,  263,  263,  240,  240,  240,  263,  263,  263,

      263,  240,  263,  263,  263,  263,  263,  263,   53,  263,
      263,  263,  263,  263,  263,  263,  263,  263,  263,  263,
      263,  263,  263,  263,  263,  263,  263,  263,  263,  263,
      208,  263,  263,  263,  207,  263,  263,  263,  263,  263,
      263,  263,  263,  263,  263,  263,  263,  263,  263,  263,
      263,  263,  263,  263,  263,  263,  263,  263,  263,  263,
      265,    0,    0,    2,  264,  239,    0,  240,  263,  240,
      240,  263,  263,  240,   79,  204,  263,  263,  263,  263,
      263,  263,  234,  263,  263,  263,   99,  101,  263,  263,
      263,  263,  263,  263,  263,  263,  263,  263,  240,  263,

      264,  108,  263,  263,  263,  263,  263,  263,  232,  263,
      263,  263,  263,  263,  263,  263,  263,  263,  263,  263,
      263,  263,  233,   86,  263,  167,  263,  263,  263,  263,
      263,  263,  263,  263,  263,  263,  263,  263,  263,   64,
       37,   95,   93,  202,  263,  263,  263,  263,  203,  263,
      263,  264,  263,  263,  100,  263,  263,   81,  263,  263,
      174,  264,  164,  165,  263,  263,  263,  263,  219,  263,
      263,  263,  263,  263,  263,  263,  263,  263,  263,   61,
      168,  263,  210,    0,  264,  263,  264,  263,  264,  264,
      263,  263,  263,  263,  263,  263,  263,  263,  263,  263,

      263,  263,  263,  263,    7,  263,  264,  263,  263,   35,
      182,  263,  263,  263,  263,  263,  263,  263,  263,  212,
      213,  214,  215,  263,  263,  263,  263,  263,   55,   91,
      263,  263,  263,  263,  263,  263,   38,  263,  263,  263,
       34,  263,  263,  264,  179,  229,  263,   54,  163,  263,
      264,   78,  263,  263,  263,  263,  263,  172,  263,  263,
      263,  170,  263,  263,  263,  263,  263,  263,  263,  263,
      263,  263,  263,  263,  197,  199,  264,  264,  263,  263,
      263,  263,  263,  171,  264,  264,  264,  263,  263,   87,
       88,  263,  263,  264,  173,  264,  263,  263,  263,  263,

      263,  263,  263,  263,  263,  263,   98,  263,  263,    8,
      263,  183,  187,  191,  194,  263,  186,  190,  193,  196,
      263,  184,  188,  185,  189,  192,  195,  263,  263,  263,
      263,  263,  263,  263,  263,  263,  112,  263,  263,  263,
      263,  263,  263,  263,  263,  263,  263,  263,  263,  264,
      263,  263,  263,  263,  263,  263,  263,  263,   82,  111,
      263,  263,  263,  263,  263,  263,  263,  263,   18,  263,
       24,  263,  263,  263,  263,  263,  263,  264,  264,  263,
      263,  264,  263,  263,  263,  263,  263,   90,  263,  263,
      263,  263,  209,  263,  263,  263,  263,  263,  263,  263,

      263,  263,  263,  263,  264,  198,  200,  263,  263,  263,
      263,  263,  166,  264,  264,  263,  263,  263,  263,  264,
      264,  264,  263,  264,  263,  263,  263,  263,  228,  263,
      263,  263,  263,  263,  263,  263,  263,   92,  263,  263,
      264,  263,  263,  263,  263,  263,  263,  263,  263,  263,
      263,  263,  263,  263,  263,  263,  263,  263,  263,  263,
      263,  263,  263,  263,  263,  263,  263,   19,  263,  263,
      263,  263,  263,  263,  264,  263,  263,  263,  263,  263,
      263,  263,  263,  264,  263,  263,  263,  263,  263,  263,
      263,  263,  263,  263,  263,  263,  263,  263,  110,  263,

      263,  263,  264,  264,  263,  263,  264,  264,  263,  231,
       31,  263,  263,  263,  263,  263,  263,  263,  263,  263,
      263,  263,  263,  263,  263,  263,  263,  162,  161,  264,
      263,  263,  263,  263,  263,  264,  264,  264,  263,  217,
      263,  263,  264,  264,  264,  263,  264,  225,  263,  263,
      263,  263,  263,    9,  263,  263,  263,  263,  263,   39,
      263,  264,  263,  263,  263,  140,  142,  141,  143,  157,
      263,  160,  263,  263,  263,  263,  263,  263,  263,  263,
      263,  263,  263,  263,  263,  263,  263,  263,  263,  263,
      263,  263,  263,  263,  263,  263,  263,  263,  102,  263,

      205,  263,  263,  263,  263,  263,  263,  263,  263,  264,
      263,  263,  263,  263,  263,  263,  263,  263,  263,  263,
      263,  263,  263,  263,   51,  263,  263,   28,  263,  263,
      135,  263,  263,  178,  264,  263,  263,   96,   94,  263,
      149,  263,  263,  263,  263,   59,  263,  263,   41,    4,
      263,   42,  263,  263,  263,  263,  264,  144,  263,   33,
      263,  158,  264,  175,  176,   26,  151,  263,  264,  264,
      264,  263,  264,  263,   43,  263,   44,   36,  263,  263,
      263,   29,  263,  263,  264,  263,  263,  263,  263,  263,
      263,  263,  263,  263,  263,  263,  263,  263,  263,  263,

      263,  263,  263,  263,  263,  263,  263,  263,  263,  263,
      263,  263,  263,  263,  263,   85,  263,  263,  263,  263,
      263,  263,  263,  263,  264,  264,  263,  263,  263,  263,
      263,  263,  169,  263,  263,  263,  263,  263,  263,  263,
      263,  263,  263,  263,   27,  263,  180,  263,  263,  263,
      263,  263,  263,  263,  263,  263,  263,  263,  263,   57,
      263,  147,  264,  263,  263,  263,  264,  263,  103,  264,
      264,  263,  264,  263,  263,  263,  263,  263,  263,    5,
      264,  263,   75,    6,  263,  263,   13,  148,  263,  263,
      263,  263,  263,  263,  263,  263,  263,  263,  263,  263,

       71,   60,  263,  263,  263,  263,  263,   49,  263,  263,
      263,  263,  263,  263,  263,  263,  263,  263,  263,  264,
      264,  263,  263,  263,  263,  263,  263,  263,  263,   76,
      263,  263,  263,  263,  263,  263,  263,  263,  263,   11,
      263,  218,  263,   50,  263,   23,  263,  263,  263,   12,
      150,  263,  264,  139,  263,  227,  177,  230,  264,  105,
      263,  223,  263,  263,  263,  263,  263,  216,  264,  121,
      122,  123,  124,  125,  126,  127,  128,  263,   40,  263,
      263,   20,  263,  263,  263,  263,  263,  263,  263,  120,
      119,   56,  263,   21,  263,  263,    3,  263,  263,   17,

      263,   16,  263,  236,  263,  263,  263,   83,   84,  263,
      263,  263,  263,  263,   77,  263,  263,  263,  263,  263,
      263,  263,   66,  263,  263,   25,  263,  263,   62,  263,
       65,  263,  221,  263,  264,  263,  104,  264,  155,  222,
      263,  263,  263,  263,  224,  263,  220,  263,  263,  263,
      263,  263,  263,  263,  263,   46,  137,  159,   48,  263,
      263,  263,  154,  263,  263,  263,  263,  263,  263,  263,
      263,  263,  136,   63,  226,  263,  263,  263,  263,   10,
      263,  263,  263,   58,  152,  201,  263,  264,  264,  263,
      263,  263,  263,   22,  263,  263,  263,  263,  263,   70,

      263,  263,  263,  263,  263,  153,  263,  263,  263,   72,
      263,  263,  263,  263,  263,  263,  263,  138,  237,  263,
       30,  263,  263,  263,  264,  264,   45,   67,   68,   69,
      263,  263,  263,  117,  118,  116,  263,  263,   15,  263,
      263,   14,  114,  115,  113,  263,  263,  263,  263,  263,
      263,  263,  263,  263,  263,  264,  264,  263,   80,  263,
      145,  263,  263,  263,  263,  263,  263,  263,  263,  263,
      263,  263,  263,   97,   32,  106,  264,  263,  235,  263,
      181,  263,  263,  263,  263,  263,  129,  132,  211,  263,
       47,  263,   89,  264,  146,  263,  263,  263,  263,  263,

      263,   52,  263,  107,  263,  263,  263,  263,  263,  263,
      109,  263,  206,  263,  263,   73,   74,  156,  130,  133,
      131,  134,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    6,    6,    8,    9,    1,   10,
       11,   12,   13,   14,   15,   16,   17,   18,   19,   20,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
       31,   32,    1,    6,   33,   33,   33,   33,   33,   33,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   35,   34,   34,
       36,   37,   38,   39,   40,    1,   41,   42,   43,   44,

       45,   46,   47,   48,   49,   50,   51,   52,   53,   54,
       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,   67,   68,   69,   70,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[71] =
    {   0,
        1,    1,    1,    1,    2,    2,    2,    2,    2,    2,
        2,    1,    3,    1,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    1,    1,    1,
        1,    1,    3,    3,    3,    1,    3,    1,    2,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[1228] =
    {   0,
        0,    0, 2508, 2509,   69, 2504, 2509,   70, 2509, 2509,
     2509, 2509, 2509,    0, 2509,    0,    0,   60,  119,   38,
     2509, 2509, 2476, 2509, 2473,  171,  220, 2509, 2509, 2509,
     2476,  227,  232,  103,  121,  248,  237,  108,  115, 2443,
       37, 2447,  260,  126,  214,  258, 2442,  283,  303,   41,
      276, 2451, 2509, 2509, 2509, 2509,  169, 2496, 2491,  172,
        0, 2509,  363,  121,  416,  463, 2509, 2509, 2469,  165,
     2468,  228,  492,  227,  120,  306,  320,  294,  152,  147,
      145,  301,  329,  230,  254,  267,  299,  220,  308,  148,
      324,  353,  306,  356,  303,  370,  383,  370,  361,  310,

      385,  358,  231,  350,  378,  372,  380,  360,  379,  418,
      419,  420,  265,  396,  422,  359,  426,  395,  428,  425,
      439,  444,  498,  429,  432,  438,  445,  442,  473,  430,
      449,  499,  493,  448,  495,  501,  502,  525,  401,  500,
      513,  515,  504,  521,  553,  523,  533,  539,  541,  527,
      522,  547,  548,  496,  549,  555,  556,  451,  558,  557,
     2509,  570, 2492, 2509,  613,    0,    0,  618,  619,  576,
      611,  565,  568,  571,  561, 2466,  562,  602,  567,  620,
      604,  626, 2465,  612,  578,  628, 2464,  642,  632,  635,
      570,  640,  636,  637,  644,  645,  646,  648,  650,  651,

      683, 2463,  656,  660,  663,  667,  658,  668, 2462,  659,
      678,  671,  688,  689,  690,  670,  664,  691,  692,  695,
      697,  698, 2461, 2460,  699,  716,  700,  701,  702,  708,
      711,  728,  714,  718,  720,  722,  725,  729,  730,  726,
     2459, 2458,  734,  735,  736,  727,  731,  737, 2457,  757,
      752,  774,  775,  740, 2456,  766,  760, 2455,  767,  768,
     2454, 2429,  785,  789,  774,   80,  778,  770,  792,  780,
      797,  782,  793,  786,  800,  788,  796,  790,  820, 2452,
     2451,  791,  822, 2471,  833,  794,  845,  795,  849,  851,
      799,  827,  833,  845,  846,  849,  848,  851,  852,  853,

      857,  856,  860,  855,  858,  854, 2430,  864,  859, 2448,
     2447,  865,  867,  880,  869,  868,  886,  890,  889,    0,
        0,    0,    0,  894,  896,  897,  898,  904, 2446,  899,
      900,  901,  905,  907,  910,  908, 2445,  909,  912,  913,
     2444,  914,  915, 2413,  929, 2442,  917, 2441, 2440,  919,
     2411, 2438,  922,  930,  933,  937,  940, 2437,  944,  946,
      947, 2436,  948,  949,  952,  953,  954,  955,  961,  956,
      957,  963,  966,  996,    0,    0, 2408,  968,  964,  965,
      969,  971,  970, 2434, 2402, 2402, 2401,  983,  979, 2430,
     2429,  985,  990,  977,  998, 2411,  995, 1001, 1002, 1003,

     1006, 1005, 1011, 1015, 1012, 1013, 2427, 1014, 1020, 1031,
     1019,    0,    0,    0,    0, 1055,    0,    0,    0,    0,
     1056,    0,    0,    0,    0,    0,    0, 1033, 1047, 1038,
     1021, 1025, 1053, 1041, 1042, 1057, 1059, 1061, 1062, 1063,
     1064, 1066, 1070, 1067, 1075, 1072, 1076, 1077, 1073, 2395,
     1074, 1078, 1099, 1082, 1102, 1106, 1109, 1110, 1120, 1112,
     1086, 1113, 1083, 1116, 1088, 1118, 1117, 1126, 2425, 1127,
     1128, 1129, 1130, 1131, 1134, 1135, 1136, 2411, 2393, 1141,
     1137, 1123, 1142, 1144, 1149, 1152, 1150, 2422, 1154, 1158,
     1161, 1160, 1163, 1166, 1165, 1172, 1170, 1171, 1173, 1178,

     1174, 1184,  229,  397, 2406,    0,    0, 1180, 1177, 1179,
     1187, 1188, 2433, 2406, 2405, 1194, 1197, 1200, 1202, 2390,
     2389, 2391, 1205, 2396, 1206, 1207, 1208, 1209, 2413, 1210,
     1211, 1212, 1218, 1219, 1223, 1220,  144, 2412, 1225, 1226,
     2394, 1229, 1233, 1236, 1246, 1243, 1249, 1248, 1251, 1261,
     1254, 1255, 1257, 1256, 1258, 1259, 1260, 1262, 1264, 1267,
     1268, 1266, 1272, 1280, 1289, 1291, 1293, 2410, 1269, 1295,
     1298, 1300, 1299, 1303, 2394, 1275, 1276, 1305, 1310, 1316,
     1317, 1302, 1320, 2380, 1322, 1321, 1327, 1326, 1331, 1333,
     1324, 1330, 1334, 1332, 1335, 1337, 1342, 1339, 1354, 1338,

     1361, 1358, 2372, 2393, 1362, 1363, 2380, 2389, 1364, 2403,
     2402, 1367, 1368, 1370, 1372, 1373, 1374, 1377, 1376, 1379,
     1380, 1383, 1384, 1385, 1386, 1390, 1391, 2401, 2400, 2376,
     1392, 1388, 1403, 1409, 1395, 2368, 2362, 2361, 1408, 2395,
     1411, 1413, 2367, 2367, 2379, 1414, 2358, 2390, 1418, 1419,
     1417, 1422, 1423, 2389, 1424, 1425, 1426, 1428, 1430, 2388,
     1429, 2369, 1431, 1432, 1433, 2386, 2385, 2384, 2383, 2382,
     1438, 2381, 1437, 1444, 1447, 1445, 1446, 1452, 1453, 1462,
     1463, 1464, 1465, 1466, 1468, 1472, 1473, 1476, 1477, 1478,
     1479, 1484, 1486, 1485, 1488, 1490, 1489, 1492,    0, 1491,

     2380, 1493, 1501, 1500, 1502, 1504, 1509, 1503, 1510, 1522,
     1508, 1518, 1524, 1525, 1528, 1530, 1531, 1533, 1536, 1537,
     1535, 1538, 1540, 1544, 2379, 1539, 1543, 2378, 1546, 1545,
     2377, 1547, 1556,    0, 2341, 1549, 1550,    0,    0, 1555,
     2375, 1557, 1558, 1567, 1568, 2374, 1573, 1569, 2373, 2372,
     1578, 2371, 1574, 1580, 1577, 1583, 2339, 2369, 1587, 1588,
     1589, 2368, 2354,    0,    0, 2366, 2365, 1592, 2332, 2345,
     2328, 1593, 2330, 1596, 2360, 1599, 2359, 2358, 1601, 1604,
     1605, 2357, 1602, 1607, 2323, 1606, 1614, 1615, 1616, 1623,
     1617, 1624, 1625, 1634, 1627, 1629, 1630, 1631, 1633, 1635,

     1636, 1639, 1640, 1646, 1637, 1648, 1651, 1653, 1655, 1659,
     1660, 1662, 1666, 1664, 1669, 2355, 1665, 1667, 1674, 1673,
     1672, 1676, 1688, 1678, 2356, 2361, 1680, 1684, 1689, 1692,
     1696, 1695, 2352, 1699, 1702, 1700, 1705, 1706, 1707, 1709,
     1710, 1711, 1715, 1716, 2351, 1717,    0, 1719, 1720, 1726,
     1729, 1730, 1727, 1724, 1735, 1731, 1738, 1739, 1747, 2350,
     1749, 2349, 2316, 1754, 1756, 1757, 2312, 1758,    0, 2325,
     2328, 1759, 2327, 1760, 1761, 1762, 1763, 1766, 1769, 2343,
     2311, 1804, 2341, 2340, 1765, 1770, 2339, 2338, 1777, 1767,
     1772, 1776, 1768, 1805, 1806, 1807, 1808, 1788, 1774, 1778,

     2337, 2336, 1809, 1810, 1812, 1813, 1816, 2335, 1821, 1822,
     1824, 1823, 1825, 1828, 1827, 1829, 1832, 1833, 1830, 2340,
     2342, 1836, 1837, 1845, 1850, 1835, 1853, 1855, 1859, 2332,
     1860, 1861, 1858, 1863, 1866, 1868, 1864, 1871, 1869, 2331,
     1870, 2330, 1874, 2329, 1872, 1883, 1873, 1875, 1876, 2328,
     2327, 1892, 2309, 2325, 1893, 2324,    0, 2323, 2303, 2334,
     1877,    0, 1896, 1878, 1898, 1901, 1902, 2320, 2302, 2318,
     2317, 2316, 2315, 2314, 2313, 2312, 2311, 1904, 2310, 1903,
     1907, 2309, 1906, 1912, 1913, 1914, 1921, 1917, 1916, 2308,
     2307, 2306, 1915, 2305, 1925, 1918, 2304, 1926, 1927, 2303,

     1931, 2302, 1930, 2301, 1933, 1941, 1943,    0,    0, 1945,
     1946, 1951, 1948, 1947, 2300, 1949, 1960, 1955, 1961, 1962,
     1953, 1963, 2299, 1952, 1964, 2298, 1967, 1975, 2297, 1978,
     2296, 1979, 2295, 1980, 2266, 1981,    0, 1972, 2293, 2292,
     1983, 1988, 1989, 1990,    0, 1992, 2291, 1993, 1991, 1995,
     1997, 2001, 1998, 2003, 2011, 2290, 2289, 2288, 2287, 2006,
     2023, 2024, 2286, 2026, 2027, 2029, 2030, 2004, 2031, 2035,
     2033, 2028, 2285, 2284, 2283, 2002, 2037, 2039, 2042, 2282,
     2044, 2051, 2052, 2281, 2280,    0, 2053, 2252, 2251, 2055,
     2059, 2061, 2062, 2277, 2060, 2063, 2064, 2065, 2067, 2276,

     2068, 2069, 2074, 2076, 2080, 2275, 2081, 2070, 2075, 2274,
     2077, 2084, 2083, 2092, 2097, 2100, 2078, 2273, 2272, 2098,
     2271, 2101, 2106, 2103, 2243, 2243, 2268, 2267, 2266, 2255,
     2110, 2116, 2117, 2253, 2252, 2251, 2119, 2120, 2250, 2121,
     2122, 2249, 2248, 2246, 2244, 2123, 2125, 2128, 2130, 2129,
     2133, 2135, 2137, 2140, 2141, 2211, 2224, 2144, 2241, 2145,
     2240, 2143, 2148, 2150, 2159, 2160, 2179, 2183, 2152, 2161,
     2175, 2166, 2155, 2239, 2237,    0, 2214, 2180, 2234, 2182,
     2233, 2186, 2188, 2189, 2191, 2193, 2230, 2222, 2153, 2196,
     1270, 2190, 1265, 1060, 1024, 2198, 2194, 2199, 2201, 2200,

     2204,  805, 2206,    0, 2195, 2214, 2208, 2219, 2220, 2223,
      801, 2224,  611, 2236, 2238,  608,  564,  450,  399,  309,
      305,  226, 2509,  147, 2284, 2287, 2290
    } ;

static yyconst flex_int16_t yy_def[1228] =
    {   0,
     1223,    1, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223,
     1223, 1223, 1223, 1224, 1223, 1224, 1224, 1224, 1224,   19,
     1223, 1223, 1223, 1223, 1223, 1223,   26, 1223, 1223, 1223,
       27,   26,   26,   26,   26,   26,   26,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27, 1223, 1223, 1223, 1223, 1223, 1223, 1225, 1225,
     1224, 1223, 1226,   19,   19,   65, 1223, 1223,   26, 1223,
       27,   26,   27,   27,   26,   73,   73,   27,   27,   27,
       26,   27,   27,   27,   27,   27,   26,   26,   27,   27,
       27,   26,   27,   27,   26,   73,   73,   27,   27,   27,

       27,   26,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
     1223, 1223, 1227, 1223, 1226,   66, 1224,   26,   27,   26,
       73,   27,   27,   26,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   26,   27,

     1224,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27, 1224,   27,   27,   27,   27,   27,   27,   27,   27,
       27, 1224,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27, 1225, 1224,   27, 1224,   27, 1224, 1224,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,

       27,   27,   27,   27,   27,   27, 1224,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27, 1224,
     1224, 1224, 1224,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27, 1224,   27,   27,   27,   27,   27,   27,
     1224,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27, 1224, 1224, 1224, 1224,   27,   27,
       27,   27,   27,   27, 1224, 1224, 1224,   27,   27,   27,
       27,   27,   27, 1224,   27, 1224,   27,   27,   27,   27,

       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27, 1224, 1224, 1224, 1224,   27, 1224, 1224, 1224, 1224,
       27, 1224, 1224, 1224, 1224, 1224, 1224,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27, 1224,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27, 1224, 1224,   27,
       27, 1224,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,

       27,   27,   27,   27, 1224, 1224, 1224,   27,   27,   27,
       27,   27, 1224, 1224, 1224,   27,   27,   27,   27, 1224,
     1224, 1224,   27, 1224,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
     1224,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27, 1224,   27,   27,   27,   27,   27,
       27,   27,   27, 1224,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,

       27,   27, 1224, 1224,   27,   27, 1224, 1224,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27, 1224,
       27,   27,   27,   27,   27, 1224, 1224, 1224,   27,   27,
       27,   27, 1224, 1224, 1224,   27, 1224,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27, 1224,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27, 1224,   27,

       27,   27,   27,   27,   27,   27,   27,   27,   27, 1224,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27, 1224, 1224,   27,   27, 1224, 1224,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27, 1224,   27,   27,   27,
       27,   27, 1224, 1224, 1224,   27,   27,   27, 1224, 1224,
     1224,   27, 1224,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27, 1224,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,

       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27, 1224, 1224,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27, 1224,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27, 1224,   27,   27,   27, 1224,   27, 1224, 1224,
     1224,   27, 1224,   27,   27,   27,   27,   27,   27,   27,
     1224,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,

       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27, 1224,
     1224,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27, 1224,   27,   27,   27, 1224,   27, 1224, 1224,
       27, 1224,   27,   27,   27,   27,   27,   27, 1224,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,

       27,   27,   27,   27,   27,   27,   27, 1224, 1224,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27, 1224,   27, 1224, 1224,   27,   27,
       27,   27,   27,   27, 1224,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27, 1224,   27, 1224, 1224,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,

       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27, 1224, 1224,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27, 1224, 1224,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27, 1224, 1224,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27, 1224,   27,   27,   27,   27,   27,   27,

       27,   27,   27, 1224,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,    0, 1223, 1223, 1223, 1223
    } ;

static yyconst flex_int16_t yy_nxt[2580] =
    {   0,
        4,    5,    6,    7,    5,    4,    8,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   21,   22,   23,
       24,   25,   26,   27,   27,   28,   17,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   27,   38,   39,   40,
       41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
       51,   27,   27,   52,   27,   27,   53,   54,   55,   56,
       57,   62,   61,   57,   59,   59,   63,   59,   59,   59,
       59,  113,   59,  153,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,  114,  154,  390,

      391,   61,   60,   60,   60,  155,   59, 1223,   59,   59,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   87, 1223,   88,   61,
       89,   65,  107,   66,   90,   61,  108,   91,  109,   65,
       65,   65,   65,   65,   65,   92,  122,  110,  111,   93,
       57, 1223, 1223,   57, 1223, 1223,   94,  173,  161, 1223,
      123,  167,   66,   61,   61,   61,   61,   61,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   70,  162,

      177,  167,  179,   69,   71,   71,  178,   61,  190,  659,
       71,   69,   69,   69,   69,   69,   69,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71, 1223,  168,   72,
      628,   73,   71, 1223, 1223, 1223, 1223, 1223, 1223,  124,
       71,   71,   71,   71,   71,   71,   74,   75,  188,  125,
       76,   77,  126,   81,  172,   78,  127,  102,   79,   82,
       83, 1223,  208,   84,  184,  103,   85,   80,   95,  104,
       96,  169, 1223,   97, 1223,  105,   86,  106,  128,   98,

      129,   99,  116,  117,  118,  138,  130,  100,  185,  131,
      132,  101,  119,  133,  120,  134,  135,  156,  136,  157,
      121, 1223,  186,  139,  158,   69, 1223,  140, 1223,  219,
     1223,   69, 1223, 1223,  159, 1223, 1223, 1223,  176,   69,
      180,  141,  142,  143,  144,   69,  145,  146,  196,  174,
      147, 1223,  189,  187,  148,  149, 1223,  204,  150,  181,
      198,  151,  152,  163,  163,  164,  163,  163,  163,  163,
      163,  163,  163,  163,  163,  182,  163, 1223,  175,  191,
     1223,  192,  183, 1223,  201, 1223, 1223, 1223, 1223,   69,
      163,  163,  163,  163,  163,   69,  197, 1223,  163, 1223,

      163,  163,   69,  203,  193, 1223, 1223, 1223,   69,  209,
      207,  194, 1223,  199,  195,  202,  629,  223,  214,  210,
      212,  213, 1223, 1223, 1223,  211, 1223,  205, 1223,  163,
      163,  163,  163,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,  200,  206, 1223, 1223, 1223,  224, 1223,
       61,  220, 1223, 1223,  225, 1223, 1223, 1223,  215, 1223,
      218,  216,  221,  255,  222, 1223, 1223,  217,  227, 1223,
      226, 1223, 1223,  241,  234, 1223, 1223, 1223, 1223,   61,
      166,  166,  166,  166,  166,  166,  166,  166,  166,  166,
      228,  235,  246,  236,  280,  166,  229,  230,  237,  238,

     1223,  242,  247,  166,  166,  166,  166,  166,  166,   69,
       69,  170,   69,   69,   69,   69,   69,  171,   69, 1223,
     1223,  239, 1223, 1223,   69, 1223, 1223, 1223, 1223, 1223,
      240, 1223,   69,   69,   69,   69,   69,   69,  231,  252,
     1223,  243, 1223,  245,  253,  248,  250,  249, 1223, 1223,
     1223,  232, 1223,  258, 1223,  233,  276,  251,  256,  244,
     1223,  257,  259,  260,  254,  265, 1223,  262, 1223,  261,
      263,  264,  273,  266, 1223, 1223, 1223,  271,  272,  268,
     1223,  270, 1223, 1223, 1223, 1223,  284,  274, 1223, 1223,
      289, 1223, 1223,  267, 1223, 1223,  269, 1223, 1223,  281,

      275,  279,  282, 1223,  277, 1223,  284,  297,  295,  278,
      292,  294,  283,  163,  163,  164,  163,  163,  163,  163,
      163,  163,  163,  163,  163,  290,  163,  291,  293, 1223,
       69, 1223,  285,  287,  310, 1223,   69,  305, 1223, 1223,
      163,  163,  163,  163,  163, 1223, 1223, 1223,  163,  296,
      163,  163,  302, 1223,  304, 1223,  307,  286,  288, 1223,
      298,  299, 1223, 1223, 1223,  303,  300, 1223,  306, 1223,
      301, 1223, 1223, 1223,  308, 1223,  312, 1223, 1223,  163,
      163,  163,  163, 1223,  311, 1223, 1223, 1223,  316,  315,
     1223, 1223,  314,  309, 1223, 1223,  313, 1223, 1223,  317,

      320,  321,  322,  323,  325, 1223,  328,  326,  318,  319,
      330,  327,  329,  324,  332, 1223, 1223, 1223, 1223, 1223,
      331,  336, 1223,  337, 1223, 1223, 1223, 1223, 1223, 1223,
      344,  334,  333,  345,  340, 1223,  335,  338, 1223,  343,
      341, 1223,  351, 1223,  346, 1223,  348, 1223,  342, 1223,
      339,  349, 1223, 1223, 1223, 1223, 1223, 1223, 1223,  356,
      347, 1223, 1223, 1223, 1223,  363,  354, 1223,  357,  359,
      358,  350,  352,  360,  362,  366,  355,  364,  371, 1223,
      365,  367,  370,  379, 1223,  368,  353, 1223,  361,  378,
      369,  375,  376, 1223, 1223, 1223,  372, 1223,  380,  386,

      374, 1223, 1223,  387,  373, 1223,  394, 1223,  384, 1223,
      381,  396, 1223, 1223,  382, 1223, 1223, 1223, 1223, 1223,
     1223, 1223, 1223, 1223, 1223,  377, 1223, 1223, 1223,  383,
      400,  393, 1223,  388,  389,  395,  397,  392,  401,  404,
      407,  405,  398,  402,  408,  403,  406, 1223,  410, 1223,
      412,  413,  414,  415, 1223,  399,  428,  416,  421,  409,
     1223,  411,  417,  418,  419,  420,  422,  423,  424,  425,
      426,  427, 1223, 1223,  429, 1223, 1223,  430, 1223, 1223,
     1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223,  433,  431,
      434, 1223, 1223,  435, 1223, 1223, 1223,  445,  436,  432,

      437,  441,  442,  439,  443,  444,  446, 1223,  456,  447,
      440,  438,  449, 1223,  451,  454, 1223, 1223,  452,  448,
      457, 1223,  455, 1223, 1223, 1223, 1223, 1223, 1223,  453,
      459, 1223, 1223,  460, 1223, 1223, 1223, 1223,  466, 1223,
     1223, 1223, 1223,  479, 1223,  468, 1223,  469,  473, 1223,
      458,  464,  463,  462,  471,  465, 1223, 1223,  461,  467,
     1223,  470,  477,  475, 1223,  480,  483, 1223,  472,  474,
      484, 1223,  476, 1223, 1223, 1223, 1223,  485,  481, 1223,
     1223, 1223, 1223, 1223, 1223,  506,  507,  486, 1223,  492,
     1223, 1223, 1223, 1223,  487,  490, 1223, 1223, 1223,  489,

      491,  488,  495,  496,  498,  497, 1223,  499,  500,  502,
     1223,  494, 1223,  509,  493,  503,  504, 1223,  520,  521,
      501,  511, 1223, 1223,  508, 1223,  510,  512, 1223, 1223,
     1223,  516, 1223, 1223,  519,  522,  517,  523, 1223, 1223,
     1223, 1223, 1223,  525,  518,  541, 1223, 1223, 1223,  527,
      528, 1223, 1223,  526,  530,  533,  534,  535, 1223,  532,
     1223,  539,  529,  540,  531, 1223,  536,  550, 1223, 1223,
      542,  544,  537,  538, 1223,  545,  547,  553,  546,  548,
     1223,  543, 1223, 1223, 1223,  552, 1223,  549, 1223, 1223,
     1223, 1223,  557, 1223, 1223,  558,  551, 1223,  560, 1223,

     1223, 1223, 1223, 1223, 1223, 1223, 1204,  554,  555, 1223,
     1223,  556,  562, 1223,  564, 1223,  559,  569,  570,  566,
      561,  573,  577,  567,  571,  568, 1223,  563,  565, 1223,
      572,  574,  576, 1223,  584,  579, 1223, 1223,  578, 1223,
     1223,  586,  588, 1223, 1223, 1223,  580, 1223,  582,  583,
      581,  585,  590, 1223, 1223, 1223, 1223, 1223, 1223,  589,
      591, 1223, 1223, 1223, 1223,  592,  587,  595, 1223, 1223,
      594, 1223,  597,  599,  607,  608, 1223, 1223,  600, 1223,
      602, 1223,  605,  593,  609, 1223,  596, 1223, 1223,  598,
     1223,  606, 1223, 1223,  601,  610,  612, 1223, 1223, 1223,

     1223, 1223,  618,  613, 1223, 1223, 1223, 1223,  611,  616,
      619, 1223,  622,  614, 1223, 1223,  620,  615,  621,  617,
      631, 1223,  623,  627, 1223,  624,  625, 1223,  626, 1223,
      632,  634, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223,
      633,  640,  635,  642,  641, 1223, 1223, 1223,  639,  648,
     1223,  649, 1223, 1223,  654,  651, 1223,  655,  656,  650,
     1223,  652,  657, 1223,  667,  666,  661,  646,  668,  669,
     1223,  653,  660, 1223,  658, 1223, 1223,  664, 1223,  663,
      671, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223,
      665, 1223, 1223, 1223, 1223, 1223, 1223, 1223,  676, 1223,

      673,  674, 1223, 1223,  680,  686,  677, 1223,  681,  675,
      670,  687,  672,  682,  678,  685, 1223,  683, 1223,  688,
     1223,  679, 1223,  693,  684, 1223, 1223, 1223,  689, 1223,
     1223,  691, 1223,  701,  690,  700,  692, 1223,  695,  694,
      696,  697,  698, 1223, 1223,  702,  708, 1223, 1223, 1223,
      705, 1223,  703, 1223, 1223,  706,  704, 1223, 1223, 1223,
     1223, 1223, 1223,  711, 1223, 1223, 1223,  709,  712, 1223,
      707,  717,  713,  723,  718,  719,  725,  726,  721,  714,
      716, 1223,  715,  720,  722, 1223,  728,  729, 1223, 1223,
     1223, 1223,  724,  730, 1223, 1223,  727, 1223,  733, 1223,

     1223, 1223,  731, 1223, 1223,  732, 1223, 1223,  742,  743,
     1223, 1223, 1223, 1223,  746, 1223,  736, 1223, 1223, 1223,
      744,  737, 1223,  749,  740,  747,  745,  748,  752,  755,
     1223,  741,  756,  750,  759, 1223, 1223,  754, 1223,  753,
     1223, 1223,  751,  758, 1223, 1223, 1223,  760,  761, 1223,
     1223, 1223, 1223, 1223,  762, 1223, 1223, 1223, 1223, 1223,
     1223,  766,  772,  775, 1223, 1223,  777,  768,  767,  774,
      776, 1223, 1223, 1223, 1223,  786,  788,  789,  778, 1223,
     1223,  779,  780,  781,  783,  790,  794,  782,  784, 1223,
     1223, 1223, 1223, 1223,  795, 1223,  787,  791,  792, 1223,

     1223,  796,  793, 1223, 1223, 1223, 1223,  802,  797,  800,
      801, 1223, 1223, 1223,  798, 1223, 1223, 1223, 1223, 1223,
     1223,  799,  803,  804,  805,  806,  807, 1223, 1223, 1223,
     1223, 1223,  809,  813,  812, 1223, 1223, 1223,  808,  810,
      815,  818,  825,  816,  826, 1223,  811,  821,  814,  822,
      824, 1223, 1223,  817,  819, 1223,  823, 1223, 1223,  827,
     1223,  820, 1223, 1223, 1223, 1223, 1223, 1223,  829,  830,
     1223, 1223, 1223, 1223, 1223,  828, 1223, 1223,  832,  835,
      839,  836, 1223, 1223, 1223, 1223,  831,  834,  837,  844,
      833,  838,  840,  841, 1223, 1223, 1223,  842,  843,  846,

     1223, 1223,  845,  848, 1223, 1223,  852, 1223,  851,  849,
     1223,  855,  850,  857, 1223, 1223, 1223,  859,  853, 1223,
     1223,  854,  858, 1223,  860,  856, 1223,  865, 1223, 1223,
      862, 1223, 1223, 1223, 1223,  861,  872,  866,  864,  875,
      874, 1223, 1223, 1223, 1223,  876,  868,  880,  877,  878,
     1223, 1223, 1223,  890, 1223,  879, 1223, 1223, 1223,  884,
     1223, 1223, 1223, 1223, 1223,  889, 1223, 1223,  885,  893,
      882,  892,  883, 1223,  886, 1223,  887,  891, 1223,  897,
     1223,  894, 1223,  898,  899,  896, 1223, 1223,  888, 1223,
      900, 1223, 1223, 1223, 1223,  905, 1223,  895,  901, 1223,

     1223, 1223,  903, 1223,  906, 1223,  908, 1223,  907,  902,
      909, 1223,  911,  904,  914, 1223, 1223,  917,  910, 1223,
      913,  915, 1223, 1223,  912,  916, 1223, 1223,  918, 1223,
      922,  919, 1223, 1223, 1223,  925, 1223, 1223, 1223,  924,
      926,  929, 1223, 1223, 1223,  932, 1223, 1223,  923,  927,
      931, 1223,  928, 1223, 1223,  934, 1223, 1223, 1223,  937,
      941,  939, 1223,  935,  930, 1223, 1223,  933,  936,  938,
      942,  948,  943,  944, 1223,  945, 1223,  946,  940,  947,
      949, 1223,  950, 1223, 1223, 1223, 1223, 1223, 1223, 1223,
     1223,  951, 1223, 1223, 1223, 1223, 1223, 1223,  954, 1223,

      956, 1223,  963, 1223, 1223, 1223,  981,  955,  965,  966,
      984,  952,  967,  968,  979, 1223,  983,  958,  961,  978,
      964,  970,  971,  972,  973,  974,  975,  976,  977,  980,
      982, 1223, 1223, 1223, 1223, 1223, 1223, 1223,  990, 1223,
     1223,  989,  991, 1223,  985,  986,  987,  988, 1223, 1223,
     1223, 1223, 1223,  992, 1223, 1223, 1223, 1223,  996, 1223,
     1223,  995, 1223, 1223, 1223,  994,  999,  993, 1001, 1004,
     1000, 1002, 1223, 1007, 1006, 1010, 1011, 1223,  997,  998,
     1223, 1003, 1223, 1005, 1012, 1223, 1223, 1223, 1223, 1013,
     1223, 1223, 1014, 1223, 1016, 1223, 1223, 1223, 1223, 1223,

     1223, 1223, 1223, 1223, 1223, 1223, 1015, 1017, 1018, 1019,
     1223, 1022, 1023, 1025, 1028, 1029, 1021, 1020, 1024, 1223,
     1223, 1032, 1030, 1223, 1039, 1223, 1026, 1027, 1223, 1223,
     1223, 1223, 1034, 1223, 1223, 1033, 1031, 1036, 1041, 1223,
     1223, 1223, 1223, 1223, 1223, 1223, 1042, 1046, 1223, 1043,
     1044, 1048, 1223, 1223, 1223, 1040, 1055, 1223, 1223, 1056,
     1223, 1047, 1058, 1051, 1052, 1049, 1050, 1054, 1223, 1053,
     1223, 1057, 1223, 1223, 1223, 1223, 1223, 1063, 1223, 1223,
     1223, 1060, 1223, 1062, 1059, 1061, 1070, 1223, 1223, 1223,
     1223, 1223, 1064, 1076, 1223, 1066, 1067, 1065, 1069, 1068,

     1071, 1073, 1223, 1072, 1074, 1223, 1223, 1223, 1223, 1075,
     1223, 1077, 1078, 1088, 1089, 1223, 1223, 1223, 1223, 1223,
     1223, 1079, 1223, 1084, 1223, 1223, 1080, 1087, 1223, 1223,
     1223, 1223, 1082, 1223, 1081, 1085, 1094, 1083, 1223, 1096,
     1090, 1098, 1091, 1092, 1093, 1099, 1095, 1101, 1097, 1103,
     1223, 1223, 1102, 1223, 1223, 1223, 1223, 1223, 1223, 1100,
     1223, 1117, 1223, 1105, 1223, 1110, 1223, 1116, 1104, 1223,
     1106, 1223, 1107, 1108, 1109, 1111, 1112, 1115, 1223, 1223,
     1223, 1113, 1223, 1118, 1121, 1114, 1223, 1223, 1223, 1223,
     1223, 1223, 1223, 1124, 1223, 1223, 1223, 1223, 1119, 1127,

     1131, 1223, 1223, 1223, 1223, 1223, 1120, 1223, 1223, 1133,
     1223, 1223, 1128, 1122, 1129, 1130, 1123, 1132, 1138, 1223,
     1137, 1139, 1140, 1141, 1223, 1223, 1142, 1223, 1223, 1134,
     1223, 1135, 1136, 1223, 1143, 1146, 1148, 1223, 1151, 1144,
     1147, 1145, 1150, 1223, 1223, 1155, 1223, 1223, 1223, 1223,
     1223, 1158, 1223, 1152, 1153, 1223, 1223, 1223, 1149, 1162,
     1223, 1154, 1223, 1161, 1223, 1160, 1164, 1223, 1223, 1159,
     1223, 1223, 1223, 1165, 1169, 1223, 1163, 1223, 1167, 1223,
     1223, 1173, 1223, 1170, 1174, 1180, 1223, 1223, 1223, 1166,
     1171, 1179, 1168, 1223, 1172, 1178, 1185, 1186, 1183, 1184,

     1187, 1188, 1223, 1189, 1190, 1175, 1223, 1223, 1181, 1223,
     1223, 1182, 1193, 1223, 1192, 1223, 1223, 1223, 1223, 1191,
     1223, 1223, 1223, 1223, 1195, 1223, 1223, 1223, 1223, 1196,
     1200, 1223, 1201, 1223, 1197, 1223, 1206, 1212, 1198, 1199,
     1202, 1223, 1205, 1207, 1203, 1208, 1223, 1223, 1209, 1223,
     1223, 1223, 1210, 1219, 1220, 1221, 1222, 1223, 1213, 1211,
     1223, 1223, 1194, 1223, 1223, 1223, 1223, 1223, 1223, 1177,
     1176, 1223, 1214, 1223, 1218, 1223, 1223, 1223, 1223, 1223,
     1223, 1216, 1223, 1215, 1217,   59,   59,  165,  165,  165,
      163,  163,  163, 1223, 1223, 1223, 1157, 1156, 1223, 1223,

     1223, 1223, 1223, 1223, 1223, 1126, 1125, 1223, 1223, 1223,
     1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223,
     1223, 1086, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223,
     1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223,
     1223, 1223, 1223, 1223, 1223, 1223, 1045, 1223, 1038, 1037,
     1223, 1223, 1223, 1035, 1223, 1223, 1223, 1223, 1223, 1223,
     1009, 1008, 1223, 1223, 1223, 1223, 1223, 1223, 1223,  969,
     1223,  962,  960,  959,  957,  953, 1223, 1223, 1223, 1223,
      921,  920, 1223,  881, 1223, 1223, 1223, 1223,  873,  871,
      870,  869, 1223, 1223,  867, 1223, 1223,  863, 1223, 1223,

     1223, 1223, 1223,  847, 1223, 1223, 1223, 1223, 1223, 1223,
     1223, 1223, 1223, 1223,  785, 1223, 1223, 1223,  773,  771,
      770,  769, 1223,  765,  764,  763,  757, 1223, 1223, 1223,
     1223,  739,  738,  735,  734,  710,  699, 1223,  662, 1223,
     1223,  647,  645,  644,  643,  638,  637,  636,  630, 1223,
      604,  603, 1223,  575, 1223,  524, 1223, 1223,  515,  514,
      513, 1223,  505, 1223, 1223, 1223,  482, 1223, 1223, 1223,
      478, 1223, 1223, 1223, 1223, 1223,  450, 1223, 1223, 1223,
      385, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223,
     1223, 1223, 1223, 1223,  164, 1223, 1223,  161,   58,  160,

      137,  115,  112, 1223,   68,   67,   58, 1223,    3, 1223,
     1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223,
     1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223,
     1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223,
     1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223,
     1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223,
     1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223,
     1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223
    } ;

static yyconst flex_int16_t yy_chk[2580] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        5,   18,   20,    5,    8,    8,   18,    8,    8,    8,
        8,   41,    8,   50,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,   41,   50,  266,

      266,   20,    8,    8,    8,   50,    8,  266,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   34,   75,   34, 1224,
       34,   19,   38,   19,   34,   64,   38,   34,   39,   19,
       19,   19,   19,   19,   19,   35,   44,   39,   39,   35,
       57,  537,   81,   57,   80,   90,   35,   75,   60,   79,
       44,   70,   19,   26,   64,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   60,

       79,   70,   81,   26,   26,   26,   80,   26,   90,  537,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   88,   72,   32,
      503,   32,   27, 1222,   74,   72,  503,   84,  103,   45,
       27,   27,   27,   27,   27,   27,   32,   32,   88,   45,
       32,   32,   45,   33,   74,   32,   45,   37,   32,   33,
       33,   85,  103,   33,   84,   37,   33,   32,   36,   37,
       36,   72,  113,   36,   86,   37,   33,   37,   46,   36,

       46,   36,   43,   43,   43,   48,   46,   36,   85,   46,
       46,   36,   43,   46,   43,   46,   46,   51,   46,   51,
       43,   78,   86,   48,   51,   76,   87,   48,   82,  113,
       95,   76, 1221,   93,   51,   89, 1220,  100,   78,   77,
       82,   48,   49,   49,   49,   77,   49,   49,   93,   76,
       49,   91,   89,   87,   49,   49,   83,  100,   49,   82,
       95,   49,   49,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   83,   63,  104,   77,   91,
       92,   91,   83,   94,   98,  102,  116,  108,   99,   96,
       63,   63,   63,   63,   63,   96,   94,   98,   63,  106,

       63,   63,   97,   99,   92,  105,  109,  107,   97,  104,
      102,   92,  101,   96,   92,   98,  504,  116,  109,  105,
      107,  108,  118,  114,  504,  106, 1219,  101,  139,   63,
       63,   63,   63,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   97,  101,  110,  111,  112,  117,  115,
       65,  114,  120,  117,  118,  119,  124,  130,  110,  125,
      112,  111,  115,  139,  115,  126,  121,  111,  120,  128,
      119,  122,  127,  130,  124,  134,  131, 1218,  158,   65,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
      121,  125,  134,  126,  158,   66,  122,  122,  127,  128,

      129,  131,  134,   66,   66,   66,   66,   66,   66,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
      133,  129,  135,  154,   73,  123,  132,  140,  136,  137,
      129,  143,   73,   73,   73,   73,   73,   73,  123,  138,
      141,  132,  142,  133,  138,  135,  136,  135,  144,  151,
      146,  123,  138,  141,  150,  123,  154,  137,  140,  132,
      147,  140,  142,  143,  138,  146,  148,  145,  149,  144,
      145,  145,  151,  147,  152,  153,  155,  150,  150,  148,
      145,  149,  156,  157,  160,  159,  162,  152,  175,  177,
      170, 1217,  172,  147,  179,  173,  148,  191,  174,  159,

      153,  157,  159,  170,  155,  185,  162,  179,  177,  156,
      173,  175,  160,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  171,  165,  172,  174,  178,
      171,  181,  168,  169,  191, 1216,  171,  185, 1213,  184,
      165,  165,  165,  165,  165,  168,  169,  180,  165,  178,
      165,  165,  181,  182,  184,  186,  188,  168,  169,  189,
      180,  180,  190,  193,  194,  182,  180,  192,  186,  188,
      180,  195,  196,  197,  189,  198,  193,  199,  200,  165,
      165,  165,  165,  203,  192,  207,  210,  204,  197,  196,
      205,  217,  195,  190,  206,  208,  194,  216,  212,  198,

      201,  201,  201,  201,  204,  211,  207,  205,  199,  200,
      210,  206,  208,  203,  212,  213,  214,  215,  218,  219,
      211,  216,  220,  217,  221,  222,  225,  227,  228,  229,
      226,  214,  213,  226,  220,  230,  215,  218,  231,  225,
      221,  233,  232,  226,  227,  234,  229,  235,  222,  236,
      219,  230,  237,  240,  246,  232,  238,  239,  247,  235,
      228,  243,  244,  245,  248,  240,  233,  254,  235,  237,
      236,  231,  232,  238,  239,  245,  234,  243,  250,  251,
      244,  245,  248,  254,  250,  246,  232,  257,  238,  253,
      247,  252,  252,  256,  259,  260,  250,  268,  254,  263,

      251,  265,  253,  264,  250,  267,  269,  270,  260,  272,
      256,  271,  263,  274,  257,  276,  264,  278,  282,  269,
      273,  286,  288,  277,  271,  252,  291,  275, 1211,  259,
      272,  268, 1202,  265,  265,  270,  271,  267,  273,  275,
      277,  275,  271,  274,  278,  274,  276,  279,  282,  283,
      285,  285,  285,  285,  292,  271,  291,  286,  288,  279,
      293,  283,  287,  287,  287,  287,  289,  289,  290,  290,
      290,  290,  294,  295,  292,  297,  296,  293,  298,  299,
      300,  306,  304,  302,  301,  305,  309,  303,  296,  294,
      296,  308,  312,  296,  313,  316,  315,  305,  296,  295,

      297,  301,  302,  299,  303,  304,  305,  314,  315,  305,
      300,  298,  306,  317,  308,  313,  319,  318,  309,  305,
      316,  324,  314,  325,  326,  327,  330,  331,  332,  312,
      318,  328,  333,  319,  334,  336,  338,  335,  330,  339,
      340,  342,  343,  345,  347,  332,  350,  333,  338,  353,
      317,  327,  326,  325,  335,  328,  345,  354,  324,  331,
      355,  334,  343,  340,  356,  347,  353,  357,  336,  339,
      354,  359,  342,  360,  361,  363,  364,  355,  350,  365,
      366,  367,  368,  370,  371,  378,  378,  356,  369,  364,
      372,  379,  380,  373,  357,  361,  381,  383,  382,  360,

      363,  359,  367,  368,  370,  369,  389,  371,  372,  373,
      388,  366,  392,  380,  365,  374,  374,  393,  394,  394,
      372,  382,  397,  374,  379,  395,  381,  383,  398,  399,
      400,  388,  402,  401,  393,  394,  389,  395,  403,  405,
      406,  408,  404,  397,  392,  410,  411,  409,  431,  398,
      399, 1195,  432,  397,  401,  404,  404,  404,  410,  403,
      428,  409,  400,  409,  402,  430,  405,  429,  434,  435,
      410,  411,  406,  408,  429,  416,  421,  432,  416,  421,
      433,  410,  416,  421,  436,  431,  437,  428,  438,  439,
      440,  441,  434,  442,  444,  435,  430,  443,  437,  446,

      449,  451,  445,  447,  448,  452, 1194,  433,  433,  454,
      463,  433,  439,  461,  441,  465,  436,  445,  445,  442,
      438,  448,  452,  443,  446,  444,  453,  440,  441,  455,
      447,  449,  451,  456,  459,  454,  457,  458,  453,  460,
      462,  461,  463,  464,  467,  466,  455,  459,  457,  458,
      456,  460,  465,  468,  470,  471,  472,  473,  474,  464,
      466,  475,  476,  477,  481,  467,  462,  471,  480,  483,
      470,  484,  472,  474,  482,  482,  485,  487,  475,  486,
      477,  489,  480,  468,  483,  490,  471,  492,  491,  473,
      493,  481,  495,  494,  476,  484,  486,  497,  498,  496,

      499,  501,  493,  487,  509,  500,  510,  508,  485,  491,
      494,  502,  497,  489,  511,  512,  495,  490,  496,  492,
      508,  516,  498,  502,  517,  499,  500,  518,  501,  519,
      509,  511,  523,  525,  526,  527,  528,  530,  531,  532,
      510,  517,  512,  519,  518,  533,  534,  536,  516,  525,
      535,  526,  539,  540,  532,  528,  542,  533,  534,  527,
      543,  530,  535,  544,  546,  545,  540,  523,  547,  548,
      546,  531,  539,  545,  536,  548,  547,  543,  549,  542,
      550,  551,  552,  554,  553,  555,  556,  557,  550,  558,
      544,  559, 1193,  562,  560,  561,  569, 1191,  555,  563,

      552,  553,  576,  577,  559,  562,  556,  564,  560,  554,
      549,  563,  551,  560,  557,  561,  565,  560,  566,  564,
      567,  558,  570,  569,  560,  571,  573,  572,  565,  582,
      574,  566,  578,  577,  565,  576,  567,  579,  571,  570,
      572,  573,  574,  580,  581,  578,  582,  583,  586,  585,
      579,  591,  578,  588,  587,  580,  578,  592,  589,  594,
      590,  593,  595,  585,  596,  600,  598,  583,  585,  597,
      581,  587,  585,  593,  588,  589,  594,  595,  591,  585,
      586,  599,  585,  590,  592,  602,  597,  598,  601,  605,
      606,  609,  593,  599,  612,  613,  596,  614,  602,  615,

      616,  617,  600,  619,  618,  601,  620,  621,  613,  614,
      622,  623,  624,  625,  617,  632,  605,  626,  627,  631,
      615,  606,  635,  620,  609,  618,  616,  619,  623,  626,
      633,  612,  627,  621,  632,  639,  634,  625,  641,  624,
      642,  646,  622,  631,  651,  649,  650,  633,  634,  652,
      653,  655,  656,  657,  635,  658,  661,  659,  663,  664,
      665,  639,  646,  650,  673,  671,  652,  642,  641,  649,
      651,  674,  676,  677,  675,  663,  665,  671,  653,  678,
      679,  655,  656,  657,  659,  673,  677,  658,  661,  680,
      681,  682,  683,  684,  678,  685,  664,  674,  675,  686,

      687,  679,  676,  688,  689,  690,  691,  685,  680,  683,
      684,  692,  694,  693,  681,  695,  697,  696,  700,  698,
      702,  682,  686,  687,  688,  689,  690,  704,  703,  705,
      708,  706,  692,  696,  695,  711,  707,  709,  691,  693,
      698,  703,  710,  700,  710,  712,  694,  706,  697,  707,
      709,  713,  714,  702,  704,  715,  708,  716,  717,  711,
      718,  705,  721,  719,  720,  722,  726,  723,  713,  714,
      727,  724,  730,  729,  732,  712,  736,  737,  716,  719,
      723,  720,  740,  733,  742,  743,  715,  718,  721,  730,
      717,  722,  724,  726,  744,  745,  748,  727,  729,  733,

      747,  753,  732,  736,  755,  751,  743,  754,  742,  737,
      756,  745,  740,  748,  759,  760,  761,  753,  743,  768,
      772,  744,  751,  774,  754,  747,  776,  760,  779,  783,
      756,  780,  781,  786,  784,  755,  772,  761,  759,  776,
      774,  787,  788,  789,  791,  779,  768,  784,  780,  781,
      790,  792,  793,  794,  795,  783,  796,  797,  798,  788,
      799,  794,  800,  801,  805,  793,  802,  803,  789,  797,
      786,  796,  787,  804,  790,  806,  791,  795,  807,  801,
      808,  798,  809,  802,  803,  800,  810,  811,  792,  812,
      804,  814,  817,  813,  818,  809,  815,  799,  805,  821,

      820,  819,  807,  822,  810,  824,  812,  827,  811,  806,
      813,  828,  815,  808,  819,  823,  829,  822,  814,  830,
      818,  820,  832,  831,  817,  821,  834,  836,  823,  835,
      827,  824,  837,  838,  839,  830,  840,  841,  842,  829,
      831,  835,  843,  844,  846,  838,  848,  849,  828,  832,
      837,  854,  834,  850,  853,  840,  851,  852,  856,  843,
      849,  846,  855,  841,  836,  857,  858,  839,  842,  844,
      850,  856,  851,  852,  859,  853,  861,  854,  848,  855,
      857,  864,  858,  865,  866,  868,  872,  874,  875,  876,
      877,  859,  885,  878,  890,  893,  879,  886,  864,  891,

      866,  899,  874,  892,  889,  900,  890,  865,  876,  877,
      893,  861,  878,  879,  886,  898,  892,  868,  872,  885,
      875,  882,  882,  882,  882,  882,  882,  882,  882,  889,
      891,  882,  894,  895,  896,  897,  903,  904,  899,  905,
      906,  898,  900,  907,  894,  895,  896,  897,  909,  910,
      912,  911,  913,  903,  915,  914,  916,  919,  907,  917,
      918,  906,  926,  922,  923,  905,  911,  904,  913,  916,
      912,  914,  924,  919,  918,  922,  923,  925,  909,  910,
      927,  915,  928,  917,  924,  933,  929,  931,  932,  925,
      934,  937,  926,  935,  928,  936,  939,  941,  938,  945,

      947,  943,  948,  949,  961,  964,  927,  929,  931,  932,
      946,  935,  936,  938,  943,  945,  934,  933,  937,  952,
      955,  948,  946,  963,  961,  965,  939,  941,  966,  967,
      980,  978,  952,  983,  981,  949,  947,  955,  964,  984,
      985,  986,  993,  989,  988,  996,  965,  978,  987,  966,
      967,  981,  995,  998,  999,  963,  989, 1003, 1001,  993,
     1005,  980,  996,  985,  986,  983,  984,  988, 1006,  987,
     1007,  995, 1010, 1011, 1014, 1013, 1016, 1005, 1012, 1024,
     1021,  999, 1018, 1003,  998, 1001, 1014, 1017, 1019, 1020,
     1022, 1025, 1006, 1021, 1027, 1010, 1011, 1007, 1013, 1012,

     1016, 1018, 1028, 1017, 1019, 1030, 1032, 1034, 1036, 1020,
     1041, 1022, 1024, 1038, 1038, 1042, 1043, 1044, 1049, 1046,
     1048, 1025, 1050, 1032, 1051, 1053, 1027, 1036, 1052, 1076,
     1054, 1068, 1030, 1060, 1028, 1034, 1046, 1030, 1055, 1049,
     1041, 1051, 1042, 1043, 1044, 1052, 1048, 1054, 1050, 1060,
     1061, 1062, 1055, 1064, 1065, 1072, 1066, 1067, 1069, 1053,
     1071, 1076, 1070, 1062, 1077, 1068, 1078, 1072, 1061, 1079,
     1064, 1081, 1065, 1066, 1067, 1069, 1070, 1071, 1082, 1083,
     1087, 1070, 1090, 1077, 1081, 1070, 1091, 1095, 1092, 1093,
     1096, 1097, 1098, 1087, 1099, 1101, 1102, 1108, 1078, 1090,

     1095, 1103, 1109, 1104, 1111, 1117, 1079, 1105, 1107, 1097,
     1113, 1112, 1091, 1082, 1092, 1093, 1083, 1096, 1103, 1114,
     1102, 1104, 1105, 1105, 1115, 1120, 1107, 1116, 1122, 1098,
     1124, 1099, 1101, 1123, 1108, 1112, 1114, 1131, 1117, 1109,
     1113, 1111, 1116, 1132, 1133, 1124, 1137, 1138, 1140, 1141,
     1146, 1131, 1147, 1120, 1122, 1148, 1150, 1149, 1115, 1138,
     1151, 1123, 1152, 1137, 1153, 1133, 1141, 1154, 1155, 1132,
     1162, 1158, 1160, 1146, 1149, 1163, 1140, 1164, 1148, 1169,
     1189, 1153, 1173, 1150, 1154, 1162, 1165, 1166, 1170, 1147,
     1151, 1160, 1148, 1172, 1152, 1158, 1167, 1167, 1165, 1166,

     1168, 1168, 1171, 1169, 1170, 1155, 1167, 1178, 1163, 1180,
     1168, 1164, 1173, 1182, 1172, 1183, 1184, 1192, 1185, 1171,
     1186, 1197, 1205, 1190, 1178, 1196, 1198, 1200, 1199, 1180,
     1185, 1201, 1186, 1203, 1182, 1207, 1197, 1205, 1183, 1184,
     1190, 1206, 1196, 1198, 1192, 1199, 1208, 1209, 1200, 1188,
     1210, 1212, 1201, 1214, 1214, 1215, 1215, 1187, 1206, 1203,
     1181, 1179, 1177, 1214, 1175, 1215, 1174, 1161, 1159, 1157,
     1156, 1145, 1207, 1144, 1212, 1143, 1142, 1139, 1136, 1135,
     1134, 1209, 1130, 1208, 1210, 1225, 1225, 1226, 1226, 1226,
     1227, 1227, 1227, 1129, 1128, 1127, 1126, 1125, 1121, 1119,

     1118, 1110, 1106, 1100, 1094, 1089, 1088, 1085, 1084, 1080,
     1075, 1074, 1073, 1063, 1059, 1058, 1057, 1056, 1047, 1040,
     1039, 1035, 1033, 1031, 1029, 1026, 1023, 1015, 1004, 1002,
     1000,  997,  994,  992,  991,  990,  982,  979,  977,  976,
      975,  974,  973,  972,  971,  970,  969,  968,  960,  959,
      958,  956,  954,  953,  951,  950,  944,  942,  940,  930,
      921,  920,  908,  902,  901,  888,  887,  884,  883,  881,
      880,  873,  871,  870,  867,  863,  862,  860,  845,  833,
      826,  825,  816,  785,  782,  778,  777,  775,  773,  771,
      770,  769,  767,  766,  763,  762,  758,  757,  752,  750,

      749,  746,  741,  735,  731,  728,  725,  701,  672,  670,
      669,  668,  667,  666,  662,  660,  654,  648,  647,  645,
      644,  643,  640,  638,  637,  636,  630,  629,  628,  611,
      610,  608,  607,  604,  603,  584,  575,  568,  541,  538,
      529,  524,  522,  521,  520,  515,  514,  513,  505,  488,
      479,  478,  469,  450,  407,  396,  391,  390,  387,  386,
      385,  384,  377,  362,  358,  352,  351,  349,  348,  346,
      344,  341,  337,  329,  311,  310,  307,  284,  281,  280,
      262,  261,  258,  255,  249,  242,  241,  224,  223,  209,
      202,  187,  183,  176,  163,   71,   69,   59,   58,   52,

       47,   42,   40,   31,   25,   23,    6,    3, 1223, 1223,
     1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223,
     1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223,
     1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223,
     1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223,
     1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223,
     1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223,
     1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223
    } ;

static yyconst flex_int16_t yy_rule_linenum[270] =
    {   0,
       45,   46,   48,   49,   50,   51,   52,   53,   54,   55,
       56,   57,   58,   59,   60,   61,   62,   63,   64,   65,
       66,   67,   68,   69,   70,   71,   72,   73,   74,   75,
       77,   78,   79,   80,   81,   82,   83,   84,   85,   86,
       87,   88,   89,   90,   91,   92,   93,   94,   95,   96,
       97,   98,   99,  100,  101,  102,  103,  104,  105,  106,
      107,  108,  109,  110,  111,  112,  113,  114,  115,  117,
      118,  119,  120,  121,  122,  124,  126,  127,  128,  130,
      131,  132,  133,  134,  136,  137,  138,  139,  141,  142,
      143,  144,  145,  146,  147,  148,  150,  151,  152,  153,

      154,  155,  156,  157,  158,  159,  160,  161,  163,  164,
      165,  166,  167,  168,  169,  170,  171,  172,  173,  174,
      175,  176,  177,  178,  179,  180,  181,  182,  183,  184,
      185,  186,  187,  188,  189,  191,  192,  193,  194,  195,
      196,  197,  198,  199,  200,  201,  202,  203,  204,  205,
      206,  207,  208,  209,  210,  211,  212,  213,  215,  216,
      217,  218,  219,  220,  221,  222,  223,  224,  225,  226,
      227,  228,  229,  230,  231,  232,  233,  234,  235,  236,
      238,  239,  240,  241,  242,  243,  244,  245,  246,  247,
      248,  249,  250,  251,  252,  253,  254,  255,  256,  257,

      258,  259,  260,  261,  262,  264,  265,  266,  267,  268,
      270,  271,  272,  273,  274,  276,  277,  278,  280,  282,
      283,  284,  285,  286,  287,  288,  290,  292,  293,  294,
      295,  296,  297,  298,  300,  301,  302,  304,  305,  306,
      308,  309,  310,  311,  312,  313,  314,  315,  316,  317,
      318,  320,  321,  322,  323,  324,  325,  326,  327,  328,
      329,  330,  332,  333,  334,  336,  337,  338,  339
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "../s/bif.l"
/******************************************************************************
* Copyright 2015-2022 Xilinx, Inc.
* Copyright 2022-2023 Advanced Micro Devices, Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
******************************************************************************/
/* This is the lexer/flexer input file, that tokenizes the BIF file */
/* Run the bif.y file first through bison to generate the bif.tab.h file, which is included herein */
/* Then run this file through flex to generate the bif.yy.c source code */
#line 23 "../s/bif.l"
 #include <stdio.h>
 #include "bifscanner.h"
 #include "bif.tab.hpp"
 #include "authentication.h"
 #include "encryption.h"
 typedef BIF::BisonParser::token tok;
/* see http://www.lysator.liu.se/c/ANSI-C-grammar-l.html */
#line 36 "../s/bif.l"
     # define YY_USER_ACTION  yylloc->columns (yyleng);
#line 1523 "../bisonflex/bif.yy.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#include <unistd.h>
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */
/* %if-bison-bridge */
/* %endif */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */
/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define ECHO LexerOutput( yytext, yyleng )
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
\
/* %if-c++-only C++ definition \ */\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#define YY_FATAL_ERROR(msg) LexerError( msg )
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define YY_DECL int yyFlexLexer::yylex()
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
/* %% [7.0] user's declarations go here */
#line 39 "../s/bif.l"



   yylloc->step ();


#line 1687 "../bisonflex/bif.yy.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyin = & std::cin;
/* %endif */

		if ( ! yyout )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyout = & std::cout;
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1224 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1223 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				std::cerr << "--scanner backing up\n";
			else if ( yy_act < 270 )
				std::cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
				         "(\"" << yytext << "\")\n";
			else if ( yy_act == 270 )
				std::cerr << "--accepting default rule (\"" << yytext << "\")\n";
			else if ( yy_act == 271 )
				std::cerr << "--(end of buffer or a NUL)\n";
			else
				std::cerr << "--EOF (start condition " << YY_START << ")\n";
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 45 "../s/bif.l"
{ comment(); }
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 46 "../s/bif.l"
yylloc->lines (1); yylloc->step ();
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 48 "../s/bif.l"
return tok::BOOTLOADER;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 49 "../s/bif.l"
return tok::PRESIGN;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 50 "../s/bif.l"
return tok::UDF_DATA;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 51 "../s/bif.l"
return tok::XIP_MODE;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 52 "../s/bif.l"
return tok::BOOT;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 53 "../s/bif.l"
return tok::USER;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 54 "../s/bif.l"
return tok::STATIC;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 55 "../s/bif.l"
return tok::NOAUTOSTART;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 56 "../s/bif.l"
return tok::MULTIBOOT;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 57 "../s/bif.l"
return tok::PROTECTED;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 58 "../s/bif.l"
return tok::ALIGNMENT;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 59 "../s/bif.l"
return tok::EARLY_HANDOFF;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 60 "../s/bif.l"
return tok::DELAY_HANDOFF;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 61 "../s/bif.l"
return tok::DELAY_LOAD;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 62 "../s/bif.l"
return tok::DELAY_AUTH;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 63 "../s/bif.l"
return tok::HIVEC;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 64 "../s/bif.l"
return tok::BLOCKS;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 65 "../s/bif.l"
return tok::AUTHBLOCKS;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 66 "../s/bif.l"
return tok::BIGENDIAN;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 67 "../s/bif.l"
return tok::A32_MODE;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 68 "../s/bif.l"
return tok::PARTITION;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 69 "../s/bif.l"
return tok::IMAGE;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 70 "../s/bif.l"
return tok::METAHEADER;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 71 "../s/bif.l"
return tok::BIF_SECTION;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 72 "../s/bif.l"
return tok::LOCKSTEP;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 73 "../s/bif.l"
return tok::INCLUDE;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 74 "../s/bif.l"
return tok::TCM_BOOT;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 75 "../s/bif.l"
return tok::OPTIONAL_DATA;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 77 "../s/bif.l"
yylval->number = tok::OFFSET;                   return tok::OFFSET;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 78 "../s/bif.l"
yylval->number = tok::RESERVE_LEGACY;           return tok::RESERVE_LEGACY;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 79 "../s/bif.l"
yylval->number = tok::RESERVE;                  return tok::RESERVE;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 80 "../s/bif.l"
yylval->number = tok::LOAD;                     return tok::LOAD;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 81 "../s/bif.l"
yylval->number = tok::COPY;                     return tok::COPY;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 82 "../s/bif.l"
yylval->number = tok::STARTUP;                  return tok::STARTUP;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 83 "../s/bif.l"
yylval->number = tok::PARTITION_NUM;            return tok::PARTITION_NUM;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 84 "../s/bif.l"
yylval->number = tok::INIT;                     return tok::INIT;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 85 "../s/bif.l"
yylval->number = tok::UDF_BH;                   return tok::UDF_BH;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 86 "../s/bif.l"
yylval->number = tok::AES_KEY_FILE;             return tok::AES_KEY_FILE;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 87 "../s/bif.l"
yylval->number = tok::PPK_FILE;                 return tok::PPK_FILE;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 88 "../s/bif.l"
yylval->number = tok::PSK_FILE;                 return tok::PSK_FILE;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 89 "../s/bif.l"
yylval->number = tok::SPK_FILE;                 return tok::SPK_FILE;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 90 "../s/bif.l"
yylval->number = tok::SSK_FILE;                 return tok::SSK_FILE;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 91 "../s/bif.l"
yylval->number = tok::SPK_SIGNATURE_FILE;       return tok::SPK_SIGNATURE_FILE;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 92 "../s/bif.l"
yylval->number = tok::BH_SIGNATURE_FILE;        return tok::BH_SIGNATURE_FILE;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 93 "../s/bif.l"
yylval->number = tok::HEADER_SIGNATURE_FILE;    return tok::HEADER_SIGNATURE_FILE;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 94 "../s/bif.l"
yylval->number = tok::BOOTVECTORS;              return tok::BOOTVECTORS;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 95 "../s/bif.l"
yylval->number = tok::BOOTIMAGE;                return tok::BOOTIMAGE;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 96 "../s/bif.l"
yylval->number = tok::PARENT_ID;                return tok::PARENT_ID; 
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 97 "../s/bif.l"
yylval->number = tok::ID_CODE;                  return tok::ID_CODE;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 98 "../s/bif.l"
yylval->number = tok::EXT_ID_CODE;              return tok::EXT_ID_CODE;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 99 "../s/bif.l"
yylval->number = tok::ID;                       return tok::ID; 
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 100 "../s/bif.l"
yylval->number = tok::NAME;                     return tok::NAME; 
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 101 "../s/bif.l"
yylval->number = tok::PFILE;                    return tok::PFILE;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 102 "../s/bif.l"
yylval->number = tok::BH_KEY_FILE;              return tok::BH_KEY_FILE;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 103 "../s/bif.l"
yylval->number = tok::PUF_HELPER_FILE;          return tok::PUF_HELPER_FILE;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 104 "../s/bif.l"
yylval->number = tok::PMUFW_IMAGE;              return tok::PMUFW_IMAGE;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 105 "../s/bif.l"
yylval->number = tok::PMCDATA;                  return tok::PMCDATA;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 106 "../s/bif.l"
yylval->number = tok::BH_KEY_IV;                return tok::BH_KEY_IV;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 107 "../s/bif.l"
yylval->number = tok::UNIQUE_ID;                return tok::UNIQUE_ID;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 108 "../s/bif.l"
yylval->number = tok::PARENT_UNIQUE_ID;         return tok::PARENT_UNIQUE_ID;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 109 "../s/bif.l"
yylval->number = tok::FUNCTION_ID;              return tok::FUNCTION_ID;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 110 "../s/bif.l"
yylval->number = tok::PCR_NUMBER;               return tok::PCR_NUMBER;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 111 "../s/bif.l"
yylval->number = tok::PCR_MEASUREMENT_INDEX;    return tok::PCR_MEASUREMENT_INDEX;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 112 "../s/bif.l"
yylval->number = tok::IMAGE_STORE;              return tok::IMAGE_STORE;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 113 "../s/bif.l"
yylval->number = tok::TCM_A_REGION;             return tok::TCM_A_REGION;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 114 "../s/bif.l"
yylval->number = tok::TCM_B_REGION;             return tok::TCM_B_REGION;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 115 "../s/bif.l"
yylval->number = tok::TCM_C_REGION;             return tok::TCM_C_REGION;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 117 "../s/bif.l"
yylval->number = tok::BBRAM_KEK_IV;             return tok::BBRAM_KEK_IV;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 118 "../s/bif.l"
yylval->number = tok::BH_KEK_IV;                return tok::BH_KEK_IV;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 119 "../s/bif.l"
yylval->number = tok::EFUSE_KEK_IV;             return tok::EFUSE_KEK_IV;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 120 "../s/bif.l"
yylval->number = tok::EFUSE_USER_KEK0_IV;       return tok::EFUSE_USER_KEK0_IV;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 121 "../s/bif.l"
yylval->number = tok::EFUSE_USER_KEK1_IV;       return tok::EFUSE_USER_KEK1_IV;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 122 "../s/bif.l"
yylval->number = tok::USER_KEYS;                return tok::USER_KEYS;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 124 "../s/bif.l"
yylval->number = tok::FAMILY_KEY;               return tok::FAMILY_KEY;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 126 "../s/bif.l"
return tok::ENCRYPTION;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 127 "../s/bif.l"
yylval->number = 0;                             return tok::NONE;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 128 "../s/bif.l"
yylval->number = Encryption::AES;               return tok::ENCRVALUE;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 130 "../s/bif.l"
return tok::AUTHENTICATION;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 131 "../s/bif.l"
yylval->number = Authentication::RSA;           return tok::AUTHVALUE;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 132 "../s/bif.l"
yylval->number = Authentication::ECDSA;         return tok::AUTHVALUE;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 133 "../s/bif.l"
yylval->number = Authentication::ECDSA;         return tok::AUTHVALUE;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 134 "../s/bif.l"
yylval->number = Authentication::ECDSAp521;     return tok::AUTHVALUE;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 136 "../s/bif.l"
return tok::CHECKSUM;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 137 "../s/bif.l"
yylval->number = Checksum::MD5;                 return tok::CHECKSUMVALUE;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 138 "../s/bif.l"
yylval->number = Checksum::SHA2;                return tok::CHECKSUMVALUE;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 139 "../s/bif.l"
yylval->number = Checksum::SHA3;                return tok::CHECKSUMVALUE;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 141 "../s/bif.l"
return tok::PARTITION_OWNER;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 142 "../s/bif.l"
return tok::PARTITION_OWNER;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 143 "../s/bif.l"
yylval->number = PartitionOwner::FSBL;          return tok::POWNERVALUE ;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 144 "../s/bif.l"
yylval->number = PartitionOwner::UBOOT;         return tok::POWNERVALUE ;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 145 "../s/bif.l"
yylval->number = PartitionOwner::FSBL;          return tok::POWNERVALUE ;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 146 "../s/bif.l"
yylval->number = PartitionOwner::UBOOT;         return tok::POWNERVALUE ;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 147 "../s/bif.l"
yylval->number = PartitionOwner::FSBL;          return tok::POWNERVALUE ;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 148 "../s/bif.l"
yylval->number = PartitionOwner::UBOOT;         return tok::POWNERVALUE ;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 150 "../s/bif.l"
return tok::PARTITION_TYPE;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 151 "../s/bif.l"
return tok::PARTITION_TYPE;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 152 "../s/bif.l"
yylval->number = PartitionType::CONFIG_DATA_OBJ;   return tok::PTYPEVALUE;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 153 "../s/bif.l"
yylval->number = PartitionType::RAW;               return tok::PTYPEVALUE;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 154 "../s/bif.l"
yylval->number = PartitionType::CFI;               return tok::PTYPEVALUE;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 155 "../s/bif.l"
yylval->number = PartitionType::CFI_GSC;           return tok::PTYPEVALUE;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 156 "../s/bif.l"
yylval->number = PartitionType::SLR_BOOT;          return tok::PTYPEVALUE;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 157 "../s/bif.l"
yylval->number = PartitionType::SLR_CONFIG;        return tok::PTYPEVALUE;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 158 "../s/bif.l"
yylval->number = PartitionType::SLR_SLAVE;         return tok::PTYPEVALUE;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 159 "../s/bif.l"
yylval->number = PartitionType::SLR_SLAVE_BOOT;    return tok::PTYPEVALUE;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 160 "../s/bif.l"
yylval->number = PartitionType::SLR_SLAVE_CONFIG;  return tok::PTYPEVALUE;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 161 "../s/bif.l"
yylval->number = PartitionType::ELF;               return tok::PTYPEVALUE;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 163 "../s/bif.l"
yylval->number = tok::KEYSRC_ENCRYPTION;        return tok::KEYSRC_ENCRYPTION;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 164 "../s/bif.l"
yylval->number = tok::KEYSRC_ENCRYPTION;        return tok::KEYSRC_ENCRYPTION;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 165 "../s/bif.l"
yylval->number = KeySource::EfuseRedKey;        return tok::KEY_SRC;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 166 "../s/bif.l"
yylval->number = KeySource::BbramRedKey;        return tok::KEY_SRC;
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 167 "../s/bif.l"
yylval->number = KeySource::EfuseRedKey;        return tok::KEY_SRC;
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 168 "../s/bif.l"
yylval->number = KeySource::EfuseBlkKey;        return tok::KEY_SRC;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 169 "../s/bif.l"
yylval->number = KeySource::EfuseGryKey;        return tok::KEY_SRC;
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 170 "../s/bif.l"
yylval->number = KeySource::BbramRedKey;        return tok::KEY_SRC;
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 171 "../s/bif.l"
yylval->number = KeySource::BbramBlkKey;        return tok::KEY_SRC;
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 172 "../s/bif.l"
yylval->number = KeySource::BbramGryKey;        return tok::KEY_SRC;
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 173 "../s/bif.l"
yylval->number = KeySource::BhGryKey;           return tok::KEY_SRC;
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 174 "../s/bif.l"
yylval->number = KeySource::BhBlkKey;           return tok::KEY_SRC;
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 175 "../s/bif.l"
yylval->number = KeySource::UserKey0;           return tok::KEY_SRC;
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 176 "../s/bif.l"
yylval->number = KeySource::UserKey1;           return tok::KEY_SRC;
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 177 "../s/bif.l"
yylval->number = KeySource::UserKey2;           return tok::KEY_SRC;
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 178 "../s/bif.l"
yylval->number = KeySource::UserKey3;           return tok::KEY_SRC;
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 179 "../s/bif.l"
yylval->number = KeySource::UserKey4;           return tok::KEY_SRC;
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 180 "../s/bif.l"
yylval->number = KeySource::UserKey5;           return tok::KEY_SRC;
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 181 "../s/bif.l"
yylval->number = KeySource::UserKey6;           return tok::KEY_SRC;
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 182 "../s/bif.l"
yylval->number = KeySource::UserKey7;           return tok::KEY_SRC;
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 183 "../s/bif.l"
yylval->number = KeySource::EfuseUserKey0;      return tok::KEY_SRC;
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 184 "../s/bif.l"
yylval->number = KeySource::EfuseUserBlkKey0;   return tok::KEY_SRC;
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 185 "../s/bif.l"
yylval->number = KeySource::EfuseUserGryKey0;   return tok::KEY_SRC;
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 186 "../s/bif.l"
yylval->number = KeySource::EfuseUserKey1;      return tok::KEY_SRC;
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 187 "../s/bif.l"
yylval->number = KeySource::EfuseUserBlkKey1;   return tok::KEY_SRC;
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 188 "../s/bif.l"
yylval->number = KeySource::EfuseUserGryKey1;   return tok::KEY_SRC;
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 189 "../s/bif.l"
yylval->number = KeySource::BhKupKey;           return tok::KEY_SRC;
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 191 "../s/bif.l"
yylval->number = tok::FSBL_CONFIG;              return tok::FSBL_CONFIG;
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 192 "../s/bif.l"
yylval->number = tok::FSBL_CONFIG;              return tok::FSBL_CONFIG;
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 193 "../s/bif.l"
yylval->number = tok::FSBL_CONFIG;              return tok::FSBL_CONFIG;
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 194 "../s/bif.l"
yylval->number = Core::R5Single;                return tok::CORE;
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 195 "../s/bif.l"
yylval->number = Core::A53Singlex32;            return tok::CORE;
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 196 "../s/bif.l"
yylval->number = Core::A53Singlex32;            return tok::CORE;
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 197 "../s/bif.l"
yylval->number = Core::A53Singlex64;            return tok::CORE;
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 198 "../s/bif.l"
yylval->number = Core::A53Singlex64;            return tok::CORE;
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 199 "../s/bif.l"
yylval->number = Core::R5Dual;                  return tok::CORE;
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 200 "../s/bif.l"
yylval->number = BhRsa::BhRsaEnable;            return tok::BH_RSA;
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 201 "../s/bif.l"
yylval->number = AuthHash::Sha2;                return tok::AUTH_HASH;
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 202 "../s/bif.l"
yylval->number = PufHdLoc::PUFinBH;             return tok::PUFHD_LOC;
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 203 "../s/bif.l"
yylval->number = AuthOnly::Enabled;             return tok::AUTH_ONLY;
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 204 "../s/bif.l"
yylval->number = OptKey::OptKeyinSecHdr;        return tok::OPT_KEY;
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 205 "../s/bif.l"
yylval->number = PufMode::PUF4K;                return tok::PUF4KMODE;
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 206 "../s/bif.l"
yylval->number = tok::SHUTTER;                  return tok::SHUTTER;
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 207 "../s/bif.l"
yylval->number = tok::PUFROSWAP;                return tok::PUFROSWAP;
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 208 "../s/bif.l"
yylval->number = DpaCM::DpaCMEnable;            return tok::DPA_CM;
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 209 "../s/bif.l"
yylval->number = tok::DICE;                     return tok::DICE;
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 210 "../s/bif.l"
yylval->number = tok::SMAP_WIDTH;               return tok::SMAP_WIDTH;
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 211 "../s/bif.l"
yylval->number = tok::BYPASS_IDCODE_CHECK;      return tok::BYPASS_IDCODE_CHECK;
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 212 "../s/bif.l"
yylval->number = tok::A_HWROT;                  return tok::A_HWROT;
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 213 "../s/bif.l"
yylval->number = tok::S_HWROT;                  return tok::S_HWROT;
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 215 "../s/bif.l"
return tok::BOOT_DEVICE;
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 216 "../s/bif.l"
yylval->number = tok::ADDRESS;                  return tok::ADDRESS;
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 217 "../s/bif.l"
yylval->number = BootDevice::QSPI32;            return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 218 "../s/bif.l"
yylval->number = BootDevice::QSPI24;            return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 219 "../s/bif.l"
yylval->number = BootDevice::NAND;              return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 220 "../s/bif.l"
yylval->number = BootDevice::SD0;               return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 221 "../s/bif.l"
yylval->number = BootDevice::SD1;               return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 222 "../s/bif.l"
yylval->number = BootDevice::SDLS;              return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 223 "../s/bif.l"
yylval->number = BootDevice::MMC;               return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 224 "../s/bif.l"
yylval->number = BootDevice::USB;               return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 225 "../s/bif.l"
yylval->number = BootDevice::ETHERNET;          return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 226 "../s/bif.l"
yylval->number = BootDevice::PCIE;              return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 227 "../s/bif.l"
yylval->number = BootDevice::SATA;              return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 228 "../s/bif.l"
yylval->number = BootDevice::OSPI;              return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 229 "../s/bif.l"
yylval->number = BootDevice::SMAP;              return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 230 "../s/bif.l"
yylval->number = BootDevice::SBI;               return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 231 "../s/bif.l"
yylval->number = BootDevice::SD0RAW;            return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 232 "../s/bif.l"
yylval->number = BootDevice::SD1RAW;            return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 233 "../s/bif.l"
yylval->number = BootDevice::SDLSRAW;           return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 234 "../s/bif.l"
yylval->number = BootDevice::MMCRAW;            return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 235 "../s/bif.l"
yylval->number = BootDevice::MMC0;              return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 236 "../s/bif.l"
yylval->number = BootDevice::MMC0RAW;           return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 238 "../s/bif.l"
return tok::DEST_CPU;
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 239 "../s/bif.l"
return tok::DEST_CPU;
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 240 "../s/bif.l"
yylval->number = DestinationCPU::A53_0;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 241 "../s/bif.l"
yylval->number = DestinationCPU::A53_0;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 242 "../s/bif.l"
yylval->number = DestinationCPU::A53_0;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 243 "../s/bif.l"
yylval->number = DestinationCPU::A53_0;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 244 "../s/bif.l"
yylval->number = DestinationCPU::A53_1;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 245 "../s/bif.l"
yylval->number = DestinationCPU::A53_1;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 246 "../s/bif.l"
yylval->number = DestinationCPU::A53_1;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 247 "../s/bif.l"
yylval->number = DestinationCPU::A53_1;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 248 "../s/bif.l"
yylval->number = DestinationCPU::A53_2;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 249 "../s/bif.l"
yylval->number = DestinationCPU::A53_2;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 250 "../s/bif.l"
yylval->number = DestinationCPU::A53_2;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 251 "../s/bif.l"
yylval->number = DestinationCPU::A53_3;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 252 "../s/bif.l"
yylval->number = DestinationCPU::A53_3;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 253 "../s/bif.l"
yylval->number = DestinationCPU::A53_3;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 254 "../s/bif.l"
yylval->number = DestinationCPU::R5_0;          return tok::DEST_CPU_TYPE;
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 255 "../s/bif.l"
yylval->number = DestinationCPU::R5_0;          return tok::DEST_CPU_TYPE;
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 256 "../s/bif.l"
yylval->number = DestinationCPU::R5_1;          return tok::DEST_CPU_TYPE;
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 257 "../s/bif.l"
yylval->number = DestinationCPU::R5_1;          return tok::DEST_CPU_TYPE;
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 258 "../s/bif.l"
yylval->number = DestinationCPU::R5_lockstep;   return tok::DEST_CPU_TYPE;
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 259 "../s/bif.l"
yylval->number = DestinationCPU::PMU;           return tok::DEST_CPU_TYPE;
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 260 "../s/bif.l"
yylval->number = DestinationCPU::PMU;           return tok::DEST_CPU_TYPE;
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 261 "../s/bif.l"
yylval->number = DestinationCPU::AIE;           return tok::DEST_CPU_TYPE;
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 262 "../s/bif.l"
yylval->number = tok::CLUSTER_NUM;              return tok::CLUSTER_NUM;
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 264 "../s/bif.l"
return tok::DEST_DEVICE;
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 265 "../s/bif.l"
yylval->number = DestinationDevice::DEST_DEV_PS;    return tok::DEST_DEVICE_TYPE;
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 266 "../s/bif.l"
yylval->number = DestinationDevice::DEST_DEV_PL;    return tok::DEST_DEVICE_TYPE;
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 267 "../s/bif.l"
yylval->number = DestinationDevice::DEST_DEV_PMU;   return tok::DEST_DEVICE_TYPE;
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 268 "../s/bif.l"
yylval->number = DestinationDevice::DEST_DEV_XIP;   return tok::DEST_DEVICE_TYPE;
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 270 "../s/bif.l"
return tok::EXCEPTION_LEVEL;
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 271 "../s/bif.l"
yylval->number = ExceptionLevel::EL0;           return tok::EXCEPTION_LEVEL_TYPE;
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 272 "../s/bif.l"
yylval->number = ExceptionLevel::EL1;           return tok::EXCEPTION_LEVEL_TYPE;
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 273 "../s/bif.l"
yylval->number = ExceptionLevel::EL2;           return tok::EXCEPTION_LEVEL_TYPE;
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 274 "../s/bif.l"
yylval->number = ExceptionLevel::EL3;           return tok::EXCEPTION_LEVEL_TYPE;
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 276 "../s/bif.l"
return tok::TRUSTZONE;
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 277 "../s/bif.l"
yylval->number = TrustZone::Secure;             return tok::TRUSTZONE_TYPE;
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 278 "../s/bif.l"
yylval->number = TrustZone::NonSecure;          return tok::TRUSTZONE_TYPE;
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 280 "../s/bif.l"
yylval->number = tok::SLR_NUM;                  return tok::SLR_NUM;
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 282 "../s/bif.l"
yylval->number = tok::AUTH_PARAMS;              return tok::AUTH_PARAMS;
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 283 "../s/bif.l"
yylval->number = tok::PPK_SELECT;               return tok::PPK_SELECT;
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 284 "../s/bif.l"
yylval->number = tok::SPK_SELECT;               return tok::SPK_SELECT;
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 285 "../s/bif.l"
yylval->number = SpkSelect::SPK_eFUSE;          return tok::SPKSELECT;
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 286 "../s/bif.l"
yylval->number = SpkSelect::USER_eFUSE;         return tok::SPKSELECT;
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 287 "../s/bif.l"
yylval->number = tok::SPK_ID;                   return tok::SPK_ID; 
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 288 "../s/bif.l"
return tok::HEADER_AUTH;
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 290 "../s/bif.l"
yylval->number = tok::REVOKE_ID;                return tok::REVOKE_ID;
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 292 "../s/bif.l"
yylval->number = tok::SPLIT;                    return tok::SPLIT;
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 293 "../s/bif.l"
yylval->number = tok::SPLIT_MODE;               return tok::SPLIT_MODE;
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 294 "../s/bif.l"
yylval->number = SplitMode::SlaveMode;          return tok::SPLITMODE;
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 295 "../s/bif.l"
yylval->number = SplitMode::Normal;             return tok::SPLITMODE;
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 296 "../s/bif.l"
yylval->number = tok::SPLIT_FMT;                return tok::SPLIT_FMT; 
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 297 "../s/bif.l"
return tok::MCS;
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 298 "../s/bif.l"
return tok::BIN;
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 300 "../s/bif.l"
yylval->number = tok::AUTHJTAG_CONFIG;          return tok::AUTHJTAG_CONFIG;
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 301 "../s/bif.l"
yylval->number = tok::DEVICE_DNA;               return tok::DEVICE_DNA;
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 302 "../s/bif.l"
yylval->number = tok::JTAG_TIMEOUT;             return tok::JTAG_TIMEOUT;
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 304 "../s/bif.l"
yylval->number=atoi(yytext);                    return tok::DECVALUE;
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 305 "../s/bif.l"
yylval->number=strtoul(yytext+2,NULL,16);       return tok::HEXVALUE;
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 306 "../s/bif.l"
yylval->string=strdup(yytext);                  return tok::HEXWORD;
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 308 "../s/bif.l"
return tok::COLON;
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 309 "../s/bif.l"
return tok::SEMICOLON;
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 310 "../s/bif.l"
return tok::EQUAL;
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 311 "../s/bif.l"
return tok::COMMA;
	YY_BREAK
case 245:
YY_RULE_SETUP
#line 312 "../s/bif.l"
return tok::OBRACKET;
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 313 "../s/bif.l"
return tok::EBRACKET;
	YY_BREAK
case 247:
YY_RULE_SETUP
#line 314 "../s/bif.l"
return tok::OBRACE;
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 315 "../s/bif.l"
return tok::EBRACE;
	YY_BREAK
case 249:
YY_RULE_SETUP
#line 316 "../s/bif.l"
return tok::LPAREN;
	YY_BREAK
case 250:
YY_RULE_SETUP
#line 317 "../s/bif.l"
return tok::RPAREN;
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 318 "../s/bif.l"
return tok::ASTERISK;
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 320 "../s/bif.l"
return tok::PLUS;
	YY_BREAK
case 253:
YY_RULE_SETUP
#line 321 "../s/bif.l"
return tok::MINUS;
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 322 "../s/bif.l"
return tok::LSHIFT;
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 323 "../s/bif.l"
return tok::RSHIFT;
	YY_BREAK
case 256:
YY_RULE_SETUP
#line 324 "../s/bif.l"
return tok::MULT;
	YY_BREAK
case 257:
YY_RULE_SETUP
#line 325 "../s/bif.l"
return tok::DIVIDE;
	YY_BREAK
case 258:
YY_RULE_SETUP
#line 326 "../s/bif.l"
return tok::MODULO;
	YY_BREAK
case 259:
YY_RULE_SETUP
#line 327 "../s/bif.l"
return tok::NEGATION;
	YY_BREAK
case 260:
YY_RULE_SETUP
#line 328 "../s/bif.l"
return tok::AND;
	YY_BREAK
case 261:
YY_RULE_SETUP
#line 329 "../s/bif.l"
return tok::OR;
	YY_BREAK
case 262:
YY_RULE_SETUP
#line 330 "../s/bif.l"
return tok::XOR;
	YY_BREAK
case 263:
YY_RULE_SETUP
#line 332 "../s/bif.l"
yylval->string=strdup(yytext);      return tok::WORD;
	YY_BREAK
case 264:
YY_RULE_SETUP
#line 333 "../s/bif.l"
yylval->string=strdup(yytext);      return tok::FILENAME;
	YY_BREAK
case 265:
YY_RULE_SETUP
#line 334 "../s/bif.l"
yylval->string=strdup(yytext+1); yylval->string[strlen(yytext)-2]=0; return tok::QFILENAME;
	YY_BREAK
case 266:
YY_RULE_SETUP
#line 336 "../s/bif.l"
yylloc->step ();
	YY_BREAK
case 267:
/* rule 267 can match eol */
YY_RULE_SETUP
#line 337 "../s/bif.l"
yylloc->lines (yyleng); yylloc->step ();
	YY_BREAK
case 268:
YY_RULE_SETUP
#line 338 "../s/bif.l"
/* ignore (Linux only) */
	YY_BREAK
case 269:
YY_RULE_SETUP
#line 339 "../s/bif.l"
printf("WARNING: bad character! '%s' (0x%02X)\n",yytext,yytext[0]);
	YY_BREAK
case 270:
YY_RULE_SETUP
#line 340 "../s/bif.l"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 3148 "../bisonflex/bif.yy.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	biffree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	biffree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
int yyFlexLexer::yy_get_next_buffer()
/* %endif */
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					bifrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) bifrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_get_previous_state()
/* %endif */
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1224 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
/* %endif */
{
	register int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1224 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1223);

	return yy_is_jam ? 0 : yy_current_state;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyunput( int c, register char* yy_bp)
/* %endif */
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yyinput()
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyrestart( std::istream* input_file )
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_load_buffer_state()
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) bifalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) bifalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		biffree((void *) b->yy_ch_buf  );

	biffree((void *) b  );
}

/* %if-c-only */
/* %endif */

/* %if-c++-only */

extern "C" int isatty (int );

/* %endif */

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_is_interactive = 0;
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypop_buffer_state (void)
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yyensure_buffer_stack(void)
/* %endif */
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)bifalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)bifrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_push_state( int new_state )
/* %endif */
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) bifalloc(new_size  );

		else
			(yy_start_stack) = (int *) bifrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_pop_state()
/* %endif */
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yy_top_state()
/* %endif */
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* %if-reentrant */
/* %endif */
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *bifalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *bifrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void biffree (void * ptr )
{
	free( (char *) ptr );	/* see bifrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 340 "../s/bif.l"




void BIF::FlexScanner::comment()
{
    char c, c1;
loop:
    while ((c = yyinput()) != '*' && c != 0) 
    {
        // putchar(c);
        if (c == '\n') yylloc->lines (1);
    }

    if ((c1 = yyinput()) != '/' && c != 0)
    {
        unput(c1);
        goto loop;
    }
}

