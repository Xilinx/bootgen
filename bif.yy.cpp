#line 2 "../bisonflex/bif.yy.cpp"

#line 4 "../bisonflex/bif.yy.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer bifFlexLexer
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstring>
/* end standard C++ headers. */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

/* %if-not-reentrant */
extern int yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
/* %endif */

/* %if-c++-only */
	std::istream* yy_input_file;
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */
/* %if-not-reentrant */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
/* %endif */

void *bifalloc (yy_size_t  );
void *bifrealloc (void *,yy_size_t  );
void biffree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext

#include "FlexLexer.h"

int yyFlexLexer::yywrap() { return 1; }
int yyFlexLexer::yylex()
	{
	LexerError( "yyFlexLexer::yylex invoked but %option yyclass used" );
	return 0;
	}

#define YY_DECL int FlexScanner::yylex()

/* %if-c-only Standard (non-C++) definition */
/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 262
#define YY_END_OF_BUFFER 263
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1171] =
    {   0,
        0,    0,  263,  261,  258,  259,  260,  261,  250,  252,
      241,  242,  243,  244,  236,  245,  256,  249,  230,  230,
      233,  234,  261,  235,  261,  232,  255,  237,  238,  254,
      255,  232,  232,  232,  232,  232,  232,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  239,  253,  240,  251,  258,  259,    0,    0,
      256,    1,  256,  230,  232,  256,  246,  247,  232,    0,
      255,  232,  232,  255,  232,  232,  232,  255,  255,  255,
      232,  255,  255,  255,  255,  255,  232,  232,  255,  255,
      255,  232,  255,  255,  232,  232,  232,  255,  255,  255,

      255,  232,  255,  255,  255,  255,  255,  255,   51,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      200,  255,  255,  255,  199,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  257,
        0,    0,    2,  256,  231,    0,  232,  255,  232,  232,
      255,  255,  232,   71,  196,  255,  255,  255,  255,  255,
      255,  226,  255,  255,  255,   91,   93,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  232,  255,  256,

      100,  255,  255,  255,  255,  255,  255,  224,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  225,   78,  255,  159,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,   35,   87,
       85,  194,  255,  255,  255,  255,  195,  255,  255,  256,
      255,  255,   92,  255,  255,   73,  255,  255,  166,  256,
      156,  157,  255,  255,  255,  255,  211,  255,  255,  255,
      255,  255,  255,  255,  255,  255,   59,  160,  255,  202,
        0,  256,  255,  256,  255,  256,  256,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,

      255,    7,  255,  256,  255,  255,   33,  174,  255,  255,
      255,  255,  255,  255,  255,  255,  204,  205,  206,  207,
      255,  255,  255,  255,  255,   53,   83,  255,  255,  255,
      255,  255,  255,   36,  255,  255,  255,   32,  255,  255,
      256,  171,  221,  255,   52,  155,  255,  256,   70,  255,
      255,  255,  255,  164,  255,  255,  255,  162,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  189,
      191,  256,  256,  255,  255,  255,  255,  255,  163,  256,
      256,  256,  255,  255,   79,   80,  255,  255,  256,  165,
      256,  255,  255,  255,  255,  255,  255,  255,  255,   90,

      255,  255,    8,  255,  175,  179,  183,  186,  255,  178,
      182,  185,  188,  255,  176,  180,  177,  181,  184,  187,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  104,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  256,  255,  255,  255,  255,  255,  255,  255,
      255,   74,  103,  255,  255,  255,  255,  255,  255,  255,
      255,   18,  255,   24,  255,  255,  255,  255,  255,  255,
      256,  256,  255,  255,  256,  255,  255,  255,  255,   82,
      255,  255,  255,  201,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  256,  190,  192,  255,  255,

      255,  255,  255,  158,  256,  256,  255,  255,  255,  255,
      256,  256,  256,  255,  256,  255,  255,  255,  255,  220,
      255,  255,  255,  255,   84,  255,  255,  256,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,   19,  255,  255,  255,  255,  255,
      255,  256,  255,  255,  255,  255,  255,  255,  255,  255,
      256,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  102,  255,  255,  255,  256,  256,
      255,  255,  256,  256,  255,  223,   29,  255,  255,  255,

      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  154,  153,  256,  255,  255,  255,  255,  255,  256,
      256,  256,  255,  209,  255,  255,  256,  256,  256,  255,
      256,  217,  255,  255,  255,  255,  255,    9,  255,   37,
      255,  256,  255,  255,  255,  132,  134,  133,  135,  149,
      255,  152,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,   94,  255,
      197,  255,  255,  255,  255,  255,  255,  255,  255,  256,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,

      255,  255,  255,  255,   49,  255,   28,  255,  255,  127,
      255,  255,  170,  256,  255,  255,   88,   86,  255,  141,
      255,  255,   57,  255,  255,   39,    4,  255,   40,  255,
      255,  255,  255,  256,  136,  255,   31,  255,  150,  256,
      167,  168,   26,  143,  255,  256,  256,  256,  255,  256,
      255,   41,  255,   42,   34,  255,  255,  256,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,   77,  255,
      255,  255,  255,  255,  255,  255,  255,  256,  256,  255,

      255,  255,  255,  255,  255,  161,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,   27,  255,  172,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,   55,
      255,  139,  256,  255,  255,  255,  256,  255,   95,  256,
      256,  255,  256,  255,  255,  255,    5,  256,  255,   67,
        6,  255,  255,   13,  140,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,   63,   58,  255,
      255,  255,  255,  255,   47,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  256,  256,  255,  255,
      255,  255,  255,  255,  255,  255,   68,  255,  255,  255,

      255,  255,  255,  255,  255,   11,  255,  210,   48,  255,
       23,  255,  255,   12,  142,  255,  256,  131,  255,  219,
      169,  222,  256,   97,  255,  215,  255,  255,  208,  256,
      113,  114,  115,  116,  117,  118,  119,  120,  255,   38,
      255,  255,   20,  255,  255,  255,  255,  255,  255,  255,
      112,  111,   54,  255,   21,  255,  255,    3,  255,  255,
       17,  255,   16,  255,  228,  255,  255,  255,   75,   76,
      255,  255,  255,  255,  255,   69,  255,  255,  255,  255,
      255,  255,  255,  255,  255,   25,  255,   60,  255,  255,
      213,  255,  256,  255,   96,  256,  147,  214,  255,  216,

      255,  212,  255,  255,  255,  255,  255,  255,  255,  255,
       44,  129,  151,   46,  255,  255,  255,  146,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  128,   61,  218,
      255,  255,  255,  255,   10,  255,  255,   56,  144,  193,
      255,  256,  256,  255,   22,  255,  255,  255,  255,  255,
       62,  255,  255,  255,  255,  255,  145,  255,  255,  255,
       64,  255,  255,  255,  255,  255,  255,  255,  130,  229,
      255,  255,  255,  255,  256,  256,   43,  255,  255,  255,
      109,  110,  108,  255,  255,   15,  255,  255,   14,  106,
      107,  105,  255,  255,  255,  255,  255,  255,  255,  255,

      255,  255,  256,  256,  255,   72,  255,  137,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
       89,   30,   98,  256,  255,  227,  255,  173,  255,  255,
      255,  255,  255,  121,  124,  203,  255,   45,  255,   81,
      256,  138,  255,  255,  255,  255,  255,  255,   50,  255,
       99,  255,  255,  255,  255,  255,  255,  101,  255,  198,
      255,  255,   65,   66,  148,  122,  125,  123,  126,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    6,    6,    8,    9,    1,   10,
       11,   12,   13,   14,   15,   16,   17,   18,   19,   20,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
       31,   32,    1,    6,   33,   33,   33,   33,   33,   33,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   35,   34,   34,
       36,   37,   38,   39,   40,    1,   41,   42,   43,   44,

       45,   46,   47,   48,   49,   50,   51,   52,   53,   54,
       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,   67,   68,   69,   70,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[71] =
    {   0,
        1,    1,    1,    1,    2,    2,    2,    2,    2,    2,
        2,    1,    3,    1,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    1,    1,    1,
        1,    1,    3,    3,    3,    1,    3,    1,    2,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[1175] =
    {   0,
        0,    0, 2402, 2403,   69, 2398, 2403,   70, 2403, 2403,
     2403, 2403, 2403,    0, 2403,    0,    0,   60,  119,   38,
     2403, 2403, 2370, 2403, 2367,  171,  220, 2403, 2403, 2403,
     2370,  227,  232,  103,  121,  248,  237,  108,  115, 2337,
       37, 2341,  260,  126,  214,  258, 2336,  283,  303,   41,
      276, 2345, 2403, 2403, 2403, 2403,  169, 2390, 2385,  172,
        0, 2403,  363,  121,  416,  463, 2403, 2403, 2363,  165,
     2362,  228,  492,  227,  120,  306,  320,   56,  152,  147,
      145,  294,  329,  230,  254,  267,  299,  220,  313,  148,
      324,  353,  357,  308,  302,  364,  383,  382,  361,  350,

      386,  333,  231,  359,  378,  368,  383,  385,  417,  420,
      421,  422,  360,  398,  424,  399,  310,  393,  428,  379,
      427,  438,  498,  431,  434,  441,  444,  445,  446,  432,
      440,  499,  450,  495,  471,  500,  474,  529,  501,  503,
      504,  493,  515,  519,  548,  527,  520,  530,  531,  526,
      523,  545,  551,  552,  554,  555,  556,  557,  559, 2403,
      573, 2386, 2403,  615,    0,    0,  620,  621,  576,  577,
      565,  568,  579,  604, 2360,  566,  586,  611,  622,  610,
      602, 2359,  613,  605,  629, 2358,  643,  634,  638,  603,
      561,  639,  612,  646,  647,  648,  650,  651,  653,  668,

     2357,  662,  666,  668,  670,  665,  671, 2356,  672,  675,
      673,  676,  679,  678,  677,  680,  681,  691,  695,  698,
      702, 2355, 2354,  703,  718,  704,  699,  706,  710,  709,
      724,  447,  713,  715,  717,  719,  720,  728, 2353, 2352,
      730,  729,  739,  732,  733,  735, 2351,  749,  750,  768,
      767,  748, 2350,  756,  760, 2349,  740,  768, 2348, 2323,
      783,  785,  762,  784,  734,  774,  791,  782,  793,  786,
      788,  789,  796,  797,  790,  800, 2346, 2345,  798,  801,
     2365,  839,  229,  843,  802,  398,  849,  815,  803,  799,
      809,  818,  837,  822,  820,  843,  825,  846,  850,  848,

      852,  856,  857, 2324,  858,  860, 2342, 2341,  861,  862,
      864,  866,  870,  871,  872,  874,    0,    0,    0,    0,
      873,  876,  884,  887,  893, 2340,  882,  886,  897,  889,
      896,  899,  900, 2339,  903,  901,  902, 2338,  905,  907,
     2307,  922, 2336,  911, 2335, 2334,  919, 2305, 2332,  920,
      921,  924,  926, 2331,  928,  929,  935, 2330,  930,  938,
      939,  940,  942,  945,  944,  946,  948,  952,  967,    0,
        0, 2302,  963,  947,  950,  957,  972,  964, 2328, 2296,
     2296, 2295,  975,  974, 2324, 2323,  976,  981,  968,  977,
     2305,  979,  984,  985,  986,  988,  990,  991,  992, 2321,

      993,  997, 1014, 1002,    0,    0,    0,    0, 1023,    0,
        0,    0,    0, 1035,    0,    0,    0,    0,    0,    0,
     1003,  577, 1007, 1015, 1017, 1020, 1021, 1029, 1032, 1034,
     1033, 1036, 1039, 1040, 1041, 1043, 1044, 1056, 1049, 1053,
     1061, 1050, 2289, 1054, 1062, 1058, 1057, 1073, 1082, 1084,
     1086, 1100, 1089, 1060, 1066, 1091, 1093, 1068, 1095, 1094,
     1097, 2319, 1102, 1104, 1103, 1106, 1107, 1108, 1111, 1112,
     2305, 2287, 1114, 1113, 1096, 1117, 1124, 1126, 1130, 2316,
     1131, 1133, 1134, 1137, 1135, 1136, 1142, 1139, 1144, 1145,
     1141, 1146, 1155,  309,   80, 2300,    0,    0, 1151, 1150,

     1153, 1157, 1156, 2327, 2300, 2299, 1159, 1171, 1172, 1177,
     2284, 2283, 2285, 1169, 2290, 1178, 1175, 1179, 1180, 2307,
     1181, 1182, 1185,  144, 2306, 1190, 1184, 2288, 1193, 1195,
     1196, 1206, 1207, 1217, 1208, 1211, 1221, 1214, 1218, 1220,
     1222, 1219, 1224, 1225, 1226, 1227, 1241, 1229, 1230, 1234,
     1235, 1238, 1253, 1251, 2304, 1254, 1257, 1259, 1262, 1261,
     1265, 2288, 1263, 1239, 1270, 1273, 1268, 1278, 1282, 1285,
     2274, 1279, 1284, 1289, 1287, 1297, 1288, 1291, 1292, 1295,
     1300, 1310, 1303, 1301, 1315, 1313, 1321, 1323, 2266, 2287,
     1324, 1328, 2274, 2283, 1329, 2297, 2296, 1330, 1331, 1332,

     1333, 1334, 1337, 1335, 1339, 1340, 1341, 1342, 1344, 1345,
     1349, 2295, 2294, 2270, 1347, 1354, 1360, 1364, 1348, 2262,
     2256, 2255, 1356, 2289, 1366, 1370, 2261, 2261, 2273, 1374,
     2252, 2284, 1375, 1381, 1378, 1383, 1379, 2283, 1384, 2282,
     1385, 2263, 1386, 1387, 1389, 2280, 2279, 2278, 2277, 2276,
     1390, 2275, 1388, 1392, 1391, 1393, 1401, 1406, 1408, 1394,
     1410, 1412, 1416, 1419, 1420, 1422, 1425, 1426, 1428, 1430,
     1427, 1431, 1435, 1437, 1438, 1439, 1440, 1441,    0, 1443,
     2274, 1444, 1450, 1446, 1453, 1454, 1456, 1458, 1465, 1238,
     1464, 1460, 1466, 1474, 1467, 1475, 1476, 1479, 1481, 1482,

     1486, 1487, 1480, 1489, 2273, 1492, 2272, 1495, 1494, 2271,
     1500, 1501,    0, 2235, 1502, 1503,    0,    0, 1504, 2269,
     1505, 1509, 2268, 1507, 1514, 2267, 2266, 1516, 2265, 1521,
     1522, 1515, 1523, 2233, 2263, 1518, 1540, 1524, 2262, 2248,
        0,    0, 2260, 2259, 1527, 2226, 2239, 2222, 1525, 2224,
     1530, 2254, 1544, 2253, 2252, 1548, 1549, 2218, 1550, 1551,
     1553, 1555, 1559, 1556, 1558, 1560, 1569, 1563, 1564, 1565,
     1566, 1567, 1568, 1576, 1581, 1584, 1585, 1571, 1572, 1575,
     1578, 1590, 1594, 1593, 1596, 1600, 1597, 1607, 2250, 1608,
     1609, 1615, 1610, 1616, 1618, 1620, 1619, 2251, 2256, 1621,

     1622, 1625, 1627, 1629, 1626, 2247, 1630, 1637, 1634, 1636,
     1638, 1639, 1641, 1647, 1651, 1652, 2246, 1657,    0, 1655,
     1662, 1663, 1661, 1658, 1664, 1669, 1666, 1667, 1676, 2245,
     1665, 2244, 2211, 1684, 1670, 1686, 2207, 1685,    0, 2220,
     2223, 1688, 2222, 1689, 1691, 1692, 2238, 2206, 1734, 2236,
     2235, 1695, 1696, 2234, 2233, 1707, 1698, 1705, 1699, 1703,
     1721, 1735, 1737, 1738, 1714, 1706, 1708, 2232, 2231, 1739,
     1711, 1716, 1744, 1746, 2230, 1748, 1751, 1752, 1753, 1754,
     1755, 1757, 1759, 1758, 1760, 1763, 2235, 2237, 1764, 1768,
     1775, 1777, 1762, 1769, 1785, 1783, 2227, 1786, 1788, 1766,

     1790, 1697, 1791, 1793, 1794, 2226, 1796, 2225, 2224, 1799,
     1800, 1801, 1802, 2223, 2222, 1806, 2204, 2220, 1805, 2219,
        0, 2218, 2198, 2229, 1803,    0, 1810, 1811, 2215, 2197,
     2213, 2212, 2211, 2210, 2209, 2208, 2207, 2206, 1813, 2205,
     1814, 1821, 2204, 1817, 1825, 1827, 1828, 1832, 1831, 1830,
     2203, 2202, 2201, 1839, 2200, 1836, 1840, 2199, 1833, 1835,
     2198, 1841, 2197, 1837, 2196, 1848, 1846, 1847,    0,    0,
     1858, 1859, 1866, 1860, 1861, 2195, 1867, 1869, 1871, 1872,
     1875, 1876, 1877, 1878, 1879, 2194, 1880, 2193, 1886, 1884,
     2192, 1892, 2163, 1896,    0, 1879, 2190, 2189, 1897,    0,

     1899, 2188, 1900, 1902, 1903, 1904, 1905, 1906, 1907, 1914,
     2187, 2186, 2185, 2184, 1917, 1919, 1930, 2183, 1908, 1931,
     1934, 1935, 1910, 1936, 1941, 1939, 1938, 2182, 2181, 2180,
     1943, 1946, 1945, 1932, 2179, 1947, 1948, 2178, 2177,    0,
     1954, 2149, 2148, 1957, 2174, 1958, 1959, 1961, 1962, 1963,
     2173, 1966, 1968, 1970, 1972, 1973, 2172, 1976, 1978, 1980,
     2171, 1981, 1983, 1984, 1991, 1993, 1995, 1996, 2170, 2169,
     1997, 1998, 2002, 2001, 2141, 2141, 2166, 2005, 2006, 2012,
     2165, 2164, 2163, 2004, 2011, 2162, 2009, 2022, 2161, 2151,
     2148, 2147, 2013, 2020, 2026, 2028, 2031, 2034, 2035, 2038,

     2042, 2040, 2114, 2127, 2041, 2144, 2043, 2143, 2046, 2047,
     2044, 2048, 2054, 2079, 2081, 2050, 2052, 2056, 2075, 2053,
     2142, 2141,    0, 2119, 2076, 2138, 2082, 2137, 2084, 2085,
     2086, 2087, 2088, 2135, 2134, 2132, 2089, 2131, 2090, 2130,
     2101, 2051, 2094, 2092, 2095, 2097, 2098, 2101, 1719, 2103,
        0, 2110, 2104, 2091, 2113, 2115, 2118, 1228, 2116,  804,
     2133, 2136,  567,  525,  390,  311,  301,  226,  223, 2403,
      147, 2179, 2182, 2185
    } ;

static yyconst flex_int16_t yy_def[1175] =
    {   0,
     1170,    1, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170,
     1170, 1170, 1170, 1171, 1170, 1171, 1171, 1171, 1171,   19,
     1170, 1170, 1170, 1170, 1170, 1170,   26, 1170, 1170, 1170,
       27,   26,   26,   26,   26,   26,   26,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27, 1170, 1170, 1170, 1170, 1170, 1170, 1172, 1172,
     1171, 1170, 1173,   19,   19,   65, 1170, 1170,   26, 1170,
       27,   26,   27,   27,   26,   73,   73,   27,   27,   27,
       26,   27,   27,   27,   27,   27,   26,   26,   27,   27,
       27,   26,   27,   27,   26,   73,   73,   27,   27,   27,

       27,   26,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27, 1170,
     1170, 1174, 1170, 1173,   66, 1171,   26,   27,   26,   73,
       27,   27,   26,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   26,   27, 1171,

       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27, 1171,
       27,   27,   27,   27,   27,   27,   27,   27,   27, 1171,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
     1172, 1171,   27, 1171,   27, 1171, 1171,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,

       27,   27,   27, 1171,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27, 1171, 1171, 1171, 1171,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
     1171,   27,   27,   27,   27,   27,   27, 1171,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27, 1171,
     1171, 1171, 1171,   27,   27,   27,   27,   27,   27, 1171,
     1171, 1171,   27,   27,   27,   27,   27,   27, 1171,   27,
     1171,   27,   27,   27,   27,   27,   27,   27,   27,   27,

       27,   27,   27,   27, 1171, 1171, 1171, 1171,   27, 1171,
     1171, 1171, 1171,   27, 1171, 1171, 1171, 1171, 1171, 1171,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27, 1171,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
     1171, 1171,   27,   27, 1171,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27, 1171, 1171, 1171,   27,   27,

       27,   27,   27, 1171, 1171, 1171,   27,   27,   27,   27,
     1171, 1171, 1171,   27, 1171,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27, 1171,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27, 1171,   27,   27,   27,   27,   27,   27,   27,   27,
     1171,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27, 1171, 1171,
       27,   27, 1171, 1171,   27,   27,   27,   27,   27,   27,

       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27, 1171,   27,   27,   27,   27,   27, 1171,
     1171, 1171,   27,   27,   27,   27, 1171, 1171, 1171,   27,
     1171,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27, 1171,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27, 1171,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27, 1171,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,

       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27, 1171, 1171,   27,   27, 1171, 1171,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27, 1171,   27,   27,   27,   27,   27, 1171,
     1171, 1171,   27,   27,   27, 1171, 1171, 1171,   27, 1171,
       27,   27,   27,   27,   27,   27,   27, 1171,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27, 1171, 1171,   27,

       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27, 1171,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27, 1171,   27,   27,   27, 1171,   27, 1171, 1171,
     1171,   27, 1171,   27,   27,   27,   27, 1171,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27, 1171, 1171,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,

       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27, 1171,   27,   27,   27,
     1171,   27, 1171, 1171,   27, 1171,   27,   27,   27, 1171,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27, 1171, 1171,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27, 1171,   27, 1171, 1171,   27,   27,   27, 1171,

       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27, 1171,
       27, 1171, 1171,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27, 1171, 1171,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,

       27,   27, 1171, 1171,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27, 1171, 1171,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
     1171,   27,   27,   27,   27,   27,   27,   27,   27,   27,
     1171,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,    0,
     1170, 1170, 1170, 1170
    } ;

static yyconst flex_int16_t yy_nxt[2474] =
    {   0,
        4,    5,    6,    7,    5,    4,    8,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   21,   22,   23,
       24,   25,   26,   27,   27,   28,   17,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   27,   38,   39,   40,
       41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
       51,   27,   27,   52,   27,   27,   53,   54,   55,   56,
       57,   62,   61,   57,   59,   59,   63,   59,   59,   59,
       59,  113,   59, 1170,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,  114,  153,  613,

      175,   61,   60,   60,   60,  154,   59, 1170,   59,   59,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   87, 1170,   88,   61,
       89,   65,  107,   66,   90,   61,  108,   91,  109,   65,
       65,   65,   65,   65,   65,   92,  122,  110,  111,   93,
       57, 1170, 1170,   57, 1170, 1170,   94,  172,  160, 1170,
      123,  166,   66,   61,   61,   61,   61,   61,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   70,  161,

      176,  166,  178,   69,   71,   71,  177,   61,  189,  639,
       71,   69,   69,   69,   69,   69,   69,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71, 1170,  167,   72,
     1170,   73,   71, 1170, 1170, 1170, 1170, 1170, 1170,  124,
       71,   71,   71,   71,   71,   71,   74,   75,  187,  125,
       76,   77,  126,   81,  171,   78,  127,  102,   79,   82,
       83, 1170,  207,   84,  183,  103,   85,   80,   95,  104,
       96,  168,  409,   97, 1170,  105,   86,  106,  128,   98,

      129,   99,  116,  117,  118,  138,  130,  100,  184,  131,
      132,  101,  119,  133,  120,  134,  135,  155,  136,  156,
      121, 1170,  185,  139,  157,   69, 1170,  140, 1170, 1170,
      612,   69,  223,  179,  158, 1170, 1170, 1170, 1170,   69,
     1170,  141,  142,  143,  144,   69,  145,  146,  196,  173,
      147, 1170,  180,  186,  148,  149, 1170,  188,  150,  197,
     1170,  151,  152,  162,  162,  163,  162,  162,  162,  162,
      162,  162,  162,  162,  162,  181,  162, 1170,  174,  190,
     1170,  191,  182,   69, 1170,  206, 1170, 1170, 1170,   69,
      162,  162,  162,  162,  162, 1170,  200,  203,  162,  195,

      162,  162,   69,  202,  192, 1170, 1170,  198,   69, 1170,
     1170,  193, 1170, 1170,  194,  415,  416, 1170,  208,  209,
     1170,  210,  226,  211,  218, 1170, 1170,  201,  204,  162,
      162,  162,  162,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,  199, 1170,  205,  212, 1170, 1170, 1170,
       61, 1170,  224,  219, 1170, 1170,  213,  222, 1170, 1170,
      214, 1170,  217,  215,  220, 1170,  221, 1170, 1170,  216,
      225, 1170, 1170, 1170, 1170,  239,  233, 1170,  227,   61,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      228,  229,  240,  234,  238,  165,  235,  236, 1170,  351,

      243, 1170,  237,  165,  165,  165,  165,  165,  165,   69,
       69,  169,   69,   69,   69,   69,   69,  170,   69, 1170,
     1170,  246, 1170,  247,   69, 1170, 1170, 1170, 1170,  249,
     1170, 1170,   69,   69,   69,   69,   69,   69,  230,  244,
      257,  241, 1170,  250,  256,  248, 1170, 1170,  251,  245,
     1170,  231, 1170, 1170, 1170,  232, 1170, 1170, 1170,  242,
      264,  254,  260,  253,  255,  261,  262,  259,  252,  263,
      266,  268, 1170,  271,  258, 1170,  269,  270, 1170, 1170,
      265, 1170, 1170, 1170, 1170,  272, 1170,  267, 1170,  281,
      286,  287, 1170, 1170, 1170, 1170,   69,  537,  278,  277,

      276,  279,   69, 1170, 1170,  308, 1170,  274,  275,  281,
      289,  273,  292, 1170,  280,  162,  162,  163,  162,  162,
      162,  162,  162,  162,  162,  162,  162,  288,  162, 1170,
     1170, 1170, 1170,  293,  282,  284,  290, 1170, 1170, 1170,
     1170,  300,  162,  162,  162,  162,  162, 1170, 1170, 1170,
      162,  294,  162,  162,  291,  301, 1170,  304,  299,  283,
      285, 1170,  295,  296,  302, 1170, 1170,  307,  297,  303,
     1170,  310,  298, 1170, 1170, 1170,  305, 1170, 1170,  309,
     1170,  162,  162,  162,  162,  317,  318,  319,  320, 1170,
      313,  312, 1170, 1170,  311, 1170,  306, 1170, 1170, 1170,

     1170,  314, 1170, 1170, 1170, 1170, 1170, 1170, 1170,  315,
      322,  316,  323,  325,  324,  326,  329,  328, 1170,  321,
      330,  331, 1170,  327,  332, 1170, 1170,  335,  333, 1170,
     1170, 1170,  341, 1170,  337,  342, 1170, 1170,  348,  334,
     1170,  338, 1170,  340, 1170, 1170, 1170, 1170,  343,  336,
      345, 1170,  339,  346,  353, 1170, 1170, 1170,  344, 1170,
     1170, 1170, 1170,  355,  356,  354, 1170, 1170,  349,  347,
      366,  352,  358,  359,  360, 1170, 1170, 1170,  361,  357,
      365,  373,  350, 1170,  362,  370,  371, 1170,  367, 1170,
      363,  374,  364,  387, 1170, 1170,  368,  381,  369,  382,

      376, 1170,  378,  385,  386,  389,  375,  391,  379, 1170,
     1170, 1170, 1170, 1170,  377, 1170, 1170, 1170, 1170,  372,
     1170,  383,  384, 1170, 1170, 1170, 1170, 1170, 1170, 1170,
     1170, 1170,  392,  396,  395,  388, 1170,  390,  393,  402,
      404,  400, 1170,  423,  401, 1170,  397, 1170,  398, 1170,
      422,  394, 1170,  424,  399,  403,  405,  406,  407,  408,
      410,  411,  412,  413, 1170,  414,  417,  418,  419,  420,
     1170,  425,  421, 1170,  430, 1170,  426, 1170,  427, 1170,
      431,  428,  433, 1170, 1170, 1170,  429, 1170, 1170, 1170,
      434, 1170,  436, 1170,  432,  438,  435, 1170, 1170, 1170,

     1170, 1170,  437, 1170,  439,  449,  448,  440,  444, 1170,
      447, 1170,  452, 1170, 1170,  442, 1170,  441,  453,  445,
     1170,  459,  450, 1170, 1170,  446, 1170, 1170, 1170, 1170,
     1170,  462, 1170,  455, 1170,  451,  472,  454, 1170,  456,
      457,  461,  466,  464,  458,  460, 1170, 1170, 1170, 1170,
      463, 1170,  468, 1170,  470, 1170, 1170, 1170,  467,  473,
      465,  477, 1170,  469,  476, 1170, 1170, 1170,  478, 1170,
      483, 1170, 1170, 1170, 1170, 1170,  479, 1170,  474, 1170,
      497,  498,  481,  482, 1170,  480,  494,  495,  486,  488,
      487, 1170,  489,  491, 1170,  493,  490,  485,  500, 1170,

      484, 1170, 1170, 1170, 1170,  492, 1170,  499, 1170,  511,
      512, 1170, 1170, 1170,  501, 1170,  514, 1170, 1170, 1170,
     1170,  503,  502,  507, 1170,  510,  513,  516,  528, 1170,
     1170,  508,  518,  519, 1170,  509,  521,  517,  526,  523,
      527, 1170, 1170,  532, 1170,  520,  533, 1170, 1170,  522,
     1170,  524,  525,  529,  531,  534, 1170,  536,  535, 1170,
     1170, 1170, 1170, 1170,  530,  538, 1170, 1170, 1170,  540,
     1170, 1170,  544,  547,  541,  542, 1170, 1170,  543,  539,
     1170, 1170,  545, 1170, 1170, 1170,  549, 1170, 1170, 1170,
      551,  546,  548, 1170,  553, 1170,  554,  565,  556,  557,

     1170,  558,  555,  550,  552,  560,  564,  559,  561, 1170,
      566, 1170,  563, 1170,  571,  573, 1170,  567, 1170,  574,
     1170, 1170, 1170,  569, 1170,  570,  568, 1170,  572, 1170,
     1170, 1170,  577, 1170, 1170, 1170,  576,  578, 1170, 1170,
     1170, 1170,  579,  582, 1170,  581,  583,  593,  594,  585,
      575, 1170,  586, 1170,  580,  591,  588, 1170, 1170,  595,
     1170, 1170, 1170, 1170, 1170,  584, 1170,  592, 1170, 1170,
      587, 1170, 1170, 1170,  598,  596,  602, 1170, 1170,  603,
     1170,  606, 1170, 1170, 1170,  597, 1170,  604,  605,  609,
      599,  615,  600,  601,  611,  607, 1170,  608, 1170, 1170,

      610,  618, 1170,  616, 1170, 1170, 1170, 1170, 1170, 1170,
      619, 1170, 1170,  623,  617,  624,  625, 1170,  626,  633,
     1170,  632, 1170, 1170,  641,  646,  635,  638,  647,  649,
      634,  630,  636, 1170, 1170, 1170,  648,  640, 1170,  644,
      651, 1170,  637,  643, 1170, 1170, 1170, 1170, 1170, 1170,
      645, 1170, 1170, 1170, 1170, 1170, 1170, 1170,  798,  656,
      799, 1170, 1170,  653,  654, 1170, 1170,  660, 1170,  666,
      650,  657,  652,  667,  668,  655,  665,  669, 1170,  658,
     1170, 1170,  661,  670, 1170,  659, 1170,  662, 1170, 1170,
     1170,  663, 1170,  671,  672, 1170,  681, 1170,  664,  675,

     1170,  674,  676,  677,  678, 1170, 1170,  686,  673, 1170,
      682, 1170, 1170,  685, 1170, 1170, 1170,  683, 1170, 1170,
      691,  684, 1170,  680, 1170,  692,  688, 1170, 1170,  693,
     1170,  687,  689,  697,  703,  698,  694, 1170,  700,  695,
     1170,  699, 1170,  696,  705,  701,  702,  707, 1170,  708,
     1170, 1170,  706,  704,  709, 1170, 1170, 1170, 1170, 1170,
     1170, 1170, 1170,  712, 1170,  711, 1170, 1170, 1170, 1170,
      721, 1170, 1170,  723, 1170, 1170, 1170,  710,  715,  726,
      722, 1170,  724, 1170,  732,  729,  716, 1170,  725,  719,
      733, 1170,  727, 1170,  720,  731,  730, 1170,  735,  728,

      736, 1170, 1170,  738,  737, 1170, 1170,  739, 1170,  743,
     1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170,
     1170, 1170,  749,  744,  745,  752,  751,  754, 1170,  762,
      759,  753,  761, 1170,  755, 1170,  763, 1170,  756, 1170,
      770,  767,  765, 1170,  757,  764, 1170, 1170,  768, 1170,
      766,  760, 1170, 1170, 1170, 1170,  769, 1170, 1170,  775,
      773,  771, 1170,  774, 1170, 1170, 1170, 1170, 1170,  772,
     1170, 1170,  776, 1170,  778,  777,  779, 1170,  780,  782,
     1170, 1170,  786, 1170,  785, 1170,  781, 1170,  783,  788,
      791, 1170, 1170, 1170, 1170,  789,  795,  794,  784,  787,

      792, 1170, 1170, 1170,  790,  797, 1170, 1170, 1170, 1170,
      802,  796,  793, 1170, 1170,  800, 1170,  801,  803, 1170,
      812, 1170, 1170,  805,  808,  804,  809, 1170, 1170, 1170,
     1170, 1170, 1170,  807, 1170,  806, 1170,  813,  816,  810,
      811, 1170, 1170, 1170,  818, 1170,  814,  815, 1170, 1170,
     1170, 1170, 1170,  823, 1170,  817,  820, 1170,  827,  826,
      828,  822,  821,  825,  829,  824,  830, 1170,  842,  834,
      832, 1170,  836,  831,  844, 1170, 1170, 1170, 1170,  835,
     1170,  838, 1170, 1170,  845, 1170, 1170, 1170,  857,  847,
     1170, 1170, 1170, 1170, 1170, 1170, 1170,  851, 1170, 1170,

      856,  846, 1170, 1170,  860, 1170,  859,  852, 1170,  850,
      853, 1170, 1170,  858,  849,  854,  861, 1170,  863,  864,
     1170, 1170,  855, 1170, 1170,  865,  870, 1170,  866,  867,
      872,  862,  868,  869, 1170, 1170, 1170, 1170,  871,  873,
      875,  874, 1170, 1170,  876, 1170, 1170, 1170, 1170, 1170,
      878,  877, 1170, 1170, 1170,  881, 1170, 1170,  882,  884,
      885, 1170,  880, 1170, 1170, 1170, 1170,  879, 1170,  883,
      892,  889,  886,  893, 1170,  891,  896,  899, 1170, 1170,
      894,  898, 1170,  895, 1170, 1170,  890,  901, 1170, 1170,
     1170, 1170, 1170, 1170, 1170,  903, 1170, 1170,  897,  900,

      902,  905,  907, 1170,  909,  904,  910,  908,  913,  912,
      914, 1170, 1170, 1170,  906, 1170, 1170,  911, 1170, 1170,
      915,  919, 1170, 1170, 1170, 1170, 1170,  916,  918,  920,
     1170,  927, 1170, 1170, 1170, 1170,  929,  942, 1170,  944,
      940, 1170,  983, 1170,  922,  945, 1170,  925, 1170,  939,
      928,  931,  932,  933,  934,  935,  936,  937,  938,  941,
      946, 1170, 1170,  943, 1170, 1170, 1170,  950,  954,  955,
      951, 1170,  952, 1170,  947, 1170,  948,  949, 1170, 1170,
     1170, 1170, 1170,  953, 1170, 1170, 1170, 1170,  957, 1170,
     1170, 1170,  956, 1170,  960, 1170, 1170,  962,  963,  965,

      961,  967, 1170,  971, 1170,  958,  968,  972,  959,  966,
     1170,  964, 1170, 1170,  973, 1170,  974, 1170, 1170,  975,
     1170, 1170,  976, 1170,  977,  981, 1170, 1170, 1170, 1170,
     1170,  978, 1170, 1170,  979,  985,  980, 1170, 1170,  989,
     1170, 1170,  988,  982, 1170,  984,  992,  990, 1170,  994,
      997,  986, 1170,  987, 1170, 1170, 1001, 1170, 1170, 1170,
     1170,  991, 1170, 1170, 1170, 1003, 1170, 1170, 1170,  998,
     1010,  999, 1002, 1170, 1170, 1170, 1004, 1006, 1007, 1005,
     1008, 1009, 1012, 1011, 1013, 1170, 1170, 1170, 1170, 1015,
     1017, 1014, 1018, 1170, 1170, 1016, 1170, 1019, 1170, 1170,

     1025, 1020, 1170, 1170, 1170, 1170, 1170, 1170, 1021, 1022,
     1024, 1170, 1027, 1170, 1023, 1029, 1031, 1028, 1026, 1170,
     1042, 1043, 1030, 1170, 1170, 1032, 1170, 1170, 1038, 1170,
     1170, 1170, 1170, 1170, 1170, 1170, 1034, 1170, 1033, 1035,
     1036, 1170, 1041, 1045, 1170, 1037, 1170, 1039, 1049, 1050,
     1047, 1052, 1057, 1046, 1044, 1053, 1048, 1170, 1170, 1170,
     1054, 1170, 1170, 1170, 1055, 1170, 1170, 1051, 1170, 1056,
     1170, 1061, 1170, 1170, 1170, 1170, 1058, 1067, 1059, 1060,
     1062, 1170, 1063, 1066, 1170, 1170, 1170, 1064, 1170, 1170,
     1170, 1065, 1069, 1170, 1074, 1170, 1071, 1170, 1078, 1170,

     1170, 1077, 1068, 1170, 1070, 1170, 1080, 1170, 1170, 1072,
     1170, 1170, 1073, 1079, 1085, 1087, 1088, 1086, 1170, 1084,
     1170, 1089, 1170, 1170, 1170, 1170, 1081, 1082, 1170, 1170,
     1083, 1170, 1170, 1170, 1093, 1095, 1170, 1097, 1170, 1170,
     1170, 1094, 1090, 1102, 1091, 1092, 1105, 1170, 1108, 1170,
     1109, 1100, 1099, 1170, 1096, 1170, 1098, 1101, 1170, 1106,
     1107, 1170, 1170, 1112, 1110, 1170, 1111, 1170, 1170, 1170,
     1170, 1170, 1116, 1170, 1170, 1170, 1114, 1170, 1170, 1170,
     1170, 1170, 1120, 1170, 1113, 1117, 1121, 1130, 1127, 1126,
     1115, 1118, 1125, 1131, 1119, 1137, 1132, 1133, 1134, 1135,

     1138, 1136, 1170, 1170, 1122, 1129, 1170, 1128, 1170, 1170,
     1140, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170,
     1142, 1170, 1170, 1139, 1170, 1170, 1147, 1148, 1170, 1143,
     1170, 1170, 1144, 1149, 1153, 1145, 1146, 1170, 1152, 1154,
     1170, 1155, 1170, 1170, 1150, 1170, 1156, 1151, 1160, 1157,
     1166, 1167, 1159, 1168, 1169, 1161, 1158, 1170, 1170, 1170,
     1170, 1170, 1170, 1170, 1170, 1170, 1165, 1141, 1170, 1170,
     1170, 1170, 1124, 1123, 1170, 1170, 1163, 1162, 1170, 1164,
       59,   59,  164,  164,  164,  162,  162,  162, 1170, 1170,
     1170, 1170, 1170, 1170, 1104, 1103, 1170, 1170, 1170, 1170,

     1170, 1170, 1076, 1075, 1170, 1170, 1170, 1170, 1170, 1170,
     1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1040, 1170,
     1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170,
     1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170,
     1170, 1000, 1170,  996,  995, 1170, 1170, 1170,  993, 1170,
     1170, 1170, 1170, 1170, 1170,  970,  969, 1170, 1170, 1170,
     1170, 1170, 1170, 1170,  930, 1170,  926,  924,  923,  921,
      917, 1170, 1170, 1170, 1170,  888,  887, 1170,  848, 1170,
     1170, 1170,  843,  841,  840,  839, 1170, 1170,  837, 1170,
     1170,  833, 1170, 1170, 1170, 1170, 1170,  819, 1170, 1170,

     1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170,  758, 1170,
     1170, 1170,  750,  748,  747,  746, 1170,  742,  741,  740,
      734, 1170, 1170, 1170, 1170,  718,  717,  714,  713,  690,
      679, 1170,  642, 1170, 1170,  631,  629,  628,  627,  622,
      621,  620,  614, 1170,  590,  589, 1170,  562, 1170,  515,
     1170, 1170,  506,  505,  504, 1170,  496, 1170, 1170, 1170,
      475, 1170, 1170, 1170,  471, 1170, 1170, 1170, 1170, 1170,
      443, 1170, 1170, 1170,  380, 1170, 1170, 1170, 1170, 1170,
     1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170,  163, 1170,
     1170,  160,   58,  159,  137,  115,  112, 1170,   68,   67,

       58, 1170,    3, 1170, 1170, 1170, 1170, 1170, 1170, 1170,
     1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170,
     1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170,
     1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170,
     1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170,
     1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170,
     1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170,
     1170, 1170, 1170
    } ;

static yyconst flex_int16_t yy_chk[2474] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        5,   18,   20,    5,    8,    8,   18,    8,    8,    8,
        8,   41,    8,   78,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,   41,   50,  495,

       78,   20,    8,    8,    8,   50,    8,  495,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   34,   75,   34, 1171,
       34,   19,   38,   19,   34,   64,   38,   34,   39,   19,
       19,   19,   19,   19,   19,   35,   44,   39,   39,   35,
       57,  524,   81,   57,   80,   90,   35,   75,   60,   79,
       44,   70,   19,   26,   64,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   60,

       79,   70,   81,   26,   26,   26,   80,   26,   90,  524,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   88,   72,   32,
     1169,   32,   27, 1168,   74,   72,  283,   84,  103,   45,
       27,   27,   27,   27,   27,   27,   32,   32,   88,   45,
       32,   32,   45,   33,   74,   32,   45,   37,   32,   33,
       33,   85,  103,   33,   84,   37,   33,   32,   36,   37,
       36,   72,  283,   36,   86,   37,   33,   37,   46,   36,

       46,   36,   43,   43,   43,   48,   46,   36,   85,   46,
       46,   36,   43,   46,   43,   46,   46,   51,   46,   51,
       43,   82,   86,   48,   51,   76,   87,   48, 1167,   95,
      494,   76,  117,   82,   51,   94,  494,  117, 1166,   77,
       89,   48,   49,   49,   49,   77,   49,   49,   94,   76,
       49,   91,   82,   87,   49,   49,   83,   89,   49,   95,
      102,   49,   49,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   83,   63,  100,   77,   91,
       92,   91,   83,   96,   93,  102,  104,  113,   99,   96,
       63,   63,   63,   63,   63,  106,   98,  100,   63,   93,

       63,   63,   97,   99,   92,  105,  120,   96,   97,   98,
      107,   92,  108,  101,   92,  286,  286, 1165,  104,  105,
      118,  106,  120,  107,  113,  114,  116,   98,  101,   63,
       63,   63,   63,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   97,  109,  101,  108,  110,  111,  112,
       65,  115,  118,  114,  121,  119,  109,  116,  124,  130,
      110,  125,  112,  111,  115,  122,  115,  131,  126,  111,
      119,  127,  128,  129,  232,  130,  124,  133,  121,   65,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
      122,  122,  131,  125,  129,   66,  126,  127,  135,  232,

      133,  137,  128,   66,   66,   66,   66,   66,   66,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
      142,  135,  134,  135,   73,  123,  132,  136,  139,  137,
      140,  141,   73,   73,   73,   73,   73,   73,  123,  134,
      142,  132,  143,  138,  141,  136,  144,  147,  138,  134,
      151,  123, 1164,  150,  146,  123,  138,  148,  149,  132,
      147,  140,  145,  139,  140,  145,  145,  144,  138,  146,
      148,  149,  152,  151,  143,  145,  150,  150,  153,  154,
      147,  155,  156,  157,  158,  152,  159,  148,  191,  161,
      169,  170,  171,  176, 1163,  172,  170,  422,  158,  157,

      156,  158,  170,  169,  422,  191,  173,  154,  155,  161,
      172,  153,  176,  177,  159,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  164,  164,  171,  164,  181,
      190,  174,  184,  177,  167,  168,  173,  180,  178,  193,
      183,  181,  164,  164,  164,  164,  164,  167,  168,  179,
      164,  178,  164,  164,  174,  183,  185,  187,  180,  167,
      168,  188,  179,  179,  184,  189,  192,  190,  179,  185,
      187,  193,  179,  194,  195,  196,  188,  197,  198,  192,
      199,  164,  164,  164,  164,  200,  200,  200,  200,  202,
      196,  195,  206,  203,  194,  204,  189,  205,  207,  209,

      211,  197,  210,  212,  215,  214,  213,  216,  217,  198,
      203,  199,  204,  206,  205,  207,  211,  210,  218,  202,
      212,  213,  219,  209,  214,  220,  227,  217,  215,  221,
      224,  226,  225,  228,  219,  225,  230,  229,  231,  216,
      233,  220,  234,  224,  235,  225,  236,  237,  226,  218,
      228,  231,  221,  229,  234,  238,  242,  241,  227,  244,
      245,  265,  246,  236,  237,  235,  243,  257,  231,  230,
      248,  233,  238,  241,  242,  252,  248,  249,  243,  237,
      246,  251,  231,  254,  243,  250,  250,  255,  248,  263,
      244,  252,  245,  265,  251,  258,  248,  261,  249,  262,

      254,  266,  257,  264,  264,  267,  252,  269,  258,  268,
      261,  264,  262,  270,  255,  271,  272,  275,  267,  250,
      269,  263,  263,  273,  274,  279,  290,  276,  280,  285,
      289, 1160,  269,  271,  270,  266,  291,  268,  269,  276,
      280,  274,  288,  290,  275,  292,  272,  295,  272,  294,
      289,  269,  297,  291,  273,  279,  282,  282,  282,  282,
      284,  284,  284,  284,  293,  285,  287,  287,  287,  287,
      296,  292,  288,  298,  294,  300,  293,  299,  293,  301,
      295,  293,  297,  302,  303,  305,  293,  306,  309,  310,
      298,  311,  300,  312,  296,  302,  299,  313,  314,  315,

      321,  316,  301,  322,  302,  312,  311,  302,  305,  327,
      310,  323,  315,  328,  324,  303,  330,  302,  316,  306,
      325,  327,  313,  331,  329,  309,  332,  333,  336,  337,
      335,  330,  339,  322,  340,  314,  342,  321,  344,  323,
      324,  329,  335,  332,  325,  328,  347,  350,  351,  342,
      331,  352,  337,  353,  340,  355,  356,  359,  336,  344,
      333,  351,  357,  339,  350,  360,  361,  362,  352,  363,
      359,  365,  364,  366,  374,  367,  353,  375,  347,  368,
      373,  373,  356,  357,  376,  355,  369,  369,  362,  364,
      363,  378,  365,  367,  369,  368,  366,  361,  375,  377,

      360,  384,  383,  387,  390,  367,  392,  374,  388,  389,
      389,  393,  394,  395,  376,  396,  390,  397,  398,  399,
      401,  378,  377,  383,  402,  388,  389,  392,  403,  404,
      421,  384,  393,  394,  423,  387,  396,  392,  402,  398,
      402,  403,  424,  409,  425,  395,  409,  426,  427,  397,
      409,  399,  401,  403,  404,  414,  428,  421,  414,  429,
      431,  430,  414,  432,  403,  423,  433,  434,  435,  425,
      436,  437,  427,  430,  426,  426,  439,  442,  426,  424,
      440,  444,  428,  438,  447,  446,  432,  454,  441,  445,
      434,  429,  431,  455,  435,  458,  436,  446,  438,  438,

      448,  439,  437,  433,  434,  441,  445,  440,  442,  449,
      447,  450,  444,  451,  452,  454,  453,  448,  456,  455,
      457,  460,  459,  450,  461,  451,  449,  452,  453,  463,
      465,  464,  458,  466,  467,  468,  457,  459,  469,  470,
      474,  473,  460,  464,  476,  463,  465,  475,  475,  467,
      456,  477,  468,  478,  461,  473,  470,  479,  481,  476,
      482,  483,  485,  486,  484,  466,  488,  474,  491,  487,
      469,  489,  490,  492,  479,  477,  484,  500,  499,  485,
      501,  488,  493,  503,  502,  478,  507,  486,  487,  491,
      481,  499,  482,  483,  493,  489,  514,  490,  508,  509,

      492,  502,  517,  500,  510,  516,  518,  519,  521,  522,
      503,  527,  523,  507,  501,  508,  509,  526,  510,  517,
      529,  516,  530,  531,  527,  532,  519,  523,  533,  535,
      518,  514,  521,  532,  533,  535,  534,  526,  536,  530,
      537,  538,  522,  529,  534,  539,  542,  540,  537,  541,
      531,  543,  544,  545,  546, 1158,  548,  549,  690,  542,
      690,  550,  551,  539,  540,  552,  564,  546,  547,  549,
      536,  543,  538,  550,  551,  541,  548,  552,  554,  544,
      553,  556,  547,  552,  557,  545,  558,  547,  560,  559,
      563,  547,  561,  553,  554,  567,  564,  565,  547,  558,

      566,  557,  559,  560,  561,  568,  572,  567,  556,  569,
      565,  573,  570,  566,  575,  577,  574,  565,  578,  579,
      572,  565,  580,  563,  576,  572,  569,  581,  584,  572,
      583,  568,  570,  574,  580,  575,  572,  582,  577,  572,
      586,  576,  585,  573,  581,  578,  579,  583,  587,  584,
      588,  591,  582,  580,  585,  592,  595,  598,  599,  600,
      601,  602,  604,  588,  603,  587,  605,  606,  607,  608,
      599,  609,  610,  601,  615,  619,  611,  586,  591,  604,
      600,  616,  602,  623,  610,  607,  592,  617,  603,  595,
      611,  618,  605,  625,  598,  609,  608,  626,  615,  606,

      616,  630,  633,  618,  617,  635,  637,  619,  634,  623,
      636,  639,  641,  643,  644,  653,  645,  651,  655,  654,
      656,  660,  630,  625,  626,  634,  633,  636,  657,  651,
      643,  635,  645,  658,  637,  659,  653,  661,  639,  662,
      660,  657,  655,  663,  641,  654,  664,  665,  658,  666,
      656,  644,  667,  668,  671,  669,  659,  670,  672,  665,
      663,  661,  673,  664,  674,  675,  676,  677,  678,  662,
      680,  682,  666,  684,  668,  667,  669,  683,  670,  672,
      685,  686,  676,  687,  675,  688,  671,  692,  673,  678,
      683,  691,  689,  693,  695,  680,  687,  686,  674,  677,

      684,  694,  696,  697,  682,  689,  698,  703,  699,  700,
      693,  688,  685,  701,  702,  691,  704,  692,  694,  706,
      703,  709,  708,  696,  699,  695,  700,  711,  712,  715,
      716,  719,  721,  698,  724,  697,  722,  704,  709,  701,
      702,  725,  732,  728,  712,  736,  706,  708,  730,  731,
      733,  738,  749,  721,  745,  711,  715,  751,  725,  724,
      728,  719,  716,  722,  730,  721,  731,  737,  749,  736,
      733,  753,  738,  732,  751,  756,  757,  759,  760,  737,
      761,  745,  762,  764,  753,  765,  763,  766,  767,  757,
      768,  769,  770,  771,  772,  773,  767,  761,  778,  779,

      766,  756,  780,  774,  770,  781,  769,  762,  775,  760,
      763,  776,  777,  768,  759,  764,  771,  782,  773,  774,
      784,  783,  765,  785,  787,  775,  780,  786,  776,  777,
      782,  772,  778,  779,  788,  790,  791,  793,  781,  783,
      785,  784,  792,  794,  786,  795,  797,  796,  800,  801,
      788,  787,  802,  805,  803,  792,  804,  807,  793,  795,
      796,  809,  791,  810,  808,  811,  812,  790,  813,  794,
      803,  800,  797,  804,  814,  802,  808,  811,  815,  816,
      805,  810,  820,  807,  818,  824,  801,  813,  823,  821,
      822,  825,  831,  827,  828,  815,  826,  835,  809,  812,

      814,  818,  821,  829,  823,  816,  824,  822,  827,  826,
      828,  834,  838,  836,  820,  842,  844,  825,  845,  846,
      829,  835,  852,  853,  902,  857,  859,  831,  834,  836,
      860,  844,  858,  866,  856,  867,  846,  857,  871,  859,
      853,  865,  902,  872,  838,  860, 1149,  842,  861,  852,
      845,  849,  849,  849,  849,  849,  849,  849,  849,  856,
      861,  849,  862,  858,  863,  864,  870,  865,  871,  872,
      866,  873,  867,  874,  862,  876,  863,  864,  877,  878,
      879,  880,  881,  870,  882,  884,  883,  885,  874,  893,
      886,  889,  873,  900,  878,  890,  894,  880,  881,  883,

      879,  885,  891,  889,  892,  876,  886,  890,  877,  884,
      896,  882,  895,  898,  891,  899,  892,  901,  903,  893,
      904,  905,  894,  907,  895,  900,  910,  911,  912,  913,
      925,  896,  919,  916,  898,  904,  899,  927,  928,  911,
      939,  941,  910,  901,  944,  903,  916,  912,  942,  919,
      925,  905,  945,  907,  946,  947,  939,  950,  949,  948,
      959,  913,  960,  956,  964,  942,  954,  957,  962,  927,
      950,  928,  941,  967,  968,  966,  944,  946,  947,  945,
      948,  949,  956,  954,  957,  971,  972,  974,  975,  960,
      964,  959,  966,  973,  977,  962,  978,  967,  979,  980,

      975,  968,  981,  982,  983,  984,  985,  987,  971,  972,
      974,  990,  978,  989,  973,  980,  982,  979,  977,  992,
      996,  996,  981,  994,  999,  983, 1001, 1003,  990, 1004,
     1005, 1006, 1007, 1008, 1009, 1019,  985, 1023,  984,  987,
      989, 1010,  994, 1001, 1015,  989, 1016,  992, 1006, 1007,
     1004, 1009, 1019, 1003,  999, 1010, 1005, 1017, 1020, 1034,
     1015, 1021, 1022, 1024, 1016, 1027, 1026, 1008, 1025, 1017,
     1031, 1023, 1033, 1032, 1036, 1037, 1020, 1027, 1021, 1022,
     1024, 1041, 1025, 1026, 1044, 1046, 1047, 1025, 1048, 1049,
     1050, 1025, 1032, 1052, 1041, 1053, 1034, 1054, 1046, 1055,

     1056, 1044, 1031, 1058, 1033, 1059, 1048, 1060, 1062, 1036,
     1063, 1064, 1037, 1047, 1054, 1056, 1056, 1055, 1065, 1053,
     1066, 1058, 1067, 1068, 1071, 1072, 1049, 1050, 1074, 1073,
     1052, 1084, 1078, 1079, 1063, 1065, 1087, 1067, 1085, 1080,
     1093, 1064, 1059, 1074, 1060, 1062, 1078, 1094, 1084, 1088,
     1085, 1072, 1071, 1095, 1066, 1096, 1068, 1073, 1097, 1079,
     1080, 1098, 1099, 1093, 1087, 1100, 1088, 1102, 1105, 1101,
     1107, 1111, 1096, 1109, 1110, 1112, 1095, 1116, 1142, 1117,
     1120, 1113, 1100, 1118, 1094, 1097, 1101, 1112, 1109, 1107,
     1095, 1098, 1105, 1113, 1099, 1117, 1114, 1114, 1115, 1115,

     1118, 1116, 1119, 1125, 1102, 1111, 1114, 1110, 1115, 1127,
     1120, 1129, 1130, 1131, 1132, 1133, 1137, 1139, 1154, 1144,
     1125, 1143, 1145, 1119, 1146, 1147, 1132, 1133, 1148, 1127,
     1150, 1153, 1129, 1137, 1144, 1130, 1131, 1152, 1143, 1145,
     1155, 1146, 1156, 1159, 1139, 1157, 1147, 1141, 1153, 1148,
     1161, 1161, 1152, 1162, 1162, 1154, 1150, 1140, 1138, 1136,
     1161, 1135, 1134, 1162, 1128, 1126, 1159, 1124, 1122, 1121,
     1108, 1106, 1104, 1103, 1092, 1091, 1156, 1155, 1090, 1157,
     1172, 1172, 1173, 1173, 1173, 1174, 1174, 1174, 1089, 1086,
     1083, 1082, 1081, 1077, 1076, 1075, 1070, 1069, 1061, 1057,

     1051, 1045, 1043, 1042, 1039, 1038, 1035, 1030, 1029, 1028,
     1018, 1014, 1013, 1012, 1011, 1002,  998,  997,  993,  991,
      988,  986,  976,  965,  963,  961,  958,  955,  953,  952,
      951,  943,  940,  938,  937,  936,  935,  934,  933,  932,
      931,  930,  929,  924,  923,  922,  920,  918,  917,  915,
      914,  909,  908,  906,  897,  888,  887,  875,  869,  868,
      855,  854,  851,  850,  848,  847,  843,  841,  840,  837,
      833,  832,  830,  817,  806,  799,  798,  789,  758,  755,
      754,  752,  750,  748,  747,  746,  744,  743,  740,  739,
      735,  734,  729,  727,  726,  723,  720,  714,  710,  707,

      705,  681,  652,  650,  649,  648,  647,  646,  642,  640,
      638,  632,  631,  629,  628,  627,  624,  622,  621,  620,
      614,  613,  612,  597,  596,  594,  593,  590,  589,  571,
      562,  555,  528,  525,  520,  515,  513,  512,  511,  506,
      505,  504,  496,  480,  472,  471,  462,  443,  400,  391,
      386,  385,  382,  381,  380,  379,  372,  358,  354,  349,
      348,  346,  345,  343,  341,  338,  334,  326,  308,  307,
      304,  281,  278,  277,  260,  259,  256,  253,  247,  240,
      239,  223,  222,  208,  201,  186,  182,  175,  162,   71,
       69,   59,   58,   52,   47,   42,   40,   31,   25,   23,

        6,    3, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170,
     1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170,
     1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170,
     1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170,
     1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170,
     1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170,
     1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170,
     1170, 1170, 1170
    } ;

static yyconst flex_int16_t yy_rule_linenum[262] =
    {   0,
       44,   45,   47,   48,   49,   50,   51,   52,   53,   54,
       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,   67,   68,   69,   70,   71,   72,   74,   75,
       76,   77,   78,   79,   80,   81,   82,   83,   84,   85,
       86,   87,   88,   89,   90,   91,   92,   93,   94,   95,
       96,   97,   98,   99,  100,  101,  102,  103,  104,  105,
      106,  108,  109,  110,  111,  112,  113,  115,  117,  118,
      119,  121,  122,  123,  124,  125,  127,  128,  129,  130,
      132,  133,  134,  135,  136,  137,  138,  139,  141,  142,
      143,  144,  145,  146,  147,  148,  149,  150,  151,  152,

      154,  155,  156,  157,  158,  159,  160,  161,  162,  163,
      164,  165,  166,  167,  168,  169,  170,  171,  172,  173,
      174,  175,  176,  177,  178,  179,  180,  182,  183,  184,
      185,  186,  187,  188,  189,  190,  191,  192,  193,  194,
      195,  196,  197,  198,  199,  200,  201,  202,  203,  204,
      206,  207,  208,  209,  210,  211,  212,  213,  214,  215,
      216,  217,  218,  219,  220,  221,  222,  223,  224,  225,
      226,  227,  229,  230,  231,  232,  233,  234,  235,  236,
      237,  238,  239,  240,  241,  242,  243,  244,  245,  246,
      247,  248,  249,  250,  251,  252,  253,  255,  256,  257,

      258,  259,  261,  262,  263,  264,  265,  267,  268,  269,
      271,  273,  274,  275,  276,  277,  278,  279,  281,  283,
      284,  285,  286,  287,  288,  289,  291,  292,  293,  295,
      296,  297,  299,  300,  301,  302,  303,  304,  305,  306,
      307,  308,  309,  311,  312,  313,  314,  315,  316,  317,
      318,  319,  320,  321,  323,  324,  325,  327,  328,  329,
      330
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "../s/bif.l"
/******************************************************************************
* Copyright 2015-2022 Xilinx, Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
******************************************************************************/
/* This is the lexer/flexer input file, that tokenizes the BIF file */
/* Run the bif.y file first through bison to generate the bif.tab.h file, which is included herein */
/* Then run this file through flex to generate the bif.yy.c source code */
#line 22 "../s/bif.l"
 #include <stdio.h>
 #include "bifscanner.h"
 #include "bif.tab.hpp"
 #include "authentication.h"
 #include "encryption.h"
 typedef BIF::BisonParser::token tok;
/* see http://www.lysator.liu.se/c/ANSI-C-grammar-l.html */
#line 35 "../s/bif.l"
     # define YY_USER_ACTION  yylloc->columns (yyleng);
#line 1481 "../bisonflex/bif.yy.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#include <unistd.h>
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */
/* %if-bison-bridge */
/* %endif */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */
/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define ECHO LexerOutput( yytext, yyleng )
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
\
/* %if-c++-only C++ definition \ */\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#define YY_FATAL_ERROR(msg) LexerError( msg )
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define YY_DECL int yyFlexLexer::yylex()
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
/* %% [7.0] user's declarations go here */
#line 38 "../s/bif.l"



   yylloc->step ();


#line 1645 "../bisonflex/bif.yy.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyin = & std::cin;
/* %endif */

		if ( ! yyout )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyout = & std::cout;
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1171 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1170 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				std::cerr << "--scanner backing up\n";
			else if ( yy_act < 262 )
				std::cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
				         "(\"" << yytext << "\")\n";
			else if ( yy_act == 262 )
				std::cerr << "--accepting default rule (\"" << yytext << "\")\n";
			else if ( yy_act == 263 )
				std::cerr << "--(end of buffer or a NUL)\n";
			else
				std::cerr << "--EOF (start condition " << YY_START << ")\n";
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 44 "../s/bif.l"
{ comment(); }
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 45 "../s/bif.l"
yylloc->lines (1); yylloc->step ();
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 47 "../s/bif.l"
return tok::BOOTLOADER;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 48 "../s/bif.l"
return tok::PRESIGN;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 49 "../s/bif.l"
return tok::UDF_DATA;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 50 "../s/bif.l"
return tok::XIP_MODE;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 51 "../s/bif.l"
return tok::BOOT;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 52 "../s/bif.l"
return tok::USER;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 53 "../s/bif.l"
return tok::STATIC;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 54 "../s/bif.l"
return tok::NOAUTOSTART;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 55 "../s/bif.l"
return tok::MULTIBOOT;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 56 "../s/bif.l"
return tok::PROTECTED;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 57 "../s/bif.l"
return tok::ALIGNMENT;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 58 "../s/bif.l"
return tok::EARLY_HANDOFF;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 59 "../s/bif.l"
return tok::DELAY_HANDOFF;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 60 "../s/bif.l"
return tok::DELAY_LOAD;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 61 "../s/bif.l"
return tok::DELAY_AUTH;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 62 "../s/bif.l"
return tok::HIVEC;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 63 "../s/bif.l"
return tok::BLOCKS;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 64 "../s/bif.l"
return tok::AUTHBLOCKS;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 65 "../s/bif.l"
return tok::BIGENDIAN;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 66 "../s/bif.l"
return tok::A32_MODE;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 67 "../s/bif.l"
return tok::PARTITION;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 68 "../s/bif.l"
return tok::IMAGE;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 69 "../s/bif.l"
return tok::METAHEADER;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 70 "../s/bif.l"
return tok::BIF_SECTION;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 71 "../s/bif.l"
return tok::LOCKSTEP;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 72 "../s/bif.l"
return tok::INCLUDE;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 74 "../s/bif.l"
yylval->number = tok::OFFSET;                   return tok::OFFSET;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 75 "../s/bif.l"
yylval->number = tok::RESERVE_LEGACY;           return tok::RESERVE_LEGACY;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 76 "../s/bif.l"
yylval->number = tok::RESERVE;                  return tok::RESERVE;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 77 "../s/bif.l"
yylval->number = tok::LOAD;                     return tok::LOAD;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 78 "../s/bif.l"
yylval->number = tok::COPY;                     return tok::COPY;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 79 "../s/bif.l"
yylval->number = tok::STARTUP;                  return tok::STARTUP;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 80 "../s/bif.l"
yylval->number = tok::PARTITION_NUM;            return tok::PARTITION_NUM;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 81 "../s/bif.l"
yylval->number = tok::INIT;                     return tok::INIT;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 82 "../s/bif.l"
yylval->number = tok::UDF_BH;                   return tok::UDF_BH;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 83 "../s/bif.l"
yylval->number = tok::AES_KEY_FILE;             return tok::AES_KEY_FILE;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 84 "../s/bif.l"
yylval->number = tok::PPK_FILE;                 return tok::PPK_FILE;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 85 "../s/bif.l"
yylval->number = tok::PSK_FILE;                 return tok::PSK_FILE;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 86 "../s/bif.l"
yylval->number = tok::SPK_FILE;                 return tok::SPK_FILE;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 87 "../s/bif.l"
yylval->number = tok::SSK_FILE;                 return tok::SSK_FILE;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 88 "../s/bif.l"
yylval->number = tok::SPK_SIGNATURE_FILE;       return tok::SPK_SIGNATURE_FILE;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 89 "../s/bif.l"
yylval->number = tok::BH_SIGNATURE_FILE;        return tok::BH_SIGNATURE_FILE;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 90 "../s/bif.l"
yylval->number = tok::HEADER_SIGNATURE_FILE;    return tok::HEADER_SIGNATURE_FILE;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 91 "../s/bif.l"
yylval->number = tok::BOOTVECTORS;              return tok::BOOTVECTORS;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 92 "../s/bif.l"
yylval->number = tok::BOOTIMAGE;                return tok::BOOTIMAGE;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 93 "../s/bif.l"
yylval->number = tok::PARENT_ID;                return tok::PARENT_ID; 
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 94 "../s/bif.l"
yylval->number = tok::ID_CODE;                  return tok::ID_CODE;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 95 "../s/bif.l"
yylval->number = tok::EXT_ID_CODE;              return tok::EXT_ID_CODE;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 96 "../s/bif.l"
yylval->number = tok::ID;                       return tok::ID; 
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 97 "../s/bif.l"
yylval->number = tok::NAME;                     return tok::NAME; 
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 98 "../s/bif.l"
yylval->number = tok::PFILE;                    return tok::PFILE;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 99 "../s/bif.l"
yylval->number = tok::BH_KEY_FILE;              return tok::BH_KEY_FILE;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 100 "../s/bif.l"
yylval->number = tok::PUF_HELPER_FILE;          return tok::PUF_HELPER_FILE;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 101 "../s/bif.l"
yylval->number = tok::PMUFW_IMAGE;              return tok::PMUFW_IMAGE;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 102 "../s/bif.l"
yylval->number = tok::PMCDATA;                  return tok::PMCDATA;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 103 "../s/bif.l"
yylval->number = tok::BH_KEY_IV;                return tok::BH_KEY_IV;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 104 "../s/bif.l"
yylval->number = tok::UNIQUE_ID;                return tok::UNIQUE_ID;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 105 "../s/bif.l"
yylval->number = tok::PARENT_UNIQUE_ID;         return tok::PARENT_UNIQUE_ID;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 106 "../s/bif.l"
yylval->number = tok::FUNCTION_ID;              return tok::FUNCTION_ID;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 108 "../s/bif.l"
yylval->number = tok::BBRAM_KEK_IV;             return tok::BBRAM_KEK_IV;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 109 "../s/bif.l"
yylval->number = tok::BH_KEK_IV;                return tok::BH_KEK_IV;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 110 "../s/bif.l"
yylval->number = tok::EFUSE_KEK_IV;             return tok::EFUSE_KEK_IV;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 111 "../s/bif.l"
yylval->number = tok::EFUSE_USER_KEK0_IV;       return tok::EFUSE_USER_KEK0_IV;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 112 "../s/bif.l"
yylval->number = tok::EFUSE_USER_KEK1_IV;       return tok::EFUSE_USER_KEK1_IV;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 113 "../s/bif.l"
yylval->number = tok::USER_KEYS;                return tok::USER_KEYS;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 115 "../s/bif.l"
yylval->number = tok::FAMILY_KEY;               return tok::FAMILY_KEY;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 117 "../s/bif.l"
return tok::ENCRYPTION;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 118 "../s/bif.l"
yylval->number = 0;                             return tok::NONE;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 119 "../s/bif.l"
yylval->number = Encryption::AES;               return tok::ENCRVALUE;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 121 "../s/bif.l"
return tok::AUTHENTICATION;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 122 "../s/bif.l"
yylval->number = Authentication::RSA;           return tok::AUTHVALUE;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 123 "../s/bif.l"
yylval->number = Authentication::ECDSA;         return tok::AUTHVALUE;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 124 "../s/bif.l"
yylval->number = Authentication::ECDSA;         return tok::AUTHVALUE;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 125 "../s/bif.l"
yylval->number = Authentication::ECDSAp521;     return tok::AUTHVALUE;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 127 "../s/bif.l"
return tok::CHECKSUM;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 128 "../s/bif.l"
yylval->number = Checksum::MD5;                 return tok::CHECKSUMVALUE;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 129 "../s/bif.l"
yylval->number = Checksum::SHA2;                return tok::CHECKSUMVALUE;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 130 "../s/bif.l"
yylval->number = Checksum::SHA3;                return tok::CHECKSUMVALUE;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 132 "../s/bif.l"
return tok::PARTITION_OWNER;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 133 "../s/bif.l"
return tok::PARTITION_OWNER;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 134 "../s/bif.l"
yylval->number = PartitionOwner::FSBL;          return tok::POWNERVALUE ;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 135 "../s/bif.l"
yylval->number = PartitionOwner::UBOOT;         return tok::POWNERVALUE ;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 136 "../s/bif.l"
yylval->number = PartitionOwner::FSBL;          return tok::POWNERVALUE ;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 137 "../s/bif.l"
yylval->number = PartitionOwner::UBOOT;         return tok::POWNERVALUE ;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 138 "../s/bif.l"
yylval->number = PartitionOwner::FSBL;          return tok::POWNERVALUE ;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 139 "../s/bif.l"
yylval->number = PartitionOwner::UBOOT;         return tok::POWNERVALUE ;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 141 "../s/bif.l"
return tok::PARTITION_TYPE;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 142 "../s/bif.l"
return tok::PARTITION_TYPE;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 143 "../s/bif.l"
yylval->number = PartitionType::CONFIG_DATA_OBJ;   return tok::PTYPEVALUE;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 144 "../s/bif.l"
yylval->number = PartitionType::RAW;               return tok::PTYPEVALUE;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 145 "../s/bif.l"
yylval->number = PartitionType::CFI;               return tok::PTYPEVALUE;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 146 "../s/bif.l"
yylval->number = PartitionType::CFI_GSC;           return tok::PTYPEVALUE;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 147 "../s/bif.l"
yylval->number = PartitionType::SLR_BOOT;          return tok::PTYPEVALUE;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 148 "../s/bif.l"
yylval->number = PartitionType::SLR_CONFIG;        return tok::PTYPEVALUE;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 149 "../s/bif.l"
yylval->number = PartitionType::SLR_SLAVE;         return tok::PTYPEVALUE;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 150 "../s/bif.l"
yylval->number = PartitionType::SLR_SLAVE_BOOT;    return tok::PTYPEVALUE;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 151 "../s/bif.l"
yylval->number = PartitionType::SLR_SLAVE_CONFIG;  return tok::PTYPEVALUE;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 152 "../s/bif.l"
yylval->number = PartitionType::ELF;               return tok::PTYPEVALUE;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 154 "../s/bif.l"
yylval->number = tok::KEYSRC_ENCRYPTION;        return tok::KEYSRC_ENCRYPTION;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 155 "../s/bif.l"
yylval->number = tok::KEYSRC_ENCRYPTION;        return tok::KEYSRC_ENCRYPTION;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 156 "../s/bif.l"
yylval->number = KeySource::EfuseRedKey;        return tok::KEY_SRC;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 157 "../s/bif.l"
yylval->number = KeySource::BbramRedKey;        return tok::KEY_SRC;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 158 "../s/bif.l"
yylval->number = KeySource::EfuseRedKey;        return tok::KEY_SRC;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 159 "../s/bif.l"
yylval->number = KeySource::EfuseBlkKey;        return tok::KEY_SRC;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 160 "../s/bif.l"
yylval->number = KeySource::EfuseGryKey;        return tok::KEY_SRC;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 161 "../s/bif.l"
yylval->number = KeySource::BbramRedKey;        return tok::KEY_SRC;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 162 "../s/bif.l"
yylval->number = KeySource::BbramBlkKey;        return tok::KEY_SRC;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 163 "../s/bif.l"
yylval->number = KeySource::BbramGryKey;        return tok::KEY_SRC;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 164 "../s/bif.l"
yylval->number = KeySource::BhGryKey;           return tok::KEY_SRC;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 165 "../s/bif.l"
yylval->number = KeySource::BhBlkKey;           return tok::KEY_SRC;
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 166 "../s/bif.l"
yylval->number = KeySource::UserKey0;           return tok::KEY_SRC;
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 167 "../s/bif.l"
yylval->number = KeySource::UserKey1;           return tok::KEY_SRC;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 168 "../s/bif.l"
yylval->number = KeySource::UserKey2;           return tok::KEY_SRC;
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 169 "../s/bif.l"
yylval->number = KeySource::UserKey3;           return tok::KEY_SRC;
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 170 "../s/bif.l"
yylval->number = KeySource::UserKey4;           return tok::KEY_SRC;
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 171 "../s/bif.l"
yylval->number = KeySource::UserKey5;           return tok::KEY_SRC;
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 172 "../s/bif.l"
yylval->number = KeySource::UserKey6;           return tok::KEY_SRC;
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 173 "../s/bif.l"
yylval->number = KeySource::UserKey7;           return tok::KEY_SRC;
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 174 "../s/bif.l"
yylval->number = KeySource::EfuseUserKey0;      return tok::KEY_SRC;
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 175 "../s/bif.l"
yylval->number = KeySource::EfuseUserBlkKey0;   return tok::KEY_SRC;
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 176 "../s/bif.l"
yylval->number = KeySource::EfuseUserGryKey0;   return tok::KEY_SRC;
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 177 "../s/bif.l"
yylval->number = KeySource::EfuseUserKey1;      return tok::KEY_SRC;
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 178 "../s/bif.l"
yylval->number = KeySource::EfuseUserBlkKey1;   return tok::KEY_SRC;
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 179 "../s/bif.l"
yylval->number = KeySource::EfuseUserGryKey1;   return tok::KEY_SRC;
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 180 "../s/bif.l"
yylval->number = KeySource::BhKupKey;           return tok::KEY_SRC;
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 182 "../s/bif.l"
yylval->number = tok::FSBL_CONFIG;              return tok::FSBL_CONFIG;
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 183 "../s/bif.l"
yylval->number = tok::FSBL_CONFIG;              return tok::FSBL_CONFIG;
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 184 "../s/bif.l"
yylval->number = tok::FSBL_CONFIG;              return tok::FSBL_CONFIG;
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 185 "../s/bif.l"
yylval->number = Core::R5Single;                return tok::CORE;
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 186 "../s/bif.l"
yylval->number = Core::A53Singlex32;            return tok::CORE;
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 187 "../s/bif.l"
yylval->number = Core::A53Singlex32;            return tok::CORE;
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 188 "../s/bif.l"
yylval->number = Core::A53Singlex64;            return tok::CORE;
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 189 "../s/bif.l"
yylval->number = Core::A53Singlex64;            return tok::CORE;
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 190 "../s/bif.l"
yylval->number = Core::R5Dual;                  return tok::CORE;
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 191 "../s/bif.l"
yylval->number = BhRsa::BhRsaEnable;            return tok::BH_RSA;
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 192 "../s/bif.l"
yylval->number = AuthHash::Sha2;                return tok::AUTH_HASH;
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 193 "../s/bif.l"
yylval->number = PufHdLoc::PUFinBH;             return tok::PUFHD_LOC;
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 194 "../s/bif.l"
yylval->number = AuthOnly::Enabled;             return tok::AUTH_ONLY;
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 195 "../s/bif.l"
yylval->number = OptKey::OptKeyinSecHdr;        return tok::OPT_KEY;
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 196 "../s/bif.l"
yylval->number = PufMode::PUF4K;                return tok::PUF4KMODE;
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 197 "../s/bif.l"
yylval->number = tok::SHUTTER;                  return tok::SHUTTER;
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 198 "../s/bif.l"
yylval->number = tok::PUFROSWAP;                return tok::PUFROSWAP;
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 199 "../s/bif.l"
yylval->number = DpaCM::DpaCMEnable;            return tok::DPA_CM;
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 200 "../s/bif.l"
yylval->number = tok::DICE;                     return tok::DICE;
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 201 "../s/bif.l"
yylval->number = tok::SMAP_WIDTH;               return tok::SMAP_WIDTH;
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 202 "../s/bif.l"
yylval->number = tok::BYPASS_IDCODE_CHECK;      return tok::BYPASS_IDCODE_CHECK;
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 203 "../s/bif.l"
yylval->number = tok::A_HWROT;                  return tok::A_HWROT;
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 204 "../s/bif.l"
yylval->number = tok::S_HWROT;                  return tok::S_HWROT;
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 206 "../s/bif.l"
return tok::BOOT_DEVICE;
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 207 "../s/bif.l"
yylval->number = tok::ADDRESS;                  return tok::ADDRESS;
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 208 "../s/bif.l"
yylval->number = BootDevice::QSPI32;            return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 209 "../s/bif.l"
yylval->number = BootDevice::QSPI24;            return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 210 "../s/bif.l"
yylval->number = BootDevice::NAND;              return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 211 "../s/bif.l"
yylval->number = BootDevice::SD0;               return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 212 "../s/bif.l"
yylval->number = BootDevice::SD1;               return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 213 "../s/bif.l"
yylval->number = BootDevice::SDLS;              return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 214 "../s/bif.l"
yylval->number = BootDevice::MMC;               return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 215 "../s/bif.l"
yylval->number = BootDevice::USB;               return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 216 "../s/bif.l"
yylval->number = BootDevice::ETHERNET;          return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 217 "../s/bif.l"
yylval->number = BootDevice::PCIE;              return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 218 "../s/bif.l"
yylval->number = BootDevice::SATA;              return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 219 "../s/bif.l"
yylval->number = BootDevice::OSPI;              return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 220 "../s/bif.l"
yylval->number = BootDevice::SMAP;              return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 221 "../s/bif.l"
yylval->number = BootDevice::SBI;               return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 222 "../s/bif.l"
yylval->number = BootDevice::SD0RAW;            return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 223 "../s/bif.l"
yylval->number = BootDevice::SD1RAW;            return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 224 "../s/bif.l"
yylval->number = BootDevice::SDLSRAW;           return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 225 "../s/bif.l"
yylval->number = BootDevice::MMCRAW;            return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 226 "../s/bif.l"
yylval->number = BootDevice::MMC0;              return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 227 "../s/bif.l"
yylval->number = BootDevice::MMC0RAW;           return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 229 "../s/bif.l"
return tok::DEST_CPU;
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 230 "../s/bif.l"
return tok::DEST_CPU;
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 231 "../s/bif.l"
yylval->number = DestinationCPU::A53_0;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 232 "../s/bif.l"
yylval->number = DestinationCPU::A53_0;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 233 "../s/bif.l"
yylval->number = DestinationCPU::A53_0;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 234 "../s/bif.l"
yylval->number = DestinationCPU::A53_0;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 235 "../s/bif.l"
yylval->number = DestinationCPU::A53_1;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 236 "../s/bif.l"
yylval->number = DestinationCPU::A53_1;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 237 "../s/bif.l"
yylval->number = DestinationCPU::A53_1;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 238 "../s/bif.l"
yylval->number = DestinationCPU::A53_1;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 239 "../s/bif.l"
yylval->number = DestinationCPU::A53_2;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 240 "../s/bif.l"
yylval->number = DestinationCPU::A53_2;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 241 "../s/bif.l"
yylval->number = DestinationCPU::A53_2;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 242 "../s/bif.l"
yylval->number = DestinationCPU::A53_3;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 243 "../s/bif.l"
yylval->number = DestinationCPU::A53_3;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 244 "../s/bif.l"
yylval->number = DestinationCPU::A53_3;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 245 "../s/bif.l"
yylval->number = DestinationCPU::R5_0;          return tok::DEST_CPU_TYPE;
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 246 "../s/bif.l"
yylval->number = DestinationCPU::R5_0;          return tok::DEST_CPU_TYPE;
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 247 "../s/bif.l"
yylval->number = DestinationCPU::R5_1;          return tok::DEST_CPU_TYPE;
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 248 "../s/bif.l"
yylval->number = DestinationCPU::R5_1;          return tok::DEST_CPU_TYPE;
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 249 "../s/bif.l"
yylval->number = DestinationCPU::R5_lockstep;   return tok::DEST_CPU_TYPE;
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 250 "../s/bif.l"
yylval->number = DestinationCPU::PMU;           return tok::DEST_CPU_TYPE;
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 251 "../s/bif.l"
yylval->number = DestinationCPU::PMU;           return tok::DEST_CPU_TYPE;
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 252 "../s/bif.l"
yylval->number = DestinationCPU::AIE;           return tok::DEST_CPU_TYPE;
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 253 "../s/bif.l"
yylval->number = tok::CLUSTER_NUM;              return tok::CLUSTER_NUM;
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 255 "../s/bif.l"
return tok::DEST_DEVICE;
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 256 "../s/bif.l"
yylval->number = DestinationDevice::DEST_DEV_PS;    return tok::DEST_DEVICE_TYPE;
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 257 "../s/bif.l"
yylval->number = DestinationDevice::DEST_DEV_PL;    return tok::DEST_DEVICE_TYPE;
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 258 "../s/bif.l"
yylval->number = DestinationDevice::DEST_DEV_PMU;   return tok::DEST_DEVICE_TYPE;
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 259 "../s/bif.l"
yylval->number = DestinationDevice::DEST_DEV_XIP;   return tok::DEST_DEVICE_TYPE;
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 261 "../s/bif.l"
return tok::EXCEPTION_LEVEL;
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 262 "../s/bif.l"
yylval->number = ExceptionLevel::EL0;           return tok::EXCEPTION_LEVEL_TYPE;
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 263 "../s/bif.l"
yylval->number = ExceptionLevel::EL1;           return tok::EXCEPTION_LEVEL_TYPE;
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 264 "../s/bif.l"
yylval->number = ExceptionLevel::EL2;           return tok::EXCEPTION_LEVEL_TYPE;
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 265 "../s/bif.l"
yylval->number = ExceptionLevel::EL3;           return tok::EXCEPTION_LEVEL_TYPE;
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 267 "../s/bif.l"
return tok::TRUSTZONE;
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 268 "../s/bif.l"
yylval->number = TrustZone::Secure;             return tok::TRUSTZONE_TYPE;
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 269 "../s/bif.l"
yylval->number = TrustZone::NonSecure;          return tok::TRUSTZONE_TYPE;
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 271 "../s/bif.l"
yylval->number = tok::SLR_NUM;                  return tok::SLR_NUM;
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 273 "../s/bif.l"
yylval->number = tok::AUTH_PARAMS;              return tok::AUTH_PARAMS;
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 274 "../s/bif.l"
yylval->number = tok::PPK_SELECT;               return tok::PPK_SELECT;
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 275 "../s/bif.l"
yylval->number = tok::SPK_SELECT;               return tok::SPK_SELECT;
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 276 "../s/bif.l"
yylval->number = SpkSelect::SPK_eFUSE;          return tok::SPKSELECT;
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 277 "../s/bif.l"
yylval->number = SpkSelect::USER_eFUSE;         return tok::SPKSELECT;
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 278 "../s/bif.l"
yylval->number = tok::SPK_ID;                   return tok::SPK_ID; 
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 279 "../s/bif.l"
return tok::HEADER_AUTH;
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 281 "../s/bif.l"
yylval->number = tok::REVOKE_ID;                return tok::REVOKE_ID;
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 283 "../s/bif.l"
yylval->number = tok::SPLIT;                    return tok::SPLIT;
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 284 "../s/bif.l"
yylval->number = tok::SPLIT_MODE;               return tok::SPLIT_MODE;
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 285 "../s/bif.l"
yylval->number = SplitMode::SlaveMode;          return tok::SPLITMODE;
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 286 "../s/bif.l"
yylval->number = SplitMode::Normal;             return tok::SPLITMODE;
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 287 "../s/bif.l"
yylval->number = tok::SPLIT_FMT;                return tok::SPLIT_FMT; 
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 288 "../s/bif.l"
return tok::MCS;
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 289 "../s/bif.l"
return tok::BIN;
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 291 "../s/bif.l"
yylval->number = tok::AUTHJTAG_CONFIG;          return tok::AUTHJTAG_CONFIG;
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 292 "../s/bif.l"
yylval->number = tok::DEVICE_DNA;               return tok::DEVICE_DNA;
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 293 "../s/bif.l"
yylval->number = tok::JTAG_TIMEOUT;             return tok::JTAG_TIMEOUT;
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 295 "../s/bif.l"
yylval->number=atoi(yytext);                    return tok::DECVALUE;
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 296 "../s/bif.l"
yylval->number=strtoul(yytext+2,NULL,16);       return tok::HEXVALUE;
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 297 "../s/bif.l"
yylval->string=strdup(yytext);                  return tok::HEXWORD;
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 299 "../s/bif.l"
return tok::COLON;
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 300 "../s/bif.l"
return tok::SEMICOLON;
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 301 "../s/bif.l"
return tok::EQUAL;
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 302 "../s/bif.l"
return tok::COMMA;
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 303 "../s/bif.l"
return tok::OBRACKET;
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 304 "../s/bif.l"
return tok::EBRACKET;
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 305 "../s/bif.l"
return tok::OBRACE;
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 306 "../s/bif.l"
return tok::EBRACE;
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 307 "../s/bif.l"
return tok::LPAREN;
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 308 "../s/bif.l"
return tok::RPAREN;
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 309 "../s/bif.l"
return tok::ASTERISK;
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 311 "../s/bif.l"
return tok::PLUS;
	YY_BREAK
case 245:
YY_RULE_SETUP
#line 312 "../s/bif.l"
return tok::MINUS;
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 313 "../s/bif.l"
return tok::LSHIFT;
	YY_BREAK
case 247:
YY_RULE_SETUP
#line 314 "../s/bif.l"
return tok::RSHIFT;
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 315 "../s/bif.l"
return tok::MULT;
	YY_BREAK
case 249:
YY_RULE_SETUP
#line 316 "../s/bif.l"
return tok::DIVIDE;
	YY_BREAK
case 250:
YY_RULE_SETUP
#line 317 "../s/bif.l"
return tok::MODULO;
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 318 "../s/bif.l"
return tok::NEGATION;
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 319 "../s/bif.l"
return tok::AND;
	YY_BREAK
case 253:
YY_RULE_SETUP
#line 320 "../s/bif.l"
return tok::OR;
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 321 "../s/bif.l"
return tok::XOR;
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 323 "../s/bif.l"
yylval->string=strdup(yytext);      return tok::WORD;
	YY_BREAK
case 256:
YY_RULE_SETUP
#line 324 "../s/bif.l"
yylval->string=strdup(yytext);      return tok::FILENAME;
	YY_BREAK
case 257:
YY_RULE_SETUP
#line 325 "../s/bif.l"
yylval->string=strdup(yytext+1); yylval->string[strlen(yytext)-2]=0; return tok::QFILENAME;
	YY_BREAK
case 258:
YY_RULE_SETUP
#line 327 "../s/bif.l"
yylloc->step ();
	YY_BREAK
case 259:
/* rule 259 can match eol */
YY_RULE_SETUP
#line 328 "../s/bif.l"
yylloc->lines (yyleng); yylloc->step ();
	YY_BREAK
case 260:
YY_RULE_SETUP
#line 329 "../s/bif.l"
/* ignore (Linux only) */
	YY_BREAK
case 261:
YY_RULE_SETUP
#line 330 "../s/bif.l"
printf("WARNING: bad character! '%s' (0x%02X)\n",yytext,yytext[0]);
	YY_BREAK
case 262:
YY_RULE_SETUP
#line 331 "../s/bif.l"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 3066 "../bisonflex/bif.yy.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	biffree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	biffree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
int yyFlexLexer::yy_get_next_buffer()
/* %endif */
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					bifrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) bifrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_get_previous_state()
/* %endif */
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1171 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
/* %endif */
{
	register int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1171 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1170);

	return yy_is_jam ? 0 : yy_current_state;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyunput( int c, register char* yy_bp)
/* %endif */
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yyinput()
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyrestart( std::istream* input_file )
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_load_buffer_state()
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) bifalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) bifalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		biffree((void *) b->yy_ch_buf  );

	biffree((void *) b  );
}

/* %if-c-only */
/* %endif */

/* %if-c++-only */

extern "C" int isatty (int );

/* %endif */

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_is_interactive = 0;
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypop_buffer_state (void)
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yyensure_buffer_stack(void)
/* %endif */
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)bifalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)bifrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_push_state( int new_state )
/* %endif */
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) bifalloc(new_size  );

		else
			(yy_start_stack) = (int *) bifrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_pop_state()
/* %endif */
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yy_top_state()
/* %endif */
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* %if-reentrant */
/* %endif */
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *bifalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *bifrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void biffree (void * ptr )
{
	free( (char *) ptr );	/* see bifrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 331 "../s/bif.l"




void BIF::FlexScanner::comment()
{
    char c, c1;
loop:
    while ((c = yyinput()) != '*' && c != 0) 
    {
        // putchar(c);
        if (c == '\n') yylloc->lines (1);
    }

    if ((c1 = yyinput()) != '/' && c != 0)
    {
        unput(c1);
        goto loop;
    }
}

