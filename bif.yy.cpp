#line 2 "../bisonflex/bif.yy.cpp"

#line 4 "../bisonflex/bif.yy.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer bifFlexLexer
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstring>
/* end standard C++ headers. */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

/* %if-not-reentrant */
extern int yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
/* %endif */

/* %if-c++-only */
	std::istream* yy_input_file;
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */
/* %if-not-reentrant */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
/* %endif */

void *bifalloc (yy_size_t  );
void *bifrealloc (void *,yy_size_t  );
void biffree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext

#include "FlexLexer.h"

int yyFlexLexer::yywrap() { return 1; }
int yyFlexLexer::yylex()
	{
	LexerError( "yyFlexLexer::yylex invoked but %option yyclass used" );
	return 0;
	}

#define YY_DECL int FlexScanner::yylex()

/* %if-c-only Standard (non-C++) definition */
/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 271
#define YY_END_OF_BUFFER 272
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1225] =
    {   0,
        0,    0,  272,  270,  267,  268,  269,  270,  259,  261,
      250,  251,  252,  253,  245,  254,  265,  258,  239,  239,
      242,  243,  270,  244,  270,  241,  264,  246,  247,  263,
      264,  241,  241,  241,  241,  241,  241,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  248,  262,  249,  260,  267,  268,    0,    0,
      265,    1,  265,  239,  241,  265,  255,  256,  241,    0,
      264,  241,  241,  264,  241,    5,  241,  241,  264,  264,
      264,  241,  264,  264,  264,  264,  264,  241,  241,  264,
      264,  264,  241,  264,  264,  241,  241,  241,  264,  264,

      264,  264,  241,  264,  264,  264,  264,  264,  264,   54,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  209,  264,  264,  264,  208,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  266,    0,    0,    2,  265,  240,    0,  241,  264,
      241,  241,  264,  264,  241,   80,  205,  264,  264,  264,
      264,  264,  264,  235,  264,  264,  264,  100,  102,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  241,

      264,  265,  109,  264,  264,  264,  264,  264,  264,  233,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  234,   87,  264,  168,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
       65,   38,   96,   94,  203,  264,  264,  264,  264,  204,
      264,  264,  265,  264,  264,  101,  264,  264,   82,  264,
      264,  175,  265,  165,  166,  264,  264,  264,  264,  220,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
       62,  169,  264,  211,    0,  265,  264,  265,  264,  265,
      265,  264,  264,  264,  264,  264,  264,  264,  264,  264,

      264,  264,  264,  264,  264,    8,  264,  265,  264,  264,
       36,  183,  264,  264,  264,  264,  264,  264,  264,  264,
      213,  214,  215,  216,  264,  264,  264,  264,  264,   56,
       92,  264,  264,  264,  264,  264,  264,   39,  264,  264,
      264,   35,  264,  264,  265,  180,  230,  264,   55,  164,
      264,  265,   79,  264,  264,  264,  264,  264,  173,  264,
      264,  264,  171,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  198,  200,  265,  265,  264,
      264,  264,  264,  264,  172,  265,  265,  265,  264,  264,
       88,   89,  264,  264,  265,  174,  265,  264,  264,  264,

      264,  264,  264,  264,  264,  264,  264,   99,  264,  264,
        9,  264,  184,  188,  192,  195,  264,  187,  191,  194,
      197,  264,  185,  189,  186,  190,  193,  196,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  113,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      265,  264,  264,  264,  264,  264,  264,  264,  264,   83,
      112,  264,  264,  264,  264,  264,  264,  264,  264,   19,
      264,   25,  264,  264,  264,  264,  264,  264,  265,  265,
      264,  264,  265,  264,  264,  264,  264,  264,   91,  264,
      264,  264,  264,  210,  264,  264,  264,  264,  264,  264,

      264,  264,  264,  264,  264,  265,  199,  201,  264,  264,
      264,  264,  264,  167,  265,  265,  264,  264,  264,  264,
      265,  265,  265,  264,  265,  264,  264,  264,  264,  229,
      264,  264,  264,  264,  264,  264,  264,  264,   93,  264,
      264,  265,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,   20,  264,
      264,  264,  264,  264,  264,  265,  264,  264,  264,  264,
      264,  264,  264,  264,  265,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  111,

      264,  264,  264,  265,  265,  264,  264,  265,  265,  264,
      232,   32,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  163,  162,
      265,  264,  264,  264,  264,  264,  265,  265,  265,  264,
      218,  264,  264,  265,  265,  265,  264,  265,  226,  264,
      264,  264,  264,  264,   10,  264,  264,  264,  264,  264,
       40,  264,  265,  264,  264,  264,  141,  143,  142,  144,
      158,  264,  161,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  103,

      264,  206,  264,  264,  264,  264,  264,  264,  264,  264,
      265,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,   52,  264,  264,   29,  264,
      264,  136,  264,  264,  179,  265,  264,  264,   97,   95,
      264,  150,  264,  264,  264,  264,   60,  264,  264,   42,
        4,  264,   43,  264,  264,  264,  264,  265,  145,  264,
       34,  264,  159,  265,  176,  177,   27,  152,  264,  265,
      265,  265,  264,  265,  264,   44,  264,   45,   37,  264,
      264,  264,   30,  264,  264,  265,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,

      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,   86,  264,  264,  264,
      264,  264,  264,  264,  264,  265,  265,  264,  264,  264,
      264,  264,  264,  170,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,   28,  264,  181,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
       58,  264,  148,  265,  264,  264,  264,  265,  264,  104,
      265,  265,  264,  265,  264,  264,  264,  264,  264,  264,
        6,  265,  264,   76,    7,  264,  264,   14,  149,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,

      264,   72,   61,  264,  264,  264,  264,  264,   50,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      265,  265,  264,  264,  264,  264,  264,  264,  264,  264,
       77,  264,  264,  264,  264,  264,  264,  264,  264,  264,
       12,  264,  219,  264,   51,  264,   24,  264,  264,  264,
       13,  151,  264,  265,  140,  264,  228,  178,  231,  265,
      106,  264,  224,  264,  264,  264,  264,  264,  217,  265,
      122,  123,  124,  125,  126,  127,  128,  129,  264,   41,
      264,  264,   21,  264,  264,  264,  264,  264,  264,  264,
      121,  120,   57,  264,   22,  264,  264,    3,  264,  264,

       18,  264,   17,  264,  237,  264,  264,  264,   84,   85,
      264,  264,  264,  264,  264,   78,  264,  264,  264,  264,
      264,  264,  264,   67,  264,  264,   26,  264,  264,   63,
      264,   66,  264,  222,  264,  265,  264,  105,  265,  156,
      223,  264,  264,  264,  264,  225,  264,  221,  264,  264,
      264,  264,  264,  264,  264,  264,   47,  138,  160,   49,
      264,  264,  264,  155,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  137,   64,  227,  264,  264,  264,  264,
       11,  264,  264,  264,   59,  153,  202,  264,  265,  265,
      264,  264,  264,  264,   23,  264,  264,  264,  264,  264,

       71,  264,  264,  264,  264,  264,  154,  264,  264,  264,
       73,  264,  264,  264,  264,  264,  264,  264,  139,  238,
      264,   31,  264,  264,  264,  265,  265,   46,   68,   69,
       70,  264,  264,  264,  118,  119,  117,  264,  264,   16,
      264,  264,   15,  115,  116,  114,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  265,  265,  264,   81,
      264,  146,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  264,   98,   33,  107,  265,  264,  236,
      264,  182,  264,  264,  264,  264,  264,  130,  133,  212,
      264,   48,  264,   90,  265,  147,  264,  264,  264,  264,

      264,  264,   53,  264,  108,  264,  264,  264,  264,  264,
      264,  110,  264,  207,  264,  264,   74,   75,  157,  131,
      134,  132,  135,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    6,    6,    8,    9,    1,   10,
       11,   12,   13,   14,   15,   16,   17,   18,   19,   20,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
       31,   32,    1,    6,   33,   33,   33,   33,   33,   33,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   35,   34,   34,
       36,   37,   38,   39,   40,    1,   41,   42,   43,   44,

       45,   46,   47,   48,   49,   50,   51,   52,   53,   54,
       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,   67,   68,   69,   70,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[71] =
    {   0,
        1,    1,    1,    1,    2,    2,    2,    2,    2,    2,
        2,    1,    3,    1,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    1,    1,    1,
        1,    1,    3,    3,    3,    1,    3,    1,    2,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[1229] =
    {   0,
        0,    0, 2506, 2507,   69, 2502, 2507,   70, 2507, 2507,
     2507, 2507, 2507,    0, 2507,    0,    0,   60,  119,   38,
     2507, 2507, 2474, 2507, 2471,  171,  220, 2507, 2507, 2507,
     2474,  227,  232,  103,  121,  248,  237,  108,  115, 2441,
       37, 2445,  260,  126,  236,  273, 2440,  278,  298,   41,
      286, 2449, 2507, 2507, 2507, 2507,  169, 2494, 2489,  172,
        0, 2507,  358,  121,  411,  458, 2507, 2507, 2467,  165,
     2466,  289,  485,  221,  120,  181,  231,  234,  228,  257,
      249,  122,  296,  324,  148,  292,  227,  320,  328,  299,
      313,  345,  348,  290,  351,  353,  365,  378,  367,  356,

      374,  380,  352,  365,  355,  378,  388,  413,  147,  384,
      415,  416,  417,  145,  391,  420,  390,  427,  393,  423,
      424,  434,  436,  465,  441,  432,  439,  442,  460,  466,
      429,  444,  479,  470,  486,  492,  481,  488,  527,  489,
      504,  507,  505,  508,  510,  542,  511,  521,  523,  528,
      522,  537,  530,  544,  547,  548,  550,  549,  552,  556,
      551, 2507,  566, 2490, 2507,  608,    0,    0,  613,  614,
      571,  574,  562,  559,  563,  598, 2464,  596,  602,  565,
      617,  599,  595, 2463,  623,  603,  624, 2462,  641,  627,
      629,  606,  634,  632,  633,  646,  639,  644,  652,  653,

      654,  671, 2461,  657,  655,  658,  666,  668,  669, 2460,
      670,  673,  674,  678,  677,  679,  680,  671,  681,  682,
      693,  691,  696, 2459, 2458,  697,  712,  701,  706,  708,
      711,  709,  728,  714,  716,  720,  722,  717,  723,  729,
      721, 2457, 2456,  735,  726,  736,  730,  724,  731, 2455,
      758,  750,  772,  766,  757, 2454,  760,  737, 2453,  765,
      767, 2452, 2427,  781,  782,  772,   80,  774,  775,  789,
      779,  798,  787,  783,  790,  799,  784,  786,  791,  802,
     2450, 2449,  793,  812, 2469,  835,  794,  841,  817,  240,
      845,  819,  821,  839,  840,  842,  847,  845,  843,  848,

      844,  846,  852,  850,  854,  866,  851, 2428,  858,  860,
     2446, 2445,  862,  865,  873,  879,  855,  875,  883,  884,
        0,    0,    0,    0,  885,  889,  893,  894,  902, 2444,
      895,  897,  898,  903,  904,  906,  905, 2443,  913,  909,
      910, 2442,  911,  908, 2411,  927, 2440,  916, 2439, 2438,
      917, 2409, 2436,  924,  930,  934,  932,  935, 2435,  936,
      944,  940, 2434,  946,  945,  947,  948,  952,  953,  950,
      954,  957,  959,  956,  976,    0,    0, 2406,  614,  960,
      963,  964,  965,  978, 2432, 2400, 2400, 2399,  981,  983,
     2428, 2427,  985,  986,  976,  987, 2409,  995,  997,  998,

      992, 1000,  996, 1001, 1020, 1004, 1005, 2425, 1006, 1009,
     1027, 1011,    0,    0,    0,    0, 1047,    0,    0,    0,
        0, 1048,    0,    0,    0,    0,    0,    0, 1015,  564,
     1029, 1012, 1030, 1045, 1032, 1051, 1046, 1052, 1053, 1057,
     1054, 1058, 1061, 1062, 1059, 1067, 1068, 1065, 1069, 1063,
     2393, 1066, 1079, 1089, 1074, 1098, 1099, 1102, 1105, 1084,
     1106, 1075, 1104, 1107, 1108, 1109, 1110, 1111, 1112, 2423,
     1113, 1119, 1120, 1121, 1122, 1123, 1126, 1127, 2409, 2391,
     1133, 1128, 1110, 1141, 1138, 1143, 1148, 1145, 2420, 1149,
     1151, 1152, 1154, 1157, 1159, 1160, 1161, 1163, 1164, 1166,

     1168, 1167, 1170, 1185, 1195, 2404,    0,    0, 1177, 1172,
     1174, 1192, 1193, 2431, 2404, 2403, 1196, 1197, 1199, 1201,
     2388, 2387, 2389, 1200, 2394, 1202, 1204, 1203, 1205, 2411,
     1206, 1207, 1210, 1217, 1219, 1222, 1211,  283, 2410, 1212,
     1213, 2392, 1228, 1233, 1236, 1245, 1247, 1252, 1248, 1239,
     1254, 1243, 1249, 1253, 1255, 1256, 1257, 1258, 1259, 1260,
     1264, 1262, 1268, 1272, 1276, 1286, 1266, 1289, 2408, 1265,
     1290, 1293, 1295, 1296, 1297, 2392, 1299, 1300, 1301, 1302,
     1310, 1303, 1316, 1317, 2378, 1312, 1318, 1319, 1313, 1323,
     1320, 1324, 1327, 1341, 1338, 1344, 1328, 1339, 1346, 1349,

     1347, 1348, 1357, 2370, 2391, 1352, 1358, 2378, 2387, 1362,
     2401, 2400, 1363, 1364, 1366, 1369, 1368, 1373, 1371, 1374,
     1376, 1375, 1380, 1382, 1381, 1383, 1385, 1261, 2399, 2398,
     2374, 1387, 1391, 1388, 1402, 1396, 2366, 2360, 2359, 1403,
     2393, 1404, 1406, 2365, 2365, 2377, 1409, 2356, 2388, 1413,
     1415, 1416, 1418, 1417, 2387, 1419, 1420, 1421, 1422, 1425,
     2386, 1423, 2367, 1424, 1426, 1427, 2384, 2383, 2382, 2381,
     2380, 1436, 2379, 1438, 1431, 1440, 1439, 1447, 1446, 1444,
     1453, 1456, 1458, 1462, 1466, 1470, 1467, 1468, 1471, 1473,
     1474, 1475, 1476, 1477, 1478, 1481, 1485, 1484, 1487,    0,

     1486, 2378, 1489, 1493, 1496, 1498, 1499, 1504, 1502, 1505,
      802, 1509, 1510, 1514, 1519, 1513, 1520, 1521, 1524, 1526,
     1529, 1532, 1534, 1525, 1527, 2377, 1535, 1537, 2376, 1543,
     1539, 2375, 1545, 1547,    0, 2339, 1549, 1550,    0,    0,
     1554, 2373, 1555, 1557, 1559, 1561, 2372, 1566, 1552, 2371,
     2370, 1570, 2369, 1565, 1571, 1567, 1572, 2337, 2367, 1575,
     1583, 1580, 2366, 2352,    0,    0, 2364, 2363, 1585, 2330,
     2343, 2326, 1589, 2328, 1593, 2358, 1594, 2357, 2356, 1596,
     1597, 1600, 2355, 1602, 1603, 2321, 1574, 1604, 1606, 1608,
     1615, 1609, 1618, 1619, 1629, 1620, 1622, 1624, 1625, 1626,

     1627, 1630, 1634, 1640, 1642, 1631, 1638, 1644, 1645, 1647,
     1649, 1652, 1653, 1654, 1656, 1658, 2353, 1661, 1662, 1664,
     1666, 1669, 1675, 1679, 1676, 2354, 2359, 1680, 1681, 1682,
     1684, 1690, 1685, 2350, 1691, 1686, 1694, 1696, 1697, 1699,
     1701, 1704, 1706, 1708, 1711, 2349, 1710,    0, 1713, 1715,
     1716, 1719, 1722, 1721, 1723, 1724, 1726, 1729, 1734, 1740,
     2348, 1743, 2347, 2314, 1746, 1747, 1748, 2310, 1751,    0,
     2323, 2326, 1752, 2325, 1753, 1754, 1755, 1756, 1758, 1759,
     2341, 2309, 1797, 2339, 2338, 1769, 1762, 2337, 2336, 1760,
     1761, 1767, 1782, 1765, 1799, 1800, 1801, 1802, 1781, 1766,

     1772, 2335, 2334, 1804, 1805, 1806, 1808, 1810, 2333, 1815,
     1816, 1818, 1817, 1820, 1822, 1823, 1826, 1819, 1827, 1824,
     2338, 2340, 1830, 1844, 1847, 1848, 1828, 1831, 1849, 1834,
     2330, 1851, 1852, 1853, 1854, 1863, 1862, 1864, 1867, 1865,
     2329, 1866, 2328, 1870, 2327, 1868, 1874, 1869, 1871, 1875,
     2326, 2325, 1876, 2307, 2323, 1877, 2322,    0, 2321, 2301,
     2332, 1878,    0, 1887, 1888, 1892, 1893, 1897, 2318, 2300,
     2316, 2315, 2314, 2313, 2312, 2311, 2310, 2309, 1899, 2308,
     1900, 1903, 2307, 1901, 1902, 1904, 1909, 1916, 1911, 1910,
     2306, 2305, 2304, 1908, 2303, 1917, 1922, 2302, 1912, 1924,

     2301, 1926, 2300, 1928, 2299, 1930, 1935, 1938,    0,    0,
     1940, 1941, 1945, 1944, 1946, 2298, 1948, 1952, 1942, 1955,
     1949, 1957, 1956, 2297, 1950, 1960, 2296, 1962, 1973, 2295,
     1974, 2294, 1975, 2293, 1976, 2264, 1978,    0, 1965, 2291,
     2290, 1981, 1982, 1985, 1986,    0, 1991, 2289, 1984, 1993,
     1989, 1999, 2000, 1987, 2002, 2018, 2288, 2287, 2286, 2285,
     2007, 2020, 2022, 2284, 2024, 2025, 2027, 2028, 1995, 2030,
     2035, 2031, 2039, 2283, 2282, 2281, 2033, 2036, 2037, 2003,
     2280, 2046, 2026, 2042, 2279, 2278,    0, 2050, 2250, 2249,
     2053, 2052, 2056, 2057, 2275, 2060, 2062, 2066, 2064, 2067,

     2274, 2068, 2071, 2074, 2072, 2077, 2273, 2076, 2075, 2080,
     2272, 2081, 2085, 2086, 2096, 2087, 2088, 2097, 2271, 2270,
     2098, 2269, 2099, 2100, 2107, 2241, 2241, 2266, 2265, 2264,
     2263, 2106, 2108, 2102, 2262, 2251, 2249, 2110, 2119, 2248,
     2111, 2115, 2247, 2246, 2245, 2242, 2114, 2124, 2129, 2133,
     2135, 2138, 2140, 2136, 2141, 2142, 2209, 2222, 2143, 2239,
     2144, 2238, 2145, 2147, 2148, 2157, 2159, 2164, 2183, 2146,
     2149, 2175, 2156, 2151, 2237, 2236,    0, 2213, 2176, 2232,
     2178, 2231, 2184, 2185, 2186, 2187, 2188, 2230, 2229, 2227,
     2189, 1998, 2190, 1996, 1969, 1906, 2194, 2195, 2196, 2197,

     2191, 2201, 1770, 2202,    0, 2203, 2204, 2207, 2215, 2216,
     2219, 1070, 2220, 1010, 2233, 2235,  792,  484,  446,  443,
      386,  279,  220, 2507,  169, 2280, 2283, 2286
    } ;

static yyconst flex_int16_t yy_def[1229] =
    {   0,
     1224,    1, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1225, 1224, 1225, 1225, 1225, 1225,   19,
     1224, 1224, 1224, 1224, 1224, 1224,   26, 1224, 1224, 1224,
       27,   26,   26,   26,   26,   26,   26,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27, 1224, 1224, 1224, 1224, 1224, 1224, 1226, 1226,
     1225, 1224, 1227,   19,   19,   65, 1224, 1224,   26, 1224,
       27,   26,   32,   27,   26,   73,   73,   73,   27,   27,
       27,   26,   27,   27,   27,   27,   27,   26,   26,   27,
       27,   27,   26,   27,   27,   26,   73,   73,   27,   27,

       27,   27,   26,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27, 1224, 1224, 1228, 1224, 1227,   66, 1225,   26,   27,
       26,   73,   27,   27,   26,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   26,

       27, 1225,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27, 1225,   27,   27,   27,   27,   27,   27,   27,
       27,   27, 1225,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27, 1226, 1225,   27, 1225,   27, 1225,
     1225,   27,   27,   27,   27,   27,   27,   27,   27,   27,

       27,   27,   27,   27,   27,   27,   27, 1225,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
     1225, 1225, 1225, 1225,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27, 1225,   27,   27,   27,   27,   27,
       27, 1225,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27, 1225, 1225, 1225, 1225,   27,
       27,   27,   27,   27,   27, 1225, 1225, 1225,   27,   27,
       27,   27,   27,   27, 1225,   27, 1225,   27,   27,   27,

       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27, 1225, 1225, 1225, 1225,   27, 1225, 1225, 1225,
     1225,   27, 1225, 1225, 1225, 1225, 1225, 1225,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
     1225,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27, 1225, 1225,
       27,   27, 1225,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,

       27,   27,   27,   27,   27, 1225, 1225, 1225,   27,   27,
       27,   27,   27, 1225, 1225, 1225,   27,   27,   27,   27,
     1225, 1225, 1225,   27, 1225,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27, 1225,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27, 1225,   27,   27,   27,   27,
       27,   27,   27,   27, 1225,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,

       27,   27,   27, 1225, 1225,   27,   27, 1225, 1225,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
     1225,   27,   27,   27,   27,   27, 1225, 1225, 1225,   27,
       27,   27,   27, 1225, 1225, 1225,   27, 1225,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27, 1225,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27, 1225,

       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
     1225,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27, 1225, 1225,   27,   27, 1225, 1225,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27, 1225,   27,   27,
       27,   27,   27, 1225, 1225, 1225,   27,   27,   27, 1225,
     1225, 1225,   27, 1225,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27, 1225,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,

       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27, 1225, 1225,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27, 1225,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27, 1225,   27,   27,   27, 1225,   27, 1225,
     1225, 1225,   27, 1225,   27,   27,   27,   27,   27,   27,
       27, 1225,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,

       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
     1225, 1225,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27, 1225,   27,   27,   27, 1225,   27, 1225,
     1225,   27, 1225,   27,   27,   27,   27,   27,   27, 1225,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,

       27,   27,   27,   27,   27,   27,   27,   27, 1225, 1225,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27, 1225,   27, 1225, 1225,   27,
       27,   27,   27,   27,   27, 1225,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27, 1225,   27, 1225, 1225,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,

       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27, 1225, 1225,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27, 1225, 1225,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27, 1225, 1225,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27, 1225,   27,   27,   27,   27,   27,

       27,   27,   27,   27, 1225,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,    0, 1224, 1224, 1224, 1224
    } ;

static yyconst flex_int16_t yy_nxt[2578] =
    {   0,
        4,    5,    6,    7,    5,    4,    8,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   21,   22,   23,
       24,   25,   26,   27,   27,   28,   17,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   27,   38,   39,   40,
       41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
       51,   27,   27,   52,   27,   27,   53,   54,   55,   56,
       57,   62,   61,   57,   59,   59,   63,   59,   59,   59,
       59,  114,   59,  154,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,  115,  155,  391,

      392,   61,   60,   60,   60,  156,   59, 1224,   59,   59,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   88, 1224,   89, 1224,
       90,   65,  108,   66,   91,   61,  109,   92,  110,   65,
       65,   65,   65,   65,   65,   93,  123,  111,  112,   94,
       57,   61, 1224,   57, 1224, 1224,   95,  174,  162,  180,
      124,  168,   66,   61,   61,   61,   61,   61,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   70,  163,

       69,  168,  185,   69,   71,   71,   69,   61,  214,  220,
       71,   69,   69,   69,   69,   69,   69,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71, 1224, 1224,   72,
       69,   73,   71,   69, 1224, 1224,   69,  423,  424,   69,
       71,   71,   71,   71,   71,   71,   74,   75,  173,   76,
       77,   78,  177,   82,  175,   79, 1224,  103,   80,   83,
       84,  125,  187,   85, 1224,  104,   86,   81,   96,  105,
       97,  126,  176,   98,  127,  106,   87,  107,  128,   99,

      139,  100,  117,  118,  119,  178, 1224,  101,  179,  169,
     1224,  102,  120,  129,  121,  130, 1224, 1224,  140, 1224,
      122,  131,  141, 1224,  132,  133, 1224,  157,  134,  158,
      135,  136,  197,  137,  159,  181,  142,  143,  144,  145,
     1224,  146,  147,  190,  160,  148,  186, 1224,  660,  149,
      150, 1224,  170,  151,  182, 1224,  152,  153,  164,  164,
      165,  164,  164,  164,  164,  164,  164,  164,  164,  164,
      183,  164, 1224,  191,  188, 1224,  189,  184, 1224, 1224,
     1224,  202, 1224, 1224,   69,  164,  164,  164,  164,  164,
       69,  198, 1224,  164, 1224,  164,  164,   69,  204,  194,

      192, 1224,  193,   69,  208, 1224,  195, 1224,  200,  196,
      199, 1224,  203, 1224,  210, 1224,  209, 1224, 1224,  211,
     1224,  205,  206,  215,  164,  164,  164,  164,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,  201,  207,
     1224,  212, 1224, 1224, 1224,   61,  221, 1224,  224,  225,
     1224, 1224,  226,  213, 1224,  216, 1224,  219,  217, 1224,
      222, 1224,  223, 1224,  218,  227, 1224,  228, 1224, 1224,
     1224, 1224,  242, 1224,   61,  167,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  229,  235, 1224,  230,  231,
      167,  236, 1224, 1224,  237,  238,  243, 1224,  167,  167,

      167,  167,  167,  167,  171,  232, 1224,   69, 1224,   69,
      172, 1224, 1224, 1224,  240, 1224, 1224,  239,  233, 1224,
      246,  244,  234,  241,   71,   69,  251,   69,   69,   69,
      247, 1224, 1224,   71, 1224, 1224,   71, 1224, 1224,  245,
      248,  253,  249,  252,  250,   71,  254,  259, 1224, 1224,
     1224,  256,  260,  266, 1224, 1224,  263, 1224,  262,  264,
      265,  267,  257,  269, 1224,  258,  255,  261,  271, 1224,
      275, 1224,  272,  273, 1224, 1224, 1224, 1224, 1224, 1224,
      270,  268,  285, 1224,  551,  290, 1224,  274,  291, 1224,
     1224, 1224, 1224,   69,  280,  281,  276,  282, 1224,   69,

      283,  293,  285,  278,  279,  298,  284,  277,  164,  164,
      165,  164,  164,  164,  164,  164,  164,  164,  164,  164,
      294,  164, 1224, 1224,  292, 1224, 1224,  286,  288, 1224,
     1224,  507,  508, 1224,  304,  164,  164,  164,  164,  164,
     1224, 1224,  296,  164, 1224,  164,  164,  303,  295,  297,
     1224, 1224,  287,  289, 1224,  308, 1224,  299,  300, 1224,
     1224, 1224,  306,  301,  307,  305, 1224,  302, 1224,  309,
      311, 1224,  313, 1224,  164,  164,  164,  164,  312, 1224,
     1224, 1224, 1224,  316, 1224, 1224,  317,  310,  321,  322,
      323,  324,  314, 1224,  315, 1224, 1224, 1224, 1224,  326,

     1224, 1224,  327,  318, 1224, 1224, 1224, 1224, 1224, 1224,
      328,  319,  320,  330,  325,  332,  329,  333, 1224,  335,
     1224,  331,  334, 1224, 1224,  336,  345,  339, 1224,  346,
      338,  337,  341, 1224,  342, 1224, 1224,  344, 1224, 1224,
      340, 1224,  352, 1224, 1224,  347,  343, 1224, 1224, 1224,
     1224, 1224,  349, 1224,  350, 1224, 1224, 1224, 1224,  357,
      364,  360, 1224, 1224, 1224,  348,  355,  361,  358,  351,
      359,  366,  353,  363,  356,  367,  371, 1224,  365,  372,
      379,  368,  362,  370, 1224, 1224,  354, 1224,  369,  376,
      377,  383, 1224, 1224, 1224,  387,  388,  373,  375, 1224,

      380, 1224, 1224,  395,  382,  374, 1224,  385, 1224, 1224,
     1224, 1224,  397, 1224, 1224,  381, 1224, 1224, 1224, 1224,
     1224, 1224,  826,  378,  827, 1224, 1224,  384,  402, 1224,
      408,  389,  390,  393,  396,  401,  394,  398,  405, 1224,
      406,  410,  407,  399, 1224,  409, 1224,  403, 1224,  404,
      411,  412,  413,  414,  415,  416,  400,  417,  418,  419,
      420,  421,  425,  426,  427,  428, 1224, 1224,  430, 1224,
     1224, 1224, 1224, 1224, 1224, 1224,  429, 1224, 1224, 1224,
      422, 1224, 1224,  431,  432, 1224,  434, 1224,  435, 1224,
      442,  436, 1224, 1224,  444,  433,  437,  438,  443,  440,

     1224,  441, 1224,  439,  445,  446, 1224,  458,  452,  450,
     1224, 1224, 1224,  455,  447,  456, 1224,  448,  457,  453,
     1224, 1224, 1224,  460, 1224, 1224,  454,  449,  461, 1224,
     1224, 1224, 1224, 1224,  467, 1224, 1224, 1224, 1224,  459,
     1224,  480,  469, 1224, 1224,  470,  463,  465,  464,  462,
      472, 1224,  474,  466, 1224,  478,  468, 1224,  471, 1224,
      476, 1224, 1224, 1224,  481,  473,  475, 1224,  484,  477,
      485, 1224, 1224, 1224, 1224, 1224,  482, 1224,  486, 1224,
     1224, 1224,  487, 1224, 1224,  493, 1224, 1224,  491,  488,
     1224, 1224, 1224,  489,  498,  504,  505,  490,  492,  503,

      496,  497,  499, 1224,  501, 1224,  495,  500, 1224,  494,
     1224,  510, 1224, 1224, 1224,  512,  502,  521,  522, 1224,
      509,  511, 1224, 1224, 1224, 1224,  524, 1224, 1224,  517,
      520, 1224, 1224, 1224,  523,  513, 1224, 1224, 1224, 1224,
      518,  542, 1224,  526,  519,  528,  529, 1224,  531,  533,
      540,  530,  541,  527, 1224,  532, 1224, 1224,  537, 1224,
      534,  535,  536,  545,  538,  539,  543,  546,  548,  550,
      547,  549, 1224, 1224, 1224, 1224,  553,  544, 1224, 1224,
     1224, 1224,  554,  558, 1224, 1224, 1224,  552, 1224, 1224,
     1224,  561, 1224, 1224, 1224, 1224, 1224, 1224,  585,  555,

      556, 1224, 1224,  557,  559,  560, 1224,  563,  565,  570,
      571, 1224,  562,  574,  567,  568, 1224,  569,  564,  573,
      572,  575,  566,  578,  577, 1224, 1224,  580,  579, 1224,
      587, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224,  583,  581,  582,  584,  586, 1224, 1224, 1224, 1224,
     1224,  590,  592, 1224, 1224, 1224,  595,  588,  596,  593,
     1224,  608,  609,  598,  600, 1224,  589,  601, 1224,  594,
     1224,  603, 1224,  591,  606, 1224, 1224,  597, 1224, 1224,
      599, 1224,  607,  610, 1224,  602, 1224, 1224, 1224,  611,
     1224, 1224,  613, 1224, 1224, 1224,  619, 1224,  614, 1224,

      617, 1224,  612,  620, 1224,  623,  629,  622,  615,  628,
      616,  621, 1224,  618,  630,  624,  626,  632,  625, 1224,
     1224,  627, 1224, 1224, 1224,  633, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224,  634,  635, 1224, 1224, 1224,
     1224,  641,  643,  642, 1224,  649, 1224,  636,  650, 1224,
      640,  652,  655,  662,  651, 1224,  656,  653,  657,  661,
     1224,  658,  647, 1224,  667,  659, 1224,  654,  668,  670,
     1224,  669, 1224,  672, 1224, 1224, 1224,  665,  664, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
      666, 1224, 1224, 1224,  674, 1224,  677,  675,  671, 1224,

      681,  673,  757, 1224,  678,  682,  692,  687,  676,  686,
      683,  688,  679, 1224,  684,  689, 1224, 1224,  680,  694,
     1224,  685, 1224, 1224, 1224,  690, 1224, 1224, 1224, 1224,
     1224,  691,  693,  696,  695,  697,  699, 1224,  698, 1224,
     1224,  703,  706, 1224, 1224, 1224, 1224, 1224,  704,  707,
     1224, 1224,  705,  712, 1224, 1224,  708,  702,  713,  701,
      709,  719,  714,  718,  710, 1224, 1224,  720, 1224,  715,
      721, 1224,  716, 1224, 1224, 1224, 1224,  717,  722, 1224,
      724,  723,  726,  729, 1224, 1224,  727,  728,  731, 1224,
     1224, 1224,  733, 1224,  730, 1224, 1224,  734, 1224,  725,

     1224, 1224, 1224, 1224,  743,  744,  737, 1224, 1224, 1224,
     1224,  732, 1224,  747, 1224, 1224,  738,  745, 1224,  748,
      750,  746,  741, 1224,  756,  749,  753,  742,  751, 1224,
     1224, 1224,  761, 1224,  755,  754, 1224,  760,  759,  752,
     1224,  762, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224,  763,  767,  773, 1224,  776,
      769,  768,  778, 1224,  775, 1224, 1224, 1224,  787,  777,
      789, 1224,  779, 1224, 1224,  790,  780,  781,  782,  784,
     1224,  783,  785, 1224,  792, 1224,  791,  795,  796, 1224,
      788,  793,  797, 1224, 1224, 1224,  794, 1224, 1224,  798,

     1224, 1224, 1224, 1224, 1224, 1224,  801,  799, 1224,  803,
      802, 1224, 1224, 1224, 1224,  800, 1224,  804,  805,  806,
     1224,  807,  808, 1224,  810, 1224, 1224,  813,  814, 1224,
      811, 1224, 1224,  819,  809,  816, 1224, 1224,  817,  812,
     1224, 1224,  822,  815,  823,  825, 1224, 1224, 1224,  818,
      820, 1224, 1224, 1224, 1224,  824, 1224,  821,  830, 1224,
      828, 1224, 1224,  831, 1224,  840, 1224,  829,  833,  836,
     1224,  832, 1224,  837, 1224,  841, 1224, 1224,  835, 1224,
      834, 1224, 1224,  845, 1224,  838, 1224,  839, 1224,  842,
      847,  843, 1224, 1224, 1224,  844,  858, 1224, 1224, 1224,

      846, 1224, 1224,  849,  856,  853,  852, 1224,  860,  850,
     1224,  851, 1224,  855,  859,  861, 1224,  854,  857,  863,
     1224, 1224,  866, 1224, 1224,  862,  865, 1224,  867, 1224,
     1224, 1224,  873, 1224,  876, 1224, 1224,  875,  883,  869,
      877,  878, 1224,  881,  879, 1224, 1224, 1224,  891, 1224,
      885, 1224, 1224, 1224, 1224,  880, 1224, 1224, 1224,  890,
      886, 1224,  884,  894,  893, 1224,  887, 1224,  888, 1224,
      892, 1224, 1224,  898, 1224,  895, 1224,  897,  899, 1224,
     1224, 1224,  889, 1224,  900, 1224,  901,  906, 1224, 1224,
      896, 1224,  902, 1224,  907,  904, 1224,  909,  910,  903,

      908,  912, 1224, 1224,  915,  905, 1224, 1224, 1224, 1224,
      911, 1224, 1224, 1224,  916,  914,  918, 1224, 1224,  919,
      913, 1224,  917, 1224, 1224,  930, 1224,  926, 1224,  920,
      923, 1224,  925, 1224,  927, 1224,  933, 1224, 1224,  928,
     1224,  932, 1224, 1224,  929,  924, 1224,  935, 1224, 1224,
     1224, 1224,  938, 1224,  940,  942, 1224,  936,  931,  934,
      943, 1224,  944,  937,  939,  945,  949, 1224,  948,  946,
     1224,  950,  941, 1224, 1224, 1224,  947,  951, 1224, 1224,
     1224, 1224, 1224, 1224,  952, 1224, 1224, 1224, 1224, 1224,
      955,  957, 1224, 1224, 1224,  964, 1224, 1224,  956, 1224,

      982,  966,  967,  969,  968,  953,  980,  985, 1224, 1224,
      959,  962,  981,  965,  971,  972,  973,  974,  975,  976,
      977,  978,  984,  979, 1224,  983, 1224, 1224, 1224, 1224,
      991, 1224, 1224, 1224,  990, 1224,  992, 1224,  986,  987,
      988,  989, 1224, 1224, 1224, 1224, 1224, 1224,  993, 1224,
     1224, 1224,  997, 1224, 1224, 1224,  996, 1224, 1224,  995,
     1000, 1224,  994, 1002, 1001, 1003, 1005, 1008, 1007, 1011,
     1006, 1224,  998,  999, 1224, 1224, 1224, 1004, 1224, 1224,
     1224, 1224, 1018, 1012, 1016, 1015, 1013, 1014, 1017, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1019,

     1020, 1224, 1224, 1224, 1224, 1224, 1024, 1022, 1023, 1026,
     1029, 1030, 1021, 1031, 1224, 1224, 1035, 1033, 1025, 1224,
     1224, 1037, 1027, 1028, 1224, 1040, 1224, 1224, 1224, 1224,
     1224, 1224, 1032, 1224, 1034, 1224, 1224, 1224, 1224, 1224,
     1043, 1044, 1047, 1224, 1224, 1045, 1041, 1049, 1042, 1224,
     1056, 1224, 1057, 1224, 1052, 1224, 1051, 1224, 1048, 1053,
     1050, 1055, 1224, 1058, 1054, 1224, 1059, 1224, 1224, 1224,
     1060, 1224, 1224, 1224, 1064, 1224, 1224, 1224, 1061, 1224,
     1062, 1063, 1224, 1224, 1224, 1071, 1065, 1224, 1074, 1224,
     1067, 1068, 1066, 1069, 1070, 1073, 1076, 1077, 1075, 1072,

     1224, 1224, 1224, 1224, 1078, 1224, 1089, 1090, 1224, 1224,
     1079, 1224, 1224, 1224, 1224, 1205, 1224, 1080, 1224, 1085,
     1224, 1081, 1224, 1224, 1088, 1224, 1224, 1224, 1083, 1224,
     1224, 1086, 1082, 1084, 1224, 1095, 1092, 1096, 1091, 1093,
     1094, 1097, 1098, 1099, 1100, 1224, 1102, 1224, 1101, 1224,
     1104, 1224, 1224, 1224, 1224, 1224, 1111, 1224, 1224, 1103,
     1224, 1106, 1224, 1224, 1224, 1105, 1224, 1121, 1107, 1224,
     1108, 1109, 1110, 1224, 1112, 1116, 1113, 1224, 1117, 1224,
     1224, 1114, 1119, 1224, 1224, 1115, 1122, 1224, 1123, 1224,
     1125, 1224, 1118, 1224, 1224, 1224, 1120, 1128, 1224, 1224,

     1132, 1224, 1224, 1224, 1224, 1129, 1124, 1224, 1224, 1130,
     1131, 1134, 1224, 1224, 1224, 1224, 1133, 1140, 1139, 1141,
     1142, 1143, 1138, 1224, 1224, 1224, 1224, 1224, 1135, 1224,
     1151, 1136, 1137, 1224, 1224, 1224, 1147, 1224, 1224, 1144,
     1149, 1224, 1224, 1148, 1145, 1146, 1224, 1159, 1150, 1156,
     1161, 1224, 1154, 1153, 1162, 1155, 1224, 1152, 1163, 1165,
     1224, 1160, 1224, 1224, 1166, 1224, 1164, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1170, 1224, 1168,
     1174, 1186, 1187, 1224, 1224, 1175, 1224, 1181, 1167, 1171,
     1180, 1224, 1191, 1169, 1179, 1172, 1184, 1190, 1185, 1173,

     1188, 1189, 1224, 1224, 1193, 1224, 1176, 1182, 1194, 1183,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1192,
     1196, 1224, 1224, 1224, 1224, 1197, 1201, 1202, 1224, 1224,
     1224, 1224, 1198, 1203, 1224, 1199, 1200, 1207, 1206, 1210,
     1208, 1209, 1224, 1224, 1204, 1213, 1224, 1224, 1214, 1211,
     1220, 1221, 1222, 1223, 1224, 1212, 1224, 1224, 1224, 1224,
     1224, 1195, 1224, 1224, 1224, 1224, 1224, 1178, 1177, 1224,
     1219, 1215, 1224, 1224, 1224, 1224, 1224, 1217, 1224, 1216,
     1218,   59,   59,  166,  166,  166,  164,  164,  164, 1224,
     1224, 1224, 1224, 1224, 1158, 1157, 1224, 1224, 1224, 1224,

     1224, 1224, 1224, 1127, 1126, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1087,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1046, 1224, 1039, 1038, 1224, 1224,
     1224, 1036, 1224, 1224, 1224, 1224, 1224, 1224, 1010, 1009,
     1224, 1224, 1224, 1224, 1224, 1224, 1224,  970, 1224,  963,
      961,  960,  958,  954, 1224, 1224, 1224, 1224,  922,  921,
     1224,  882, 1224, 1224, 1224, 1224,  874,  872,  871,  870,
     1224, 1224,  868, 1224, 1224,  864, 1224, 1224, 1224, 1224,

     1224,  848, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224,  786, 1224, 1224, 1224,  774,  772,  771,  770,
     1224,  766,  765,  764,  758, 1224, 1224, 1224, 1224,  740,
      739,  736,  735,  711,  700, 1224,  663, 1224, 1224,  648,
      646,  645,  644,  639,  638,  637,  631, 1224,  605,  604,
     1224,  576, 1224,  525, 1224, 1224,  516,  515,  514, 1224,
      506, 1224, 1224, 1224,  483, 1224, 1224, 1224,  479, 1224,
     1224, 1224, 1224, 1224,  451, 1224, 1224, 1224,  386, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224,  165, 1224, 1224,  162,   58,  161,  138,  116,

      113, 1224,   68,   67,   58, 1224,    3, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224
    } ;

static yyconst flex_int16_t yy_chk[2578] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        5,   18,   20,    5,    8,    8,   18,    8,    8,    8,
        8,   41,    8,   50,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,   41,   50,  267,

      267,   20,    8,    8,    8,   50,    8,  267,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   34,   75,   34,   82,
       34,   19,   38,   19,   34,   64,   38,   34,   39,   19,
       19,   19,   19,   19,   19,   35,   44,   39,   39,   35,
       57, 1225,  114,   57,  109,   85,   35,   75,   60,   82,
       44,   70,   19,   26,   64,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   60,

       76,   70,   85,   26,   26,   26,   76,   26,  109,  114,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27, 1223,   74,   32,
       77,   32,   27,   78,   87,   79,   77,  290,  290,   78,
       27,   27,   27,   27,   27,   27,   32,   32,   74,   32,
       32,   32,   79,   33,   77,   32,   81,   37,   32,   33,
       33,   45,   87,   33,   80,   37,   33,   32,   36,   37,
       36,   45,   78,   36,   45,   37,   33,   37,   45,   36,

       48,   36,   43,   43,   43,   80, 1222,   36,   81,   72,
      538,   36,   43,   46,   43,   46,   72,   94,   48,   86,
       43,   46,   48,   83,   46,   46,   90,   51,   46,   51,
       46,   46,   94,   46,   51,   83,   48,   49,   49,   49,
       91,   49,   49,   90,   51,   49,   86,   88,  538,   49,
       49,   84,   72,   49,   83,   89,   49,   49,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       84,   63,   92,   91,   88,   93,   89,   84,   95,  103,
       96,   99,  105,  100,   97,   63,   63,   63,   63,   63,
       97,   95,  104,   63,   99,   63,   63,   98,  100,   93,

       92,  101,   92,   98,  103,  106,   93,  102,   97,   93,
       96,  110,   99, 1221,  105,  107,  104,  117,  115,  106,
      119,  101,  102,  110,   63,   63,   63,   63,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   98,  102,
      108,  107,  111,  112,  113,   65,  115,  116,  117,  118,
      120,  121,  119,  108,  118,  111,  131,  113,  112,  126,
      116,  122,  116,  123,  112,  120,  127,  121,  125,  128,
     1220,  132,  131, 1219,   65,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,  122,  125,  129,  123,  123,
       66,  126,  124,  130,  127,  128,  132,  134,   66,   66,

       66,   66,   66,   66,   73,  124,  133,   73,  137,   73,
       73, 1218,   73,  135,  130,  138,  140,  129,  124,  136,
      134,  133,  124,  130,   73,   73,  137,   73,   73,   73,
      135,  141,  143,   73,  142,  144,   73,  145,  147,  133,
      135,  139,  136,  138,  136,   73,  139,  142,  148,  151,
      149,  140,  143,  147,  139,  150,  146,  153,  145,  146,
      146,  148,  141,  149,  152,  141,  139,  144,  150,  146,
      153,  154,  151,  151,  155,  156,  158,  157,  161,  159,
      149,  148,  163,  160,  430,  171,  174,  152,  172,  173,
      175,  430,  180,  172,  158,  159,  154,  160,  171,  172,

      160,  174,  163,  156,  157,  180,  161,  155,  166,  166,
      166,  166,  166,  166,  166,  166,  166,  166,  166,  166,
      175,  166,  183,  178,  173,  176,  182,  169,  170,  179,
      186,  379,  379,  192,  183,  166,  166,  166,  166,  166,
      169,  170,  178,  166,  181,  166,  166,  182,  176,  179,
      185,  187,  169,  170,  190,  189,  191,  181,  181,  194,
      195,  193,  186,  181,  187,  185,  197,  181,  189,  190,
      192,  198,  194,  196,  166,  166,  166,  166,  193,  199,
      200,  201,  205,  197,  204,  206,  198,  191,  202,  202,
      202,  202,  195,  207,  196,  208,  209,  211,  218,  205,

      212,  213,  206,  199,  215,  214,  216,  217,  219,  220,
      207,  200,  201,  209,  204,  212,  208,  213,  222,  215,
      221,  211,  214,  223,  226,  216,  227,  219,  228,  227,
      218,  217,  221,  229,  222,  230,  232,  226,  231,  227,
      220,  234,  233,  235,  238,  228,  223,  236,  241,  237,
      239,  248,  230,  245,  231,  233,  240,  247,  249,  236,
      241,  238,  244,  246,  258,  229,  234,  239,  236,  232,
      237,  245,  233,  240,  235,  246,  249,  252,  244,  251,
      254,  246,  239,  248,  255,  251,  233,  257,  247,  253,
      253,  258,  260,  254,  261,  264,  265,  251,  252,  266,

      255,  268,  269,  270,  257,  251,  271,  261,  264,  265,
      274,  277,  272,  278,  273,  255,  270,  275,  279, 1217,
      283,  287,  711,  253,  711,  272,  276,  260,  274,  280,
      278,  266,  266,  268,  271,  273,  269,  272,  276,  284,
      276,  280,  277,  272,  289,  279,  292,  275,  293,  275,
      283,  284,  286,  286,  286,  286,  272,  287,  288,  288,
      288,  288,  291,  291,  291,  291,  294,  295,  293,  296,
      299,  301,  298,  302,  297,  300,  292,  304,  307,  303,
      289,  305,  317,  294,  295,  309,  297,  310,  297,  313,
      302,  297,  314,  306,  304,  296,  297,  298,  303,  300,

      315,  301,  318,  299,  305,  306,  316,  317,  309,  307,
      319,  320,  325,  314,  306,  315,  326,  306,  316,  310,
      327,  328,  331,  319,  332,  333,  313,  306,  320,  329,
      334,  335,  337,  336,  331,  344,  340,  341,  343,  318,
      339,  346,  333,  348,  351,  334,  326,  328,  327,  325,
      336,  354,  339,  329,  346,  344,  332,  355,  335,  357,
      341,  356,  358,  360,  348,  337,  340,  362,  354,  343,
      355,  361,  365,  364,  366,  367,  351,  370,  356,  368,
      369,  371,  357,  374,  372,  365,  373,  380,  362,  358,
      381,  382,  383,  360,  370,  375,  375,  361,  364,  374,

      368,  369,  371,  375,  373,  384,  367,  372,  389,  366,
      390,  381,  393,  394,  396,  383,  373,  395,  395,  401,
      380,  382,  398,  403,  399,  400,  396,  402,  404,  389,
      394,  406,  407,  409,  395,  384,  410, 1214,  412,  432,
      390,  411,  429,  398,  393,  399,  400,  405,  402,  404,
      410,  401,  410,  398,  411,  403,  431,  433,  406,  435,
      405,  405,  405,  412,  407,  409,  411,  417,  422,  429,
      417,  422,  434,  437,  417,  422,  432,  411,  436,  438,
      439,  441,  433,  435,  440,  442,  445,  431,  443,  444,
      450,  438,  448,  452,  446,  447,  449, 1212,  460,  434,

      434,  455,  462,  434,  436,  437,  453,  440,  442,  446,
      446,  460,  439,  449,  443,  444,  454,  445,  441,  448,
      447,  450,  442,  453,  452,  456,  457,  455,  454,  458,
      462,  463,  459,  461,  464,  465,  466,  467,  468,  469,
      471,  458,  456,  457,  459,  461,  472,  473,  474,  475,
      476,  465,  467,  477,  478,  482,  471,  463,  472,  468,
      481,  483,  483,  473,  475,  485,  464,  476,  484,  469,
      486,  478,  488,  466,  481,  487,  490,  472,  491,  492,
      474,  493,  482,  484,  494,  477,  495,  496,  497,  485,
      498,  499,  487,  500,  502,  501,  494,  503,  488,  510,

      492,  511,  486,  495,  509,  498,  504,  497,  490,  503,
      491,  496,  504,  493,  505,  499,  501,  509,  500,  512,
      513,  502,  505,  517,  518,  510,  519,  524,  520,  526,
      528,  527,  529,  531,  532,  511,  512,  533,  537,  540,
      541,  518,  520,  519,  534,  526,  535,  513,  527,  536,
      517,  529,  533,  541,  528,  543,  534,  531,  535,  540,
      544,  536,  524,  545,  546,  537,  550,  532,  547,  549,
      552,  548,  546,  551,  547,  549,  553,  544,  543,  548,
      554,  551,  555,  556,  557,  558,  559,  560,  628,  562,
      545,  561,  570,  567,  553,  563,  556,  554,  550,  564,

      560,  552,  628,  565,  557,  561,  567,  563,  555,  562,
      561,  564,  558,  566,  561,  565,  568,  571,  559,  570,
      572,  561,  573,  574,  575,  566,  577,  578,  579,  580,
      582,  566,  568,  572,  571,  573,  575,  581,  574,  586,
      589,  579,  580,  583,  584,  587,  588,  591,  579,  581,
      590,  592,  579,  586,  593,  597,  582,  578,  586,  577,
      583,  589,  586,  588,  584,  595,  598,  590,  594,  586,
      591,  596,  586,  599,  601,  602,  600,  587,  592,  606,
      594,  593,  595,  598,  603,  607,  596,  597,  600,  610,
      613,  614,  602,  615,  599,  617,  616,  603,  619,  594,

      618,  620,  622,  621,  614,  615,  606,  623,  625,  624,
      626,  601,  627,  618,  632,  634,  607,  616,  633,  619,
      621,  617,  610,  636,  627,  620,  624,  613,  622,  635,
      640,  642,  634,  643,  626,  625,  647,  633,  632,  623,
      650,  635,  651,  652,  654,  653,  656,  657,  658,  659,
      662,  664,  660,  665,  666,  636,  640,  647,  675,  651,
      643,  642,  653,  672,  650,  674,  677,  676,  664,  652,
      666,  680,  654,  679,  678,  672,  656,  657,  658,  660,
      681,  659,  662,  682,  675,  683,  674,  678,  679,  684,
      665,  676,  680,  685,  687,  688,  677,  686,  689,  681,

      690,  691,  692,  693,  694,  695,  684,  682,  696,  686,
      685,  698,  697,  701,  699,  683,  703,  687,  688,  689,
      704,  690,  691,  705,  693,  706,  707,  696,  697,  709,
      694,  708,  710,  704,  692,  699,  712,  713,  701,  695,
      716,  714,  707,  698,  708,  710,  715,  717,  718,  703,
      705,  719,  724,  720,  725,  709,  721,  706,  714,  722,
      712,  723,  727,  715,  728,  724,  731,  713,  717,  720,
      730,  716,  733,  721,  734,  725,  737,  738,  719,  749,
      718,  741,  743,  731,  744,  722,  745,  723,  746,  727,
      734,  728,  754,  748,  756,  730,  749,  752,  755,  757,

      733,  787,  760,  737,  746,  744,  743,  762,  754,  738,
      761,  741,  769,  745,  752,  755,  773,  744,  748,  757,
      775,  777,  761,  780,  781,  756,  760,  782,  762,  784,
      785,  788,  773,  789,  777,  790,  792,  775,  787,  769,
      780,  781,  791,  785,  782,  793,  794,  796,  795,  797,
      789,  798,  799,  800,  801,  784,  795,  802,  806,  794,
      790,  803,  788,  798,  797,  807,  791,  804,  792,  805,
      796,  808,  809,  802,  810,  799,  811,  801,  803,  812,
      813,  814,  793,  815,  804,  816,  805,  810,  818,  819,
      800,  820,  806,  821,  811,  808,  822,  813,  814,  807,

      812,  816,  823,  825,  820,  809,  824,  828,  829,  830,
      815,  831,  833,  836,  821,  819,  823,  832,  835,  824,
      818,  837,  822,  838,  839,  836,  840,  831,  841,  825,
      828,  842,  830,  843,  832,  844,  839,  847,  845,  833,
      849,  838,  850,  851,  835,  829,  852,  841,  854,  853,
      855,  856,  844,  857,  847,  850,  858,  842,  837,  840,
      851,  859,  852,  843,  845,  853,  857,  860,  856,  854,
      862,  858,  849,  865,  866,  867,  855,  859,  869,  873,
      875,  876,  877,  878,  860,  879,  880,  890,  891,  887,
      865,  867,  894,  900,  892,  875,  886, 1203,  866,  901,

      891,  877,  878,  880,  879,  862,  887,  894,  899,  893,
      869,  873,  890,  876,  883,  883,  883,  883,  883,  883,
      883,  883,  893,  886,  883,  892,  895,  896,  897,  898,
      900,  904,  905,  906,  899,  907,  901,  908,  895,  896,
      897,  898,  910,  911,  913,  912,  918,  914,  904,  915,
      916,  920,  908,  917,  919,  927,  907,  923,  928,  906,
      912,  930,  905,  914,  913,  915,  917,  920,  919,  923,
      918,  924,  910,  911,  925,  926,  929,  916,  932,  933,
      934,  935,  930,  924,  928,  927,  925,  926,  929,  937,
      936,  938,  940,  942,  939,  946,  948,  944,  949,  932,

      933,  947,  950,  953,  956,  962,  937,  935,  936,  939,
      944,  946,  934,  947,  964,  965,  953,  949,  938,  966,
      967,  956,  940,  942,  968,  962,  979,  981,  984,  985,
      982,  986,  948, 1196,  950,  994,  987,  990,  989,  999,
      966,  967,  979,  988,  996,  968,  964,  982,  965,  997,
      990, 1000,  994, 1002,  986, 1004,  985, 1006,  981,  987,
      984,  989, 1007,  996,  988, 1008,  997, 1011, 1012, 1019,
      999, 1014, 1013, 1015, 1006, 1017, 1021, 1025, 1000, 1018,
     1002, 1004, 1020, 1023, 1022, 1015, 1007, 1026, 1019, 1028,
     1011, 1012, 1008, 1013, 1014, 1018, 1021, 1022, 1020, 1017,

     1029, 1031, 1033, 1035, 1023, 1037, 1039, 1039, 1042, 1043,
     1025, 1049, 1044, 1045, 1054, 1195, 1051, 1026, 1047, 1033,
     1050, 1028, 1069, 1194, 1037, 1192, 1052, 1053, 1031, 1055,
     1080, 1035, 1029, 1031, 1061, 1047, 1043, 1049, 1042, 1044,
     1045, 1050, 1051, 1052, 1053, 1056, 1055, 1062, 1054, 1063,
     1061, 1065, 1066, 1083, 1067, 1068, 1069, 1070, 1072, 1056,
     1077, 1063, 1071, 1078, 1079, 1062, 1073, 1080, 1065, 1084,
     1066, 1067, 1068, 1082, 1070, 1072, 1071, 1088, 1073, 1092,
     1091, 1071, 1078, 1093, 1094, 1071, 1082, 1096, 1083, 1097,
     1088, 1099, 1077, 1098, 1100, 1102, 1079, 1091, 1103, 1105,

     1096, 1104, 1109, 1108, 1106, 1092, 1084, 1110, 1112, 1093,
     1094, 1098, 1113, 1114, 1116, 1117, 1097, 1105, 1104, 1106,
     1106, 1108, 1103, 1115, 1118, 1121, 1123, 1124, 1099, 1134,
     1117, 1100, 1102, 1132, 1125, 1133, 1113, 1138, 1141, 1109,
     1115, 1147, 1142, 1114, 1110, 1112, 1139, 1132, 1116, 1125,
     1134, 1148, 1123, 1121, 1138, 1124, 1149, 1118, 1139, 1142,
     1150, 1133, 1151, 1154, 1147, 1152, 1141, 1153, 1155, 1156,
     1159, 1161, 1163, 1170, 1164, 1165, 1171, 1150, 1174, 1149,
     1154, 1168, 1168, 1173, 1166, 1155, 1167, 1163, 1148, 1151,
     1161, 1168, 1171, 1149, 1159, 1152, 1166, 1170, 1167, 1153,

     1169, 1169, 1172, 1179, 1173, 1181, 1156, 1164, 1174, 1165,
     1169, 1183, 1184, 1185, 1186, 1187, 1191, 1193, 1201, 1172,
     1179, 1197, 1198, 1199, 1200, 1181, 1186, 1187, 1202, 1204,
     1206, 1207, 1183, 1191, 1208, 1184, 1185, 1198, 1197, 1201,
     1199, 1200, 1209, 1210, 1193, 1206, 1211, 1213, 1207, 1202,
     1215, 1215, 1216, 1216, 1190, 1204, 1189, 1188, 1182, 1180,
     1215, 1178, 1216, 1176, 1175, 1162, 1160, 1158, 1157, 1146,
     1213, 1208, 1145, 1144, 1143, 1140, 1137, 1210, 1136, 1209,
     1211, 1226, 1226, 1227, 1227, 1227, 1228, 1228, 1228, 1135,
     1131, 1130, 1129, 1128, 1127, 1126, 1122, 1120, 1119, 1111,

     1107, 1101, 1095, 1090, 1089, 1086, 1085, 1081, 1076, 1075,
     1074, 1064, 1060, 1059, 1058, 1057, 1048, 1041, 1040, 1036,
     1034, 1032, 1030, 1027, 1024, 1016, 1005, 1003, 1001,  998,
      995,  993,  992,  991,  983,  980,  978,  977,  976,  975,
      974,  973,  972,  971,  970,  969,  961,  960,  959,  957,
      955,  954,  952,  951,  945,  943,  941,  931,  922,  921,
      909,  903,  902,  889,  888,  885,  884,  882,  881,  874,
      872,  871,  868,  864,  863,  861,  846,  834,  827,  826,
      817,  786,  783,  779,  778,  776,  774,  772,  771,  770,
      768,  767,  764,  763,  759,  758,  753,  751,  750,  747,

      742,  736,  732,  729,  726,  702,  673,  671,  670,  669,
      668,  667,  663,  661,  655,  649,  648,  646,  645,  644,
      641,  639,  638,  637,  631,  630,  629,  612,  611,  609,
      608,  605,  604,  585,  576,  569,  542,  539,  530,  525,
      523,  522,  521,  516,  515,  514,  506,  489,  480,  479,
      470,  451,  408,  397,  392,  391,  388,  387,  386,  385,
      378,  363,  359,  353,  352,  350,  349,  347,  345,  342,
      338,  330,  312,  311,  308,  285,  282,  281,  263,  262,
      259,  256,  250,  243,  242,  225,  224,  210,  203,  188,
      184,  177,  164,   71,   69,   59,   58,   52,   47,   42,

       40,   31,   25,   23,    6,    3, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224
    } ;

static yyconst flex_int16_t yy_rule_linenum[271] =
    {   0,
       45,   46,   48,   49,   50,   51,   52,   53,   54,   55,
       56,   57,   58,   59,   60,   61,   62,   63,   64,   65,
       66,   67,   68,   69,   70,   71,   72,   73,   74,   75,
       76,   78,   79,   80,   81,   82,   83,   84,   85,   86,
       87,   88,   89,   90,   91,   92,   93,   94,   95,   96,
       97,   98,   99,  100,  101,  102,  103,  104,  105,  106,
      107,  108,  109,  110,  111,  112,  113,  114,  115,  116,
      118,  119,  120,  121,  122,  123,  125,  127,  128,  129,
      131,  132,  133,  134,  135,  137,  138,  139,  140,  142,
      143,  144,  145,  146,  147,  148,  149,  151,  152,  153,

      154,  155,  156,  157,  158,  159,  160,  161,  162,  164,
      165,  166,  167,  168,  169,  170,  171,  172,  173,  174,
      175,  176,  177,  178,  179,  180,  181,  182,  183,  184,
      185,  186,  187,  188,  189,  190,  192,  193,  194,  195,
      196,  197,  198,  199,  200,  201,  202,  203,  204,  205,
      206,  207,  208,  209,  210,  211,  212,  213,  214,  216,
      217,  218,  219,  220,  221,  222,  223,  224,  225,  226,
      227,  228,  229,  230,  231,  232,  233,  234,  235,  236,
      237,  239,  240,  241,  242,  243,  244,  245,  246,  247,
      248,  249,  250,  251,  252,  253,  254,  255,  256,  257,

      258,  259,  260,  261,  262,  263,  265,  266,  267,  268,
      269,  271,  272,  273,  274,  275,  277,  278,  279,  281,
      283,  284,  285,  286,  287,  288,  289,  291,  293,  294,
      295,  296,  297,  298,  299,  301,  302,  303,  305,  306,
      307,  309,  310,  311,  312,  313,  314,  315,  316,  317,
      318,  319,  321,  322,  323,  324,  325,  326,  327,  328,
      329,  330,  331,  333,  334,  335,  337,  338,  339,  340
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "../s/bif.l"
/******************************************************************************
* Copyright 2015-2022 Xilinx, Inc.
* Copyright 2022-2023 Advanced Micro Devices, Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
******************************************************************************/
/* This is the lexer/flexer input file, that tokenizes the BIF file */
/* Run the bif.y file first through bison to generate the bif.tab.h file, which is included herein */
/* Then run this file through flex to generate the bif.yy.c source code */
#line 23 "../s/bif.l"
 #include <stdio.h>
 #include "bifscanner.h"
 #include "bif.tab.hpp"
 #include "authentication.h"
 #include "encryption.h"
 typedef BIF::BisonParser::token tok;
/* see http://www.lysator.liu.se/c/ANSI-C-grammar-l.html */
#line 36 "../s/bif.l"
     # define YY_USER_ACTION  yylloc->columns (yyleng);
#line 1523 "../bisonflex/bif.yy.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#include <unistd.h>
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */
/* %if-bison-bridge */
/* %endif */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */
/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define ECHO LexerOutput( yytext, yyleng )
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
\
/* %if-c++-only C++ definition \ */\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#define YY_FATAL_ERROR(msg) LexerError( msg )
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define YY_DECL int yyFlexLexer::yylex()
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
/* %% [7.0] user's declarations go here */
#line 39 "../s/bif.l"



   yylloc->step ();


#line 1687 "../bisonflex/bif.yy.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyin = & std::cin;
/* %endif */

		if ( ! yyout )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyout = & std::cout;
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1225 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1224 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				std::cerr << "--scanner backing up\n";
			else if ( yy_act < 271 )
				std::cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
				         "(\"" << yytext << "\")\n";
			else if ( yy_act == 271 )
				std::cerr << "--accepting default rule (\"" << yytext << "\")\n";
			else if ( yy_act == 272 )
				std::cerr << "--(end of buffer or a NUL)\n";
			else
				std::cerr << "--EOF (start condition " << YY_START << ")\n";
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 45 "../s/bif.l"
{ comment(); }
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 46 "../s/bif.l"
yylloc->lines (1); yylloc->step ();
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 48 "../s/bif.l"
return tok::BOOTLOADER;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 49 "../s/bif.l"
return tok::PRESIGN;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 50 "../s/bif.l"
return tok::AC;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 51 "../s/bif.l"
return tok::UDF_DATA;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 52 "../s/bif.l"
return tok::XIP_MODE;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 53 "../s/bif.l"
return tok::BOOT;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 54 "../s/bif.l"
return tok::USER;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 55 "../s/bif.l"
return tok::STATIC;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 56 "../s/bif.l"
return tok::NOAUTOSTART;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 57 "../s/bif.l"
return tok::MULTIBOOT;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 58 "../s/bif.l"
return tok::PROTECTED;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 59 "../s/bif.l"
return tok::ALIGNMENT;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 60 "../s/bif.l"
return tok::EARLY_HANDOFF;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 61 "../s/bif.l"
return tok::DELAY_HANDOFF;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 62 "../s/bif.l"
return tok::DELAY_LOAD;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 63 "../s/bif.l"
return tok::DELAY_AUTH;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 64 "../s/bif.l"
return tok::HIVEC;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 65 "../s/bif.l"
return tok::BLOCKS;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 66 "../s/bif.l"
return tok::AUTHBLOCKS;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 67 "../s/bif.l"
return tok::BIGENDIAN;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 68 "../s/bif.l"
return tok::A32_MODE;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 69 "../s/bif.l"
return tok::PARTITION;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 70 "../s/bif.l"
return tok::IMAGE;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 71 "../s/bif.l"
return tok::METAHEADER;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 72 "../s/bif.l"
return tok::BIF_SECTION;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 73 "../s/bif.l"
return tok::LOCKSTEP;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 74 "../s/bif.l"
return tok::INCLUDE;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 75 "../s/bif.l"
return tok::TCM_BOOT;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 76 "../s/bif.l"
return tok::OPTIONAL_DATA;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 78 "../s/bif.l"
yylval->number = tok::OFFSET;                   return tok::OFFSET;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 79 "../s/bif.l"
yylval->number = tok::RESERVE_LEGACY;           return tok::RESERVE_LEGACY;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 80 "../s/bif.l"
yylval->number = tok::RESERVE;                  return tok::RESERVE;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 81 "../s/bif.l"
yylval->number = tok::LOAD;                     return tok::LOAD;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 82 "../s/bif.l"
yylval->number = tok::COPY;                     return tok::COPY;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 83 "../s/bif.l"
yylval->number = tok::STARTUP;                  return tok::STARTUP;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 84 "../s/bif.l"
yylval->number = tok::PARTITION_NUM;            return tok::PARTITION_NUM;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 85 "../s/bif.l"
yylval->number = tok::INIT;                     return tok::INIT;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 86 "../s/bif.l"
yylval->number = tok::UDF_BH;                   return tok::UDF_BH;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 87 "../s/bif.l"
yylval->number = tok::AES_KEY_FILE;             return tok::AES_KEY_FILE;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 88 "../s/bif.l"
yylval->number = tok::PPK_FILE;                 return tok::PPK_FILE;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 89 "../s/bif.l"
yylval->number = tok::PSK_FILE;                 return tok::PSK_FILE;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 90 "../s/bif.l"
yylval->number = tok::SPK_FILE;                 return tok::SPK_FILE;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 91 "../s/bif.l"
yylval->number = tok::SSK_FILE;                 return tok::SSK_FILE;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 92 "../s/bif.l"
yylval->number = tok::SPK_SIGNATURE_FILE;       return tok::SPK_SIGNATURE_FILE;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 93 "../s/bif.l"
yylval->number = tok::BH_SIGNATURE_FILE;        return tok::BH_SIGNATURE_FILE;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 94 "../s/bif.l"
yylval->number = tok::HEADER_SIGNATURE_FILE;    return tok::HEADER_SIGNATURE_FILE;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 95 "../s/bif.l"
yylval->number = tok::BOOTVECTORS;              return tok::BOOTVECTORS;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 96 "../s/bif.l"
yylval->number = tok::BOOTIMAGE;                return tok::BOOTIMAGE;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 97 "../s/bif.l"
yylval->number = tok::PARENT_ID;                return tok::PARENT_ID; 
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 98 "../s/bif.l"
yylval->number = tok::ID_CODE;                  return tok::ID_CODE;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 99 "../s/bif.l"
yylval->number = tok::EXT_ID_CODE;              return tok::EXT_ID_CODE;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 100 "../s/bif.l"
yylval->number = tok::ID;                       return tok::ID; 
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 101 "../s/bif.l"
yylval->number = tok::NAME;                     return tok::NAME; 
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 102 "../s/bif.l"
yylval->number = tok::PFILE;                    return tok::PFILE;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 103 "../s/bif.l"
yylval->number = tok::BH_KEY_FILE;              return tok::BH_KEY_FILE;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 104 "../s/bif.l"
yylval->number = tok::PUF_HELPER_FILE;          return tok::PUF_HELPER_FILE;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 105 "../s/bif.l"
yylval->number = tok::PMUFW_IMAGE;              return tok::PMUFW_IMAGE;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 106 "../s/bif.l"
yylval->number = tok::PMCDATA;                  return tok::PMCDATA;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 107 "../s/bif.l"
yylval->number = tok::BH_KEY_IV;                return tok::BH_KEY_IV;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 108 "../s/bif.l"
yylval->number = tok::UNIQUE_ID;                return tok::UNIQUE_ID;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 109 "../s/bif.l"
yylval->number = tok::PARENT_UNIQUE_ID;         return tok::PARENT_UNIQUE_ID;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 110 "../s/bif.l"
yylval->number = tok::FUNCTION_ID;              return tok::FUNCTION_ID;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 111 "../s/bif.l"
yylval->number = tok::PCR_NUMBER;               return tok::PCR_NUMBER;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 112 "../s/bif.l"
yylval->number = tok::PCR_MEASUREMENT_INDEX;    return tok::PCR_MEASUREMENT_INDEX;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 113 "../s/bif.l"
yylval->number = tok::IMAGE_STORE;              return tok::IMAGE_STORE;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 114 "../s/bif.l"
yylval->number = tok::TCM_A_REGION;             return tok::TCM_A_REGION;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 115 "../s/bif.l"
yylval->number = tok::TCM_B_REGION;             return tok::TCM_B_REGION;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 116 "../s/bif.l"
yylval->number = tok::TCM_C_REGION;             return tok::TCM_C_REGION;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 118 "../s/bif.l"
yylval->number = tok::BBRAM_KEK_IV;             return tok::BBRAM_KEK_IV;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 119 "../s/bif.l"
yylval->number = tok::BH_KEK_IV;                return tok::BH_KEK_IV;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 120 "../s/bif.l"
yylval->number = tok::EFUSE_KEK_IV;             return tok::EFUSE_KEK_IV;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 121 "../s/bif.l"
yylval->number = tok::EFUSE_USER_KEK0_IV;       return tok::EFUSE_USER_KEK0_IV;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 122 "../s/bif.l"
yylval->number = tok::EFUSE_USER_KEK1_IV;       return tok::EFUSE_USER_KEK1_IV;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 123 "../s/bif.l"
yylval->number = tok::USER_KEYS;                return tok::USER_KEYS;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 125 "../s/bif.l"
yylval->number = tok::FAMILY_KEY;               return tok::FAMILY_KEY;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 127 "../s/bif.l"
return tok::ENCRYPTION;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 128 "../s/bif.l"
yylval->number = 0;                             return tok::NONE;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 129 "../s/bif.l"
yylval->number = Encryption::AES;               return tok::ENCRVALUE;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 131 "../s/bif.l"
return tok::AUTHENTICATION;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 132 "../s/bif.l"
yylval->number = Authentication::RSA;           return tok::AUTHVALUE;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 133 "../s/bif.l"
yylval->number = Authentication::ECDSA;         return tok::AUTHVALUE;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 134 "../s/bif.l"
yylval->number = Authentication::ECDSA;         return tok::AUTHVALUE;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 135 "../s/bif.l"
yylval->number = Authentication::ECDSAp521;     return tok::AUTHVALUE;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 137 "../s/bif.l"
return tok::CHECKSUM;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 138 "../s/bif.l"
yylval->number = Checksum::MD5;                 return tok::CHECKSUMVALUE;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 139 "../s/bif.l"
yylval->number = Checksum::SHA2;                return tok::CHECKSUMVALUE;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 140 "../s/bif.l"
yylval->number = Checksum::SHA3;                return tok::CHECKSUMVALUE;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 142 "../s/bif.l"
return tok::PARTITION_OWNER;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 143 "../s/bif.l"
return tok::PARTITION_OWNER;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 144 "../s/bif.l"
yylval->number = PartitionOwner::FSBL;          return tok::POWNERVALUE ;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 145 "../s/bif.l"
yylval->number = PartitionOwner::UBOOT;         return tok::POWNERVALUE ;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 146 "../s/bif.l"
yylval->number = PartitionOwner::FSBL;          return tok::POWNERVALUE ;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 147 "../s/bif.l"
yylval->number = PartitionOwner::UBOOT;         return tok::POWNERVALUE ;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 148 "../s/bif.l"
yylval->number = PartitionOwner::FSBL;          return tok::POWNERVALUE ;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 149 "../s/bif.l"
yylval->number = PartitionOwner::UBOOT;         return tok::POWNERVALUE ;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 151 "../s/bif.l"
return tok::PARTITION_TYPE;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 152 "../s/bif.l"
return tok::PARTITION_TYPE;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 153 "../s/bif.l"
yylval->number = PartitionType::CONFIG_DATA_OBJ;   return tok::PTYPEVALUE;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 154 "../s/bif.l"
yylval->number = PartitionType::RAW;               return tok::PTYPEVALUE;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 155 "../s/bif.l"
yylval->number = PartitionType::CFI;               return tok::PTYPEVALUE;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 156 "../s/bif.l"
yylval->number = PartitionType::CFI_GSC;           return tok::PTYPEVALUE;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 157 "../s/bif.l"
yylval->number = PartitionType::SLR_BOOT;          return tok::PTYPEVALUE;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 158 "../s/bif.l"
yylval->number = PartitionType::SLR_CONFIG;        return tok::PTYPEVALUE;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 159 "../s/bif.l"
yylval->number = PartitionType::SLR_SLAVE;         return tok::PTYPEVALUE;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 160 "../s/bif.l"
yylval->number = PartitionType::SLR_SLAVE_BOOT;    return tok::PTYPEVALUE;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 161 "../s/bif.l"
yylval->number = PartitionType::SLR_SLAVE_CONFIG;  return tok::PTYPEVALUE;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 162 "../s/bif.l"
yylval->number = PartitionType::ELF;               return tok::PTYPEVALUE;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 164 "../s/bif.l"
yylval->number = tok::KEYSRC_ENCRYPTION;        return tok::KEYSRC_ENCRYPTION;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 165 "../s/bif.l"
yylval->number = tok::KEYSRC_ENCRYPTION;        return tok::KEYSRC_ENCRYPTION;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 166 "../s/bif.l"
yylval->number = KeySource::EfuseRedKey;        return tok::KEY_SRC;
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 167 "../s/bif.l"
yylval->number = KeySource::BbramRedKey;        return tok::KEY_SRC;
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 168 "../s/bif.l"
yylval->number = KeySource::EfuseRedKey;        return tok::KEY_SRC;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 169 "../s/bif.l"
yylval->number = KeySource::EfuseBlkKey;        return tok::KEY_SRC;
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 170 "../s/bif.l"
yylval->number = KeySource::EfuseGryKey;        return tok::KEY_SRC;
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 171 "../s/bif.l"
yylval->number = KeySource::BbramRedKey;        return tok::KEY_SRC;
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 172 "../s/bif.l"
yylval->number = KeySource::BbramBlkKey;        return tok::KEY_SRC;
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 173 "../s/bif.l"
yylval->number = KeySource::BbramGryKey;        return tok::KEY_SRC;
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 174 "../s/bif.l"
yylval->number = KeySource::BhGryKey;           return tok::KEY_SRC;
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 175 "../s/bif.l"
yylval->number = KeySource::BhBlkKey;           return tok::KEY_SRC;
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 176 "../s/bif.l"
yylval->number = KeySource::UserKey0;           return tok::KEY_SRC;
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 177 "../s/bif.l"
yylval->number = KeySource::UserKey1;           return tok::KEY_SRC;
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 178 "../s/bif.l"
yylval->number = KeySource::UserKey2;           return tok::KEY_SRC;
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 179 "../s/bif.l"
yylval->number = KeySource::UserKey3;           return tok::KEY_SRC;
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 180 "../s/bif.l"
yylval->number = KeySource::UserKey4;           return tok::KEY_SRC;
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 181 "../s/bif.l"
yylval->number = KeySource::UserKey5;           return tok::KEY_SRC;
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 182 "../s/bif.l"
yylval->number = KeySource::UserKey6;           return tok::KEY_SRC;
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 183 "../s/bif.l"
yylval->number = KeySource::UserKey7;           return tok::KEY_SRC;
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 184 "../s/bif.l"
yylval->number = KeySource::EfuseUserKey0;      return tok::KEY_SRC;
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 185 "../s/bif.l"
yylval->number = KeySource::EfuseUserBlkKey0;   return tok::KEY_SRC;
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 186 "../s/bif.l"
yylval->number = KeySource::EfuseUserGryKey0;   return tok::KEY_SRC;
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 187 "../s/bif.l"
yylval->number = KeySource::EfuseUserKey1;      return tok::KEY_SRC;
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 188 "../s/bif.l"
yylval->number = KeySource::EfuseUserBlkKey1;   return tok::KEY_SRC;
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 189 "../s/bif.l"
yylval->number = KeySource::EfuseUserGryKey1;   return tok::KEY_SRC;
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 190 "../s/bif.l"
yylval->number = KeySource::BhKupKey;           return tok::KEY_SRC;
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 192 "../s/bif.l"
yylval->number = tok::FSBL_CONFIG;              return tok::FSBL_CONFIG;
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 193 "../s/bif.l"
yylval->number = tok::FSBL_CONFIG;              return tok::FSBL_CONFIG;
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 194 "../s/bif.l"
yylval->number = tok::FSBL_CONFIG;              return tok::FSBL_CONFIG;
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 195 "../s/bif.l"
yylval->number = Core::R5Single;                return tok::CORE;
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 196 "../s/bif.l"
yylval->number = Core::A53Singlex32;            return tok::CORE;
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 197 "../s/bif.l"
yylval->number = Core::A53Singlex32;            return tok::CORE;
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 198 "../s/bif.l"
yylval->number = Core::A53Singlex64;            return tok::CORE;
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 199 "../s/bif.l"
yylval->number = Core::A53Singlex64;            return tok::CORE;
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 200 "../s/bif.l"
yylval->number = Core::R5Dual;                  return tok::CORE;
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 201 "../s/bif.l"
yylval->number = BhRsa::BhRsaEnable;            return tok::BH_RSA;
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 202 "../s/bif.l"
yylval->number = AuthHash::Sha2;                return tok::AUTH_HASH;
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 203 "../s/bif.l"
yylval->number = PufHdLoc::PUFinBH;             return tok::PUFHD_LOC;
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 204 "../s/bif.l"
yylval->number = AuthOnly::Enabled;             return tok::AUTH_ONLY;
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 205 "../s/bif.l"
yylval->number = OptKey::OptKeyinSecHdr;        return tok::OPT_KEY;
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 206 "../s/bif.l"
yylval->number = PufMode::PUF4K;                return tok::PUF4KMODE;
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 207 "../s/bif.l"
yylval->number = tok::SHUTTER;                  return tok::SHUTTER;
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 208 "../s/bif.l"
yylval->number = tok::PUFROSWAP;                return tok::PUFROSWAP;
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 209 "../s/bif.l"
yylval->number = DpaCM::DpaCMEnable;            return tok::DPA_CM;
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 210 "../s/bif.l"
yylval->number = tok::DICE;                     return tok::DICE;
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 211 "../s/bif.l"
yylval->number = tok::SMAP_WIDTH;               return tok::SMAP_WIDTH;
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 212 "../s/bif.l"
yylval->number = tok::BYPASS_IDCODE_CHECK;      return tok::BYPASS_IDCODE_CHECK;
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 213 "../s/bif.l"
yylval->number = tok::A_HWROT;                  return tok::A_HWROT;
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 214 "../s/bif.l"
yylval->number = tok::S_HWROT;                  return tok::S_HWROT;
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 216 "../s/bif.l"
return tok::BOOT_DEVICE;
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 217 "../s/bif.l"
yylval->number = tok::ADDRESS;                  return tok::ADDRESS;
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 218 "../s/bif.l"
yylval->number = BootDevice::QSPI32;            return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 219 "../s/bif.l"
yylval->number = BootDevice::QSPI24;            return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 220 "../s/bif.l"
yylval->number = BootDevice::NAND;              return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 221 "../s/bif.l"
yylval->number = BootDevice::SD0;               return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 222 "../s/bif.l"
yylval->number = BootDevice::SD1;               return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 223 "../s/bif.l"
yylval->number = BootDevice::SDLS;              return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 224 "../s/bif.l"
yylval->number = BootDevice::MMC;               return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 225 "../s/bif.l"
yylval->number = BootDevice::USB;               return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 226 "../s/bif.l"
yylval->number = BootDevice::ETHERNET;          return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 227 "../s/bif.l"
yylval->number = BootDevice::PCIE;              return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 228 "../s/bif.l"
yylval->number = BootDevice::SATA;              return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 229 "../s/bif.l"
yylval->number = BootDevice::OSPI;              return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 230 "../s/bif.l"
yylval->number = BootDevice::SMAP;              return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 231 "../s/bif.l"
yylval->number = BootDevice::SBI;               return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 232 "../s/bif.l"
yylval->number = BootDevice::SD0RAW;            return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 233 "../s/bif.l"
yylval->number = BootDevice::SD1RAW;            return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 234 "../s/bif.l"
yylval->number = BootDevice::SDLSRAW;           return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 235 "../s/bif.l"
yylval->number = BootDevice::MMCRAW;            return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 236 "../s/bif.l"
yylval->number = BootDevice::MMC0;              return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 237 "../s/bif.l"
yylval->number = BootDevice::MMC0RAW;           return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 239 "../s/bif.l"
return tok::DEST_CPU;
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 240 "../s/bif.l"
return tok::DEST_CPU;
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 241 "../s/bif.l"
yylval->number = DestinationCPU::A53_0;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 242 "../s/bif.l"
yylval->number = DestinationCPU::A53_0;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 243 "../s/bif.l"
yylval->number = DestinationCPU::A53_0;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 244 "../s/bif.l"
yylval->number = DestinationCPU::A53_0;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 245 "../s/bif.l"
yylval->number = DestinationCPU::A53_1;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 246 "../s/bif.l"
yylval->number = DestinationCPU::A53_1;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 247 "../s/bif.l"
yylval->number = DestinationCPU::A53_1;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 248 "../s/bif.l"
yylval->number = DestinationCPU::A53_1;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 249 "../s/bif.l"
yylval->number = DestinationCPU::A53_2;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 250 "../s/bif.l"
yylval->number = DestinationCPU::A53_2;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 251 "../s/bif.l"
yylval->number = DestinationCPU::A53_2;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 252 "../s/bif.l"
yylval->number = DestinationCPU::A53_3;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 253 "../s/bif.l"
yylval->number = DestinationCPU::A53_3;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 254 "../s/bif.l"
yylval->number = DestinationCPU::A53_3;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 255 "../s/bif.l"
yylval->number = DestinationCPU::R5_0;          return tok::DEST_CPU_TYPE;
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 256 "../s/bif.l"
yylval->number = DestinationCPU::R5_0;          return tok::DEST_CPU_TYPE;
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 257 "../s/bif.l"
yylval->number = DestinationCPU::R5_1;          return tok::DEST_CPU_TYPE;
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 258 "../s/bif.l"
yylval->number = DestinationCPU::R5_1;          return tok::DEST_CPU_TYPE;
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 259 "../s/bif.l"
yylval->number = DestinationCPU::R5_lockstep;   return tok::DEST_CPU_TYPE;
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 260 "../s/bif.l"
yylval->number = DestinationCPU::PMU;           return tok::DEST_CPU_TYPE;
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 261 "../s/bif.l"
yylval->number = DestinationCPU::PMU;           return tok::DEST_CPU_TYPE;
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 262 "../s/bif.l"
yylval->number = DestinationCPU::AIE;           return tok::DEST_CPU_TYPE;
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 263 "../s/bif.l"
yylval->number = tok::CLUSTER_NUM;              return tok::CLUSTER_NUM;
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 265 "../s/bif.l"
return tok::DEST_DEVICE;
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 266 "../s/bif.l"
yylval->number = DestinationDevice::DEST_DEV_PS;    return tok::DEST_DEVICE_TYPE;
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 267 "../s/bif.l"
yylval->number = DestinationDevice::DEST_DEV_PL;    return tok::DEST_DEVICE_TYPE;
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 268 "../s/bif.l"
yylval->number = DestinationDevice::DEST_DEV_PMU;   return tok::DEST_DEVICE_TYPE;
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 269 "../s/bif.l"
yylval->number = DestinationDevice::DEST_DEV_XIP;   return tok::DEST_DEVICE_TYPE;
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 271 "../s/bif.l"
return tok::EXCEPTION_LEVEL;
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 272 "../s/bif.l"
yylval->number = ExceptionLevel::EL0;           return tok::EXCEPTION_LEVEL_TYPE;
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 273 "../s/bif.l"
yylval->number = ExceptionLevel::EL1;           return tok::EXCEPTION_LEVEL_TYPE;
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 274 "../s/bif.l"
yylval->number = ExceptionLevel::EL2;           return tok::EXCEPTION_LEVEL_TYPE;
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 275 "../s/bif.l"
yylval->number = ExceptionLevel::EL3;           return tok::EXCEPTION_LEVEL_TYPE;
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 277 "../s/bif.l"
return tok::TRUSTZONE;
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 278 "../s/bif.l"
yylval->number = TrustZone::Secure;             return tok::TRUSTZONE_TYPE;
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 279 "../s/bif.l"
yylval->number = TrustZone::NonSecure;          return tok::TRUSTZONE_TYPE;
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 281 "../s/bif.l"
yylval->number = tok::SLR_NUM;                  return tok::SLR_NUM;
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 283 "../s/bif.l"
yylval->number = tok::AUTH_PARAMS;              return tok::AUTH_PARAMS;
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 284 "../s/bif.l"
yylval->number = tok::PPK_SELECT;               return tok::PPK_SELECT;
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 285 "../s/bif.l"
yylval->number = tok::SPK_SELECT;               return tok::SPK_SELECT;
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 286 "../s/bif.l"
yylval->number = SpkSelect::SPK_eFUSE;          return tok::SPKSELECT;
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 287 "../s/bif.l"
yylval->number = SpkSelect::USER_eFUSE;         return tok::SPKSELECT;
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 288 "../s/bif.l"
yylval->number = tok::SPK_ID;                   return tok::SPK_ID; 
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 289 "../s/bif.l"
return tok::HEADER_AUTH;
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 291 "../s/bif.l"
yylval->number = tok::REVOKE_ID;                return tok::REVOKE_ID;
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 293 "../s/bif.l"
yylval->number = tok::SPLIT;                    return tok::SPLIT;
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 294 "../s/bif.l"
yylval->number = tok::SPLIT_MODE;               return tok::SPLIT_MODE;
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 295 "../s/bif.l"
yylval->number = SplitMode::SlaveMode;          return tok::SPLITMODE;
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 296 "../s/bif.l"
yylval->number = SplitMode::Normal;             return tok::SPLITMODE;
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 297 "../s/bif.l"
yylval->number = tok::SPLIT_FMT;                return tok::SPLIT_FMT; 
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 298 "../s/bif.l"
return tok::MCS;
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 299 "../s/bif.l"
return tok::BIN;
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 301 "../s/bif.l"
yylval->number = tok::AUTHJTAG_CONFIG;          return tok::AUTHJTAG_CONFIG;
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 302 "../s/bif.l"
yylval->number = tok::DEVICE_DNA;               return tok::DEVICE_DNA;
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 303 "../s/bif.l"
yylval->number = tok::JTAG_TIMEOUT;             return tok::JTAG_TIMEOUT;
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 305 "../s/bif.l"
yylval->number=atoi(yytext);                    return tok::DECVALUE;
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 306 "../s/bif.l"
yylval->number=strtoul(yytext+2,NULL,16);       return tok::HEXVALUE;
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 307 "../s/bif.l"
yylval->string=strdup(yytext);                  return tok::HEXWORD;
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 309 "../s/bif.l"
return tok::COLON;
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 310 "../s/bif.l"
return tok::SEMICOLON;
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 311 "../s/bif.l"
return tok::EQUAL;
	YY_BREAK
case 245:
YY_RULE_SETUP
#line 312 "../s/bif.l"
return tok::COMMA;
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 313 "../s/bif.l"
return tok::OBRACKET;
	YY_BREAK
case 247:
YY_RULE_SETUP
#line 314 "../s/bif.l"
return tok::EBRACKET;
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 315 "../s/bif.l"
return tok::OBRACE;
	YY_BREAK
case 249:
YY_RULE_SETUP
#line 316 "../s/bif.l"
return tok::EBRACE;
	YY_BREAK
case 250:
YY_RULE_SETUP
#line 317 "../s/bif.l"
return tok::LPAREN;
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 318 "../s/bif.l"
return tok::RPAREN;
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 319 "../s/bif.l"
return tok::ASTERISK;
	YY_BREAK
case 253:
YY_RULE_SETUP
#line 321 "../s/bif.l"
return tok::PLUS;
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 322 "../s/bif.l"
return tok::MINUS;
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 323 "../s/bif.l"
return tok::LSHIFT;
	YY_BREAK
case 256:
YY_RULE_SETUP
#line 324 "../s/bif.l"
return tok::RSHIFT;
	YY_BREAK
case 257:
YY_RULE_SETUP
#line 325 "../s/bif.l"
return tok::MULT;
	YY_BREAK
case 258:
YY_RULE_SETUP
#line 326 "../s/bif.l"
return tok::DIVIDE;
	YY_BREAK
case 259:
YY_RULE_SETUP
#line 327 "../s/bif.l"
return tok::MODULO;
	YY_BREAK
case 260:
YY_RULE_SETUP
#line 328 "../s/bif.l"
return tok::NEGATION;
	YY_BREAK
case 261:
YY_RULE_SETUP
#line 329 "../s/bif.l"
return tok::AND;
	YY_BREAK
case 262:
YY_RULE_SETUP
#line 330 "../s/bif.l"
return tok::OR;
	YY_BREAK
case 263:
YY_RULE_SETUP
#line 331 "../s/bif.l"
return tok::XOR;
	YY_BREAK
case 264:
YY_RULE_SETUP
#line 333 "../s/bif.l"
yylval->string=strdup(yytext);      return tok::WORD;
	YY_BREAK
case 265:
YY_RULE_SETUP
#line 334 "../s/bif.l"
yylval->string=strdup(yytext);      return tok::FILENAME;
	YY_BREAK
case 266:
YY_RULE_SETUP
#line 335 "../s/bif.l"
yylval->string=strdup(yytext+1); yylval->string[strlen(yytext)-2]=0; return tok::QFILENAME;
	YY_BREAK
case 267:
YY_RULE_SETUP
#line 337 "../s/bif.l"
yylloc->step ();
	YY_BREAK
case 268:
/* rule 268 can match eol */
YY_RULE_SETUP
#line 338 "../s/bif.l"
yylloc->lines (yyleng); yylloc->step ();
	YY_BREAK
case 269:
YY_RULE_SETUP
#line 339 "../s/bif.l"
/* ignore (Linux only) */
	YY_BREAK
case 270:
YY_RULE_SETUP
#line 340 "../s/bif.l"
printf("WARNING: bad character! '%s' (0x%02X)\n",yytext,yytext[0]);
	YY_BREAK
case 271:
YY_RULE_SETUP
#line 341 "../s/bif.l"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 3153 "../bisonflex/bif.yy.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	biffree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	biffree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
int yyFlexLexer::yy_get_next_buffer()
/* %endif */
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					bifrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) bifrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_get_previous_state()
/* %endif */
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1225 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
/* %endif */
{
	register int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1225 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1224);

	return yy_is_jam ? 0 : yy_current_state;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyunput( int c, register char* yy_bp)
/* %endif */
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yyinput()
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyrestart( std::istream* input_file )
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_load_buffer_state()
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) bifalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) bifalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		biffree((void *) b->yy_ch_buf  );

	biffree((void *) b  );
}

/* %if-c-only */
/* %endif */

/* %if-c++-only */

extern "C" int isatty (int );

/* %endif */

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_is_interactive = 0;
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypop_buffer_state (void)
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yyensure_buffer_stack(void)
/* %endif */
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)bifalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)bifrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_push_state( int new_state )
/* %endif */
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) bifalloc(new_size  );

		else
			(yy_start_stack) = (int *) bifrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_pop_state()
/* %endif */
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yy_top_state()
/* %endif */
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* %if-reentrant */
/* %endif */
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *bifalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *bifrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void biffree (void * ptr )
{
	free( (char *) ptr );	/* see bifrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 341 "../s/bif.l"




void BIF::FlexScanner::comment()
{
    char c, c1;
loop:
    while ((c = yyinput()) != '*' && c != 0) 
    {
        // putchar(c);
        if (c == '\n') yylloc->lines (1);
    }

    if ((c1 = yyinput()) != '/' && c != 0)
    {
        unput(c1);
        goto loop;
    }
}

