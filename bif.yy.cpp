#line 2 "../bisonflex/bif.yy.cpp"

#line 4 "../bisonflex/bif.yy.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer bifFlexLexer
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstring>
/* end standard C++ headers. */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

/* %if-not-reentrant */
extern int yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
/* %endif */

/* %if-c++-only */
	std::istream* yy_input_file;
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */
/* %if-not-reentrant */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
/* %endif */

void *bifalloc (yy_size_t  );
void *bifrealloc (void *,yy_size_t  );
void biffree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext

#include "FlexLexer.h"

int yyFlexLexer::yywrap() { return 1; }
int yyFlexLexer::yylex()
	{
	LexerError( "yyFlexLexer::yylex invoked but %option yyclass used" );
	return 0;
	}

#define YY_DECL int FlexScanner::yylex()

/* %if-c-only Standard (non-C++) definition */
/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 243
#define YY_END_OF_BUFFER 244
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1096] =
    {   0,
        0,    0,  244,  242,  239,  240,  241,  242,  231,  233,
      222,  223,  224,  225,  217,  226,  237,  230,  211,  211,
      214,  215,  242,  216,  242,  213,  236,  218,  219,  235,
      236,  213,  213,  213,  213,  213,  213,  236,  236,  236,
      236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
      236,  236,  220,  234,  221,  232,  239,  240,    0,    0,
      237,    1,  237,  211,  213,  237,  227,  228,  213,    0,
      236,  213,  213,  236,  213,  213,  213,  236,  236,  236,
      213,  236,  236,  236,  236,  236,  213,  213,  236,  236,
      213,  236,  213,  213,  213,  236,  236,  236,  236,  213,

      236,  236,  236,  236,  236,  236,   47,  236,  236,  236,
      236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
      236,  236,  236,  236,  236,  236,  236,  236,  181,  236,
      236,  236,  180,  236,  236,  236,  236,  236,  236,  236,
      236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
      236,  236,  236,  236,  236,  236,  236,  238,    0,    0,
        2,  237,  212,    0,  213,  236,  213,  236,  236,  213,
       67,  178,  236,  236,  236,  236,  236,  236,  207,  236,
      236,  236,   85,   87,  236,  236,  236,  236,  236,  236,
      236,  236,  213,  236,  237,  236,  236,  236,  236,  236,

      236,  205,  236,  236,  236,  236,  236,  236,  236,  236,
      236,  236,  236,  206,   74,  236,  147,  236,  236,  236,
      236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
       31,   81,  176,  236,  236,  236,  236,  177,  236,  236,
      237,  236,   86,  236,  236,   69,  236,  236,  154,  237,
      144,  145,  236,  236,  236,  236,  192,  236,  236,  236,
      236,  236,  236,  236,  236,  236,   55,  148,  236,  183,
        0,  237,  236,  237,  236,  237,  236,  236,  236,  236,
      236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
        7,  236,  237,  236,   29,  162,  236,  236,  236,  236,

      236,  236,  236,  185,  186,  187,  188,  236,  236,  236,
      236,  236,   49,   79,  236,  236,  236,  236,  236,   32,
      236,  236,  236,   28,  236,  237,  159,  202,  236,   48,
      143,  236,  237,   66,  236,  236,  236,  236,  152,  236,
      236,  236,  150,  236,  236,  236,  236,  236,  236,  236,
      236,  236,  236,  236,  173,  174,  237,  236,  236,  236,
      236,  236,  151,  237,  237,  237,  236,  236,   75,   76,
      236,  236,  237,  153,  237,  236,  236,  236,  236,  236,
      236,  236,  236,   84,  236,  236,    8,  236,  163,  166,
      169,  171,  236,  165,  168,  170,  172,  236,  164,  167,

      236,  236,  236,  236,  236,  236,  236,  236,  236,   94,
      236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
      236,  236,  237,  236,  236,  236,  236,  236,  236,   70,
       93,  236,  236,  236,  236,  236,  236,  236,  236,   17,
      236,   23,  236,  236,  236,  236,  237,  237,  236,  236,
      237,  236,  236,  236,  236,   78,  236,  236,  236,  182,
      236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
      237,  236,  236,  236,  236,  236,  146,  237,  237,  236,
      236,  236,  236,  237,  237,  236,  237,  236,  236,  236,
      236,  201,  236,  236,  236,  236,   80,  236,  236,  237,

      236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
      236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
      236,  236,  236,  236,  236,  236,   18,  236,  236,  236,
      236,  236,  236,  237,  236,  236,  236,  236,  236,  236,
      237,  236,  236,  236,  236,  236,  236,  236,  236,  236,
      236,  236,  236,   92,  236,  236,  237,  237,  236,  236,
      237,  236,  204,   26,  236,  236,  236,  236,  236,  236,
      236,  236,  236,  236,  236,  236,  236,  142,  141,  237,
      236,  236,  236,  236,  236,  237,  237,  237,  236,  190,
      236,  236,  237,  237,  236,  237,  198,  236,  236,  236,

      236,  236,    9,  236,   33,  236,  237,  236,  236,  236,
      122,  124,  123,  125,  137,  236,  140,  236,  236,  236,
      236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
      236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
      236,  236,  236,   88,  236,  236,  236,  236,  236,  236,
      236,  237,  236,  236,  236,  236,  236,  236,  236,  236,
      236,  236,  236,  236,  236,  236,   45,  236,  236,  236,
      117,  236,  158,  237,  236,  236,   82,  236,  131,  236,
      236,   53,  236,  236,   35,    4,  236,   36,  236,  236,
      236,  237,  126,  236,   27,  236,  138,  237,  155,  156,

       25,  133,  236,  237,  237,  236,  237,  236,   37,  236,
       38,   30,  236,  236,  237,  236,  236,  236,  236,  236,
      236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
      236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
      236,  236,  236,  236,  236,   73,  236,  236,  236,  236,
      236,  236,  237,  237,  236,  236,  236,  236,  236,  236,
      149,  236,  236,  236,  236,  236,  236,  236,  236,  236,
      236,  236,  160,  236,  236,  236,  236,  236,  236,  236,
      236,  236,  236,   51,  129,  237,  236,  236,  237,  236,
       89,  237,  236,  237,  236,  236,  236,    5,  237,  236,

       63,    6,  236,  236,   13,  130,  236,  236,  236,  236,
      236,  236,  236,  236,  236,  236,  236,  236,   59,   54,
      236,  236,  236,  236,  236,   43,  236,  236,  236,  236,
      236,  236,  236,  236,  236,  237,  237,  236,  236,  236,
      236,  236,  236,  236,  236,   64,  236,  236,  236,  236,
      236,  236,  236,  236,   11,  236,  191,   44,  236,   22,
      236,  236,   12,  132,  237,  121,  200,  157,  203,  237,
      236,  196,  236,  236,  189,  237,  103,  104,  105,  106,
      107,  108,  109,  110,  236,   34,  236,  236,   19,  236,
      236,  236,  236,  236,  236,  236,  102,  101,   50,  236,

       20,  236,  236,    3,  236,  236,  236,   16,  236,  209,
      236,  236,   71,   72,  236,  236,  236,  236,  236,   65,
      236,  236,  236,  236,  236,  236,  236,  236,  236,   24,
      236,   56,  236,  236,  194,  237,   90,  135,  195,  236,
      197,  236,  193,  236,  236,  236,  236,  236,  236,  236,
      236,   40,  119,  139,   42,  236,  236,  236,  236,  236,
      236,  236,  236,  236,  236,  236,  236,  118,   57,  199,
      236,  236,  236,  236,   10,  236,  236,   52,  175,  236,
       21,  236,  236,  236,  236,  236,   58,  236,  236,  236,
      236,  236,  134,  236,  236,  236,   60,  236,  236,  236,

      236,  236,  236,  236,  120,  210,  236,  236,  236,   39,
      236,  236,  236,   99,  100,   98,  236,  236,   15,  236,
      236,   14,   96,   97,   95,  236,  236,  236,  236,  236,
      236,  236,  236,  236,  236,   68,  236,  127,  236,  236,
      236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
       83,  236,  208,  236,  161,  236,  236,  236,  236,  236,
      111,  114,  184,  236,   41,  236,   77,  128,  236,  236,
      236,  236,  236,  236,   46,  236,  236,  236,  236,  236,
      236,  236,   91,  236,  179,  236,  236,   61,   62,  136,
      112,  115,  113,  116,    0

    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    6,    6,    8,    9,    1,   10,
       11,   12,   13,   14,   15,   16,   17,   18,   19,   20,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
       31,   32,    1,    6,   33,   33,   33,   33,   33,   33,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   35,   34,   34,
       36,   37,   38,   39,   40,    1,   41,   42,   43,   44,

       45,   46,   47,   48,   49,   50,   51,   52,   53,   54,
       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,   67,   68,   69,   70,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[71] =
    {   0,
        1,    1,    1,    1,    2,    2,    2,    2,    2,    2,
        2,    1,    3,    1,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    1,    1,    1,
        1,    1,    3,    3,    3,    1,    3,    1,    2,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[1100] =
    {   0,
        0,    0, 2274, 2275,   69, 2270, 2275,   70, 2275, 2275,
     2275, 2275, 2275,    0, 2275,    0,    0,   60,  119,   38,
     2275, 2275, 2242, 2275, 2239,  171,  220, 2275, 2275, 2275,
     2242,  227,  232,  103,  103,  248,  237,  108,  122, 2209,
       37, 2213,  124,  115,  214,  258, 2208,  280,  300,   41,
      271, 2217, 2275, 2275, 2275, 2275,  169, 2262, 2257,  173,
        0, 2275,  360,  138,  413,  460, 2275, 2275, 2235,  232,
     2234,  254,  489,  257,  152,   64,  189,  264,  154,  223,
      235,  295,  153,  267,  276,  122,  318,  306,  301,  278,
      323,  296,  329,  307,  356,  365,  304,  329,  351,  330,

      350,  353,  358,  330,  367,  379,  369,  373,  375,  377,
      378,  388,  382,  387,  231,  391,  414,  376,  393,  419,
      434,  421,  394,  397,  398,  431,  422,  430, 2233,  433,
      440,  491,  467,  493,  441,  509,  427,  437,  497,  495,
      438,  498,  526,  499,  512,  520,  522,  500,  528,  527,
      501,  529,  531,  530,  536,  532,  537, 2275,  550, 2257,
     2275,  593,    0,    0,  551,  598,  313,  547,  541,  550,
      555, 2231,  562,  544,  586,  592,  587,  588, 2230,  602,
      584,  607, 2229,  622,  612,  435,  613,  618,  589,  619,
      614,  623,  632,  560,  646,  553,  625,  626,  628,  641,

      644, 2228,  646,  649,  650,  648,  652,  653,  651,  654,
      655,  656,  658, 2227, 2226,  669,  688,  659,  657,  660,
      671,  679,  693,  681,  684,  685,  690,  691,  696,  692,
     2225,  698,  699,  704,  694,  695,  700, 2224,  726,  702,
      739,  703, 2223,  731,  705, 2222,  701,  737, 2221, 2196,
      752,  753,  733,  749,  735,  721,  756,  744,  758,  747,
      751,  754,  757,  760,  764,  759, 2219, 2218,  762,  761,
     2238,  788,  554,  803,  774,   82,  775,  782,  783,  787,
      785,  801,  797,  798,  790,  799,  803,  806,  807,  809,
      816,  808, 2197,  812, 2215, 2214,  817,  821,  819,  826,

      827,  830,  836,    0,    0,    0,    0,  833,  838,  841,
      845,  848, 2213,  844,  846,  849,  847,  852,  857, 2212,
      855,  858,  859, 2211,  860, 2180,  876, 2209,  865, 2208,
     2207,  861, 2178, 2205,  873,  881,  875,  877, 2204,  883,
      884,  885, 2203,  889,  887,  895,  891,  896,  897,  898,
      901,  903,  899,  916,    0,    0, 2175,  904,  907,  905,
      911,  918, 2201, 2169, 2169, 2168,  920,  923, 2197, 2196,
      925,  927,  214,  930, 2178,  929,  931,  933,  932,  938,
      936,  940,  939, 2194,  943,  949,  958,  947,    0,    0,
        0,    0,  973,    0,    0,    0,    0,  983,    0,    0,

      951,  962,  946,  956,  967,  974,  980,  982,  984,  985,
      986,  987,  988,  989,  991,  994,  990,  998,  999,  995,
     1006,  996, 2162, 1000, 1003, 1007, 1011, 1029, 1030, 1032,
     1034, 1009, 1035, 1036, 1038, 1039, 1040, 1043, 1044, 2192,
     1047, 1045, 1048, 1050, 1049, 1052, 2178, 2160,  428, 1051,
     2164, 1056, 1053, 1058, 1062, 2188, 1059, 1060, 1067, 1070,
     1072, 1073, 1075, 1081, 1083, 1084, 1085, 1086, 1093, 1103,
     2172, 1088, 1100, 1102, 1104, 1105, 2199, 2172, 2171, 1108,
     1110, 1111, 1115, 2156, 2155, 1112, 2163, 1114, 1116, 1113,
     1119, 2180, 1117, 1118, 1124, 1120, 2179, 1122, 1131, 2161,

     1123, 1140, 1125, 1153, 1149, 1156, 1160, 1134, 1163, 1150,
     1159, 1161, 1162, 1167, 1164, 1165, 1168, 1169, 1171, 1173,
     1174, 1175, 1179, 1195, 1170, 1189, 2177, 1172, 1197, 1196,
     1198, 1202, 1203, 2161, 1204, 1206, 1208, 1210, 1212, 1216,
     2147, 1219, 1218, 1223, 1220, 1227, 1224, 1228, 1231, 1234,
     1239, 1245, 1232, 1251, 1225, 1235, 2139, 2160, 1243, 1254,
     2157, 1257, 2171, 2170, 1259, 1261, 1266, 1264, 1267, 1268,
     1269, 1271, 1272, 1274, 1275, 1276, 1279, 2169, 2168, 2144,
     1281, 1280, 1278, 1282, 1283, 2136, 2130, 2129, 1284, 2163,
     1289, 1298, 2135, 2135, 1301, 2127, 2159, 1303, 1306, 1307,

     1309, 1308, 2158, 1311, 2157, 1312, 2138, 1313, 1314, 1316,
     2155, 2154, 2153, 2152, 2151, 1317, 2150, 1318, 1320, 1321,
     1324, 1328, 1334, 1331, 1337, 1335, 1340, 1343, 1347, 1350,
     1342, 1348, 1353, 1355, 1357, 1358, 1361, 1363, 1366, 1367,
     1368, 1369, 1372,    0, 1373, 1375, 1377, 1379, 1380, 1381,
     1392, 1390, 1391, 1387, 1395, 1397, 1394, 1399, 1402, 1403,
     1406, 1409, 1410, 1413, 1408, 1416, 2149, 1418, 1419, 1423,
     2148, 1427,    0, 2112, 1424, 1428,    0, 1429, 2146, 1431,
     1435, 2145, 1432, 1433, 2144, 2143, 1438, 2142, 1442, 1446,
     1441, 2110, 2140, 1447, 2139, 1448, 2138, 2124,    0,    0,

     2136, 2135, 1449, 2102, 2115, 1454, 2101, 1456, 2131, 1453,
     2130, 2129, 1465, 1467, 2095, 1468, 1472, 1475, 1474, 1477,
     1478, 1479, 1481, 1490, 1483, 1485, 1484, 1486, 1487, 1488,
     1497, 1495, 1498, 1502, 1489, 1493, 1504, 1507, 1508, 1514,
     1517, 1518, 1520, 1522, 1525, 2127, 1526, 1529, 1530, 1531,
     1533, 1534, 2128, 2133, 1536, 1539, 1543, 1545, 1547, 1544,
     2124, 1548, 1550, 1553, 1554, 1555, 1556, 1558, 1565, 1563,
     1568, 1569,    0, 1570, 1575, 1578, 1581, 1579, 1573, 1583,
     1592, 1582, 1584, 2123, 2122, 2089, 1587, 1593, 2085, 1585,
        0, 2098, 1603, 2101, 1605, 1606, 1608, 2117, 2085, 1636,

     2115, 2114, 1610, 1622, 2113, 2112, 1615, 1611, 1612, 1621,
     1641, 1642, 1645, 1646, 1647, 1618, 1613, 1614, 2111, 2110,
     1648, 1619, 1652, 1653, 1655, 2109, 1660, 1661, 1662, 1663,
     1664, 1666, 1668, 1669, 1671, 2114, 2116, 1672, 1673, 1676,
     1682, 1667, 1675, 1686, 1689, 2106, 1692, 1695, 1696, 1699,
     1700, 1702, 1704, 1703, 2105, 1705, 2104, 2103, 1706, 1708,
     1707, 1709, 2102, 2101, 2083, 2099, 2098,    0, 2097, 2077,
     1711,    0, 1712, 1714, 2095, 2077, 2093, 2092, 2091, 2090,
     2089, 2088, 2087, 2086, 1721, 2085, 1715, 1717, 2084, 1723,
     1724, 1727, 1730, 1736, 1738, 1732, 2083, 2082, 2081, 1739,

     2080, 1740, 1743, 2079, 1742, 1748, 1749, 2078, 1752, 2077,
     1758, 1754,    0,    0, 1762, 1763, 1766, 1765, 1767, 2076,
     1768, 1764, 1770, 1774, 1771, 1783, 1772, 1769, 1777, 2075,
     1784, 2074, 1794, 1795, 2073, 2044,    0, 2071, 2070, 1797,
        0, 1798, 2069, 1799, 1801, 1803, 1800, 1806, 1804, 1811,
     1805, 2068, 2067, 2066, 2065, 1808, 1813, 1818, 1820, 1814,
     1833, 1834, 1809, 1835, 1839, 1840, 1836, 2064, 2063, 2062,
     1810, 1841, 1844, 1845, 2061, 1846, 1847, 2060,    0, 1849,
     2059, 1854, 1856, 1855, 1859, 1861, 2058, 1863, 1864, 1868,
     1869, 1874, 2057, 1875, 1865, 1870, 2056, 1871, 1877, 1879,

     1878, 1872, 1897, 1880, 2055, 2045, 1886, 1891, 1892, 2044,
     1904, 1899, 1894, 2042, 2040, 2038, 1905, 1911, 2037, 1903,
     1910, 2036, 2035, 2034, 2033, 1916, 1919, 1921, 1924, 1926,
     1929, 1928, 1930, 1932, 1933, 2032, 1935, 2031, 1936, 1934,
     1937, 1938, 1940, 1955, 1972, 1942, 1948, 1961, 1965, 1943,
     2030, 1968, 2029, 1969, 2027, 1970, 1974, 1975, 1976, 1980,
     2026, 2024, 2022, 1977, 2021, 1979, 2018, 2017, 1982, 1981,
     1983, 1984, 1987, 1990, 2007, 1993, 1995, 2003, 2002, 2004,
     2009, 2012, 1624, 2005, 1616, 2023, 2025, 1176,  707,  561,
      436,  432,  384,  230, 2275,  152, 2073, 2076, 2079

    } ;

static yyconst flex_int16_t yy_def[1100] =
    {   0,
     1095,    1, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095,
     1095, 1095, 1095, 1096, 1095, 1096, 1096, 1096, 1096,   19,
     1095, 1095, 1095, 1095, 1095, 1095,   26, 1095, 1095, 1095,
       27,   26,   26,   26,   26,   26,   26,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27, 1095, 1095, 1095, 1095, 1095, 1095, 1097, 1097,
     1096, 1095, 1098,   19,   19,   65, 1095, 1095,   26, 1095,
       27,   26,   27,   27,   73,   73,   73,   27,   27,   27,
       73,   27,   27,   27,   27,   27,   73,   73,   27,   27,
       73,   27,   73,   73,   73,   27,   27,   27,   27,   73,

       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27, 1095, 1095, 1099,
     1095, 1098,   66, 1096,   73,   27,   73,   27,   27,   73,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   73,   27, 1096,   27,   27,   27,   27,   27,

       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
     1096,   27,   27,   27,   27,   27,   27,   27,   27, 1096,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
     1097, 1096,   27, 1096,   27, 1096,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27, 1096,   27,   27,   27,   27,   27,   27,   27,

       27,   27,   27, 1096, 1096, 1096, 1096,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27, 1096,   27,   27,   27,   27,
       27,   27, 1096,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27, 1096, 1096, 1096,   27,   27,   27,
       27,   27,   27, 1096, 1096, 1096,   27,   27,   27,   27,
       27,   27, 1096,   27, 1096,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27, 1096, 1096,
     1096, 1096,   27, 1096, 1096, 1096, 1096,   27, 1096, 1096,

       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27, 1096,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27, 1096, 1096,   27,   27,
     1096,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
     1096,   27,   27,   27,   27,   27, 1096, 1096, 1096,   27,
       27,   27,   27, 1096, 1096,   27, 1096,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27, 1096,

       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27, 1096,   27,   27,   27,   27,   27,   27,
     1096,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27, 1096, 1096,   27,   27,
     1096,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27, 1096,
       27,   27,   27,   27,   27, 1096, 1096, 1096,   27,   27,
       27,   27, 1096, 1096,   27, 1096,   27,   27,   27,   27,

       27,   27,   27,   27,   27,   27, 1096,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27, 1096,   27,   27,   27,   27,   27,   27,
       27, 1096,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27, 1096, 1096,   27,   27, 1096,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27, 1096,   27,   27,   27,   27,   27, 1096, 1096, 1096,

       27,   27,   27, 1096, 1096,   27, 1096,   27,   27,   27,
       27,   27,   27,   27, 1096,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27, 1096, 1096,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27, 1096,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27, 1096,   27,   27, 1096,   27,
     1096, 1096,   27, 1096,   27,   27,   27,   27, 1096,   27,

       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27, 1096, 1096,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27, 1096,   27,   27, 1096,   27, 1096,
       27, 1096,   27,   27,   27, 1096,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,

       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27, 1096, 1096,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27, 1096, 1096,   27,   27,   27,
     1096,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27, 1096,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,

       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,    0, 1095, 1095, 1095, 1095

    } ;

static yyconst flex_int16_t yy_nxt[2346] =
    {   0,
        4,    5,    6,    7,    5,    4,    8,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   21,   22,   23,
       24,   25,   26,   27,   27,   28,   17,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   27,   38,   39,   40,
       41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
       51,   27,   27,   52,   27,   27,   53,   54,   55,   56,
       57,   62,   61,   57,   59,   59,   63,   59,   59,   59,
       59,  111,   59,   69,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,  112,  151,  399,

      400,   61,   60,   60,   60,  152,   59,  170,   59,   59,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   87,   91,   88, 1095,
       89,   65,  105,   66,   61,  120,  106,   90,   92,   65,
       65,   65,   65,   65,   65,  107,  114,  115,  116,  121,
       57,   69,   61,   57,  108,  109,  117,  182,  118,  158,
     1095, 1095,   66,   61,  119,   61,   61,   61,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   70,  178,

      159,   61,  173,   69,   71,   71,  179,   61,   69,  169,
       71,   69,   69,   69,   69,   69,   69,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,  171,  164,   72,
     1095,   73,   71,  215,   69,  484,  485, 1095, 1095,  122,
       71,   71,   71,   71,   71,   71,   74,   75,  164,  123,
       76,   77,  124,   81,  165,   78,  125,  100,   79,   82,
       83, 1095,  174,   84, 1095,  101,   85,   80,   93,  102,
       94, 1095,  175,   95, 1095,  103,   86,  104,  126,   96,

      127,   97,  136, 1095,  168, 1095,  128,   98,  172,  129,
      130,   99,  153,  131,  154,  132,  133,  166,  134,  155,
      137,  180, 1095, 1095,  138,   69,   69,  276, 1095,  156,
      181, 1095,   69,  186,  176,  187,  191,   69,  139,  140,
      141,  142,   69,  143,  144,  185,  196,  145,   69,   69,
      193,  146,  147,  177,  184,  148, 1095, 1095,  149,  150,
      160,  160,  161,  160,  160,  160,  160,  160,  160,  160,
      160,  160,  183,  160,  188,   69,  197, 1095, 1095,  195,
     1095,  189,  200,  204,  190, 1095,  192,  160,  160,  160,
      160,  160, 1095,  198, 1095,  160, 1095,  160,  160,  203,

     1095,  201, 1095, 1095, 1095, 1095, 1095,  205,  207, 1095,
      199, 1095,  202,  208, 1095, 1095,  194,  210, 1095,  218,
     1095, 1095,  213,  209, 1095, 1095,  160,  160,  160,  160,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
      206, 1095,  211,  212,  219,  214, 1095,   61, 1095, 1095,
      216,  228,  227,  226, 1095, 1095,  217, 1095, 1095, 1095,
     1095, 1095, 1095, 1095, 1095, 1095,  225, 1095, 1095,  559,
      230,  220,  221,  231,  222,  232,   61,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  163,  223,  229,  243,
      234,  224,  163,  233, 1095,  244,  240,  248,  245,  295,

      163,  163,  163,  163,  163,  163,   69,   69,  167,   69,
       69,   69,   69,   69,   69,   69, 1095,  237, 1095,  238,
     1095,   69, 1095,  241, 1095, 1095, 1095, 1095, 1095,   69,
       69,   69,   69,   69,   69,  235, 1095,  246,  239, 1095,
      250,  253,  247,  251,  252,  236,  249, 1095,  242, 1095,
      259,  260,  254, 1095, 1095, 1095, 1095, 1095, 1095, 1095,
      256,  263,  258, 1095, 1095,  272,  271,  262, 1095,   69,
       69, 1095,  255,  268, 1095,  266,  269,  257,  261,  267,
     1095, 1095, 1095,  278,  264,  265,  271, 1095, 1095, 1095,
      273,  282,  270,  160,  160,  161,  160,  160,  160,  160,

      160,  160,  160,  160,  160,  280,  160,  279,  281,  277,
      308, 1095,  274, 1095, 1095, 1095, 1095,  393,  303, 1095,
      160,  160,  160,  160,  160, 1095,  283,  289,  160, 1095,
      160,  160,  284,  285, 1095,  288,  293,  275,  286, 1095,
     1095, 1095,  287,  291,  290, 1095, 1095,  292,  298, 1095,
     1095,   69, 1095, 1095,  294, 1095,  300,  296,  297,  160,
      160,  160,  160,  304,  305,  306,  307,  299, 1095,  309,
      310, 1095,  311, 1095,  301, 1095, 1095, 1095, 1095, 1095,
     1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095,  313,  312,
      302,  315,  317,  316,  318,  323, 1095,  314, 1095,  319,

      321,  324,  326,  328,  330,  327, 1095,  333, 1095,  325,
      320, 1095, 1095,  322,  331, 1095,  329, 1095, 1095, 1095,
     1095, 1095, 1095, 1095,  338, 1095, 1095, 1095, 1095, 1095,
     1095, 1095, 1095,  336, 1095,  340,  343,  334,  339,  332,
      341,  344,  337,  346,  345,  350,  358,  351, 1095,  347,
      354,  335,  348, 1095,  349,  342,  355,  356, 1095,  361,
     1095,  359, 1095,  362, 1095,  352,  365,  366,  369,  370,
      373, 1095,  375,  353, 1095,  360, 1095,  363, 1095, 1095,
     1095, 1095,  372, 1095, 1095, 1095, 1095, 1095, 1095, 1095,
      357, 1095,  367,  368,  371,  379,  380,  376,  386,  374,

      388, 1095, 1095,  377,  384,  389,  390,  391,  392, 1095,
     1095,  381, 1095,  382, 1095,  383,  378, 1095,  385,  387,
      394,  395,  396,  397, 1095, 1095, 1095,  403, 1095,  402,
     1095,  404,  401, 1095, 1095, 1095, 1095,  398,  405, 1095,
      406,  412,  407, 1095, 1095,  408, 1095,  414, 1095,  410,
      409,  416,  415, 1095, 1095,  418,  413, 1095,  411,  417,
     1095,  427,  424, 1095,  419, 1095,  422,  420, 1095,  426,
      430, 1095, 1095, 1095, 1095, 1095, 1095,  421,  428, 1095,
      431,  425, 1095,  437, 1095, 1095, 1095, 1095, 1095,  440,
      448,  429, 1095,  439,  443,  433,  434,  432,  435,  436,

     1095,  442, 1095, 1095, 1095,  438,  441,  446, 1095,  445,
     1095, 1095, 1095,  449, 1095,  444, 1095,  452, 1095,  454,
      450,  453, 1095, 1095, 1095, 1095, 1095,  455, 1095,  459,
     1095, 1095, 1095,  458, 1095,  469,  470,  457, 1095,  462,
      456,  464,  468, 1095,  463, 1095,  465, 1095,  467,  460,
     1095,  466, 1095,  461, 1095,  473, 1095, 1095, 1095, 1095,
     1095,  475,  474, 1095,  472, 1095, 1095, 1095,  480,  486,
     1095,  483,  500, 1095, 1095,  476, 1095,  488, 1095,  490,
      481,  491,  509, 1095,  482, 1095,  493,  489,  495, 1095,
      498,  492,  499,  504, 1095,  494,  505,  501,  496,  503,

     1095, 1095,  497,  506,  510,  508,  507, 1095,  502, 1095,
     1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095,  512,
      511, 1095, 1095, 1095,  519, 1095, 1095, 1095,  513,  514,
     1095,  516,  515, 1095, 1095,  517, 1095,  521, 1095,  523,
      528,  529,  536,  518,  525,  520,  541,  526,  527,  531,
      532,  530,  522,  524,  533,  538, 1095, 1095,  535, 1095,
      537, 1095, 1095, 1095,  543, 1095, 1095, 1095,  539,  540,
     1095, 1095, 1095,  542, 1095, 1095, 1095, 1095, 1095, 1095,
     1095,  546,  548, 1095,  552, 1095, 1095, 1095,  544, 1095,
      551,  549,  554,  555, 1095,  545,  556, 1095,  562, 1095,

     1095,  550, 1095,  547,  563,  560,  565,  553, 1095,  569,
     1095, 1095, 1095, 1095,  578, 1095,  570,  564,  566,  567,
     1095,  572,  579,  573,  571,  577,  568, 1095,  581, 1095,
     1095, 1095, 1095,  576,  574, 1095,  575, 1095, 1095, 1095,
     1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095,  584, 1095,
     1095, 1095, 1095,  582,  590,  591,  592,  597, 1095,  585,
      598, 1095,  589,  583,  599,  600,  603, 1095,  601,  605,
      612,  606,  611,  608,  595,  613, 1095, 1095,  602,  610,
     1095,  614,  616, 1095,  609,  604, 1095, 1095, 1095, 1095,
     1095, 1095, 1095,  615, 1095, 1095, 1095, 1095, 1095, 1095,

     1095, 1095, 1095, 1095,  618,  619, 1095,  621,  617,  625,
      636,  622,  626,  631,  632,  620, 1095,  627,  633,  623,
      630,  628, 1095, 1095, 1095, 1095,  638,  624,  629, 1095,
     1095, 1095,  637, 1095,  634, 1095,  640, 1095,  641, 1095,
      635,  639,  643, 1095,  642, 1095, 1095, 1095,  648,  649,
     1095, 1095, 1095,  646, 1095, 1095,  650,  647, 1095, 1095,
      653, 1095, 1095,  651,  645,  654, 1095,  659,  660,  655,
     1095,  661, 1095,  665,  662,  672,  656,  658, 1095,  657,
      669, 1095,  663,  667, 1095,  664, 1095,  668, 1095,  671,
      670, 1095,  666, 1095, 1095, 1095, 1095,  675, 1095, 1095,

      680, 1095, 1095, 1095,  682, 1095, 1095, 1095, 1095, 1095,
     1095, 1095,  676,  685,  681,  683, 1095,  678,  688,  684,
      691,  696,  695,  679,  686, 1095,  694,  690, 1095,  689,
     1095,  687,  693, 1095, 1095, 1095, 1095,  701, 1095, 1095,
     1095, 1095,  697, 1095, 1095, 1095,  702, 1095, 1095,  706,
      709, 1095,  703,  711,  708, 1095,  719,  716, 1095,  718,
      710, 1095, 1095,  712, 1095,  713,  720, 1095,  724, 1095,
     1095,  714,  722,  721, 1095, 1095,  725, 1095,  717,  726,
     1095,  723, 1095,  727, 1095, 1095,  728,  730, 1095,  732,
     1095,  731,  733, 1095, 1095, 1095, 1095,  729,  734, 1095,

     1095,  735, 1095,  736, 1095,  737, 1095, 1095, 1095,  739,
      753,  743,  754,  742, 1095,  747,  740,  738, 1095, 1095,
      745, 1095, 1095,  750, 1095,  746, 1095,  741,  744, 1095,
     1095,  748,  752, 1095,  751, 1095, 1095, 1095,  749,  757,
     1095,  758,  755, 1095,  756, 1095, 1095,  760,  767,  763,
     1095, 1095,  759,  764, 1095, 1095, 1095,  762, 1095, 1095,
     1095,  761, 1095,  765,  768, 1095,  766,  771, 1095, 1095,
      772,  770,  769, 1095, 1095, 1095, 1095,  781,  774,  777,
     1095, 1095,  782, 1095,  780,  783,  776,  775,  785,  779,
      784,  778, 1095,  796, 1095, 1095,  788,  793,  787, 1095,

      795, 1095, 1095,  790, 1095, 1095, 1095,  798, 1095,  808,
     1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095,  797,  802,
     1095,  807, 1095,  811, 1095, 1095,  803,  810,  804, 1095,
      801, 1095,  800,  809, 1095, 1095,  812,  805,  814,  816,
      815, 1095,  817,  806, 1095, 1095,  818, 1095,  823, 1095,
      819,  813, 1095, 1095,  820,  821, 1095, 1095, 1095,  824,
     1095, 1095,  826, 1095,  827,  825, 1095,  822,  829,  831,
     1095, 1095, 1095,  834, 1095, 1095,  828, 1095,  832,  830,
     1095, 1095, 1095, 1095,  833, 1095,  838,  835,  841,  845,
     1095,  842, 1095,  840,  848, 1095, 1095, 1095,  843,  847,

     1095,  844, 1095,  839,  850, 1095, 1095,  852, 1095, 1095,
     1095, 1095, 1095,  854, 1095,  856,  849,  846,  851, 1095,
     1095,  853,  857,  861,  858,  863,  860,  859,  864,  855,
     1095,  866, 1095, 1095,  862, 1095,  867, 1095, 1095, 1095,
     1095, 1095, 1095, 1095,  869, 1095, 1095,  873, 1095, 1095,
      888, 1095,  875,  877,  878,  879,  880,  881,  882,  883,
      884,  890,  871, 1095,  885,  874,  886,  887, 1095, 1095,
      889,  896, 1095, 1095, 1095, 1095,  900,  897,  898, 1095,
     1095,  892, 1095,  891,  893,  894,  895, 1095, 1095, 1095,
     1095, 1095,  899, 1095, 1095, 1095, 1095,  903, 1095, 1095,

     1095,  902, 1095, 1095,  906,  901,  907,  908,  910, 1095,
      911,  915,  916, 1095,  912,  917, 1095,  904,  905, 1095,
      909,  918, 1095, 1095,  919,  921, 1095, 1095,  920, 1095,
     1095, 1095, 1095, 1095, 1095, 1095, 1095,  922, 1095, 1095,
      923, 1095, 1095,  924, 1095,  927,  929,  933, 1095,  932,
     1095, 1095,  926,  934, 1095,  925,  928, 1095,  938, 1095,
      930,  944,  931, 1095,  942, 1095, 1095, 1095,  935, 1095,
     1095,  939,  951,  943,  940, 1095, 1095,  947,  946, 1095,
      948, 1095,  945,  952,  949, 1095,  953,  954,  950, 1095,
     1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095,

      955, 1095,  956,  957, 1095,  958,  965,  967,  960,  959,
     1095, 1095,  961,  962,  963,  964,  968,  969,  970,  966,
      972, 1095, 1095,  971, 1095, 1095, 1095, 1095, 1095,  973,
     1095, 1095, 1095, 1095,  974, 1095, 1095, 1095, 1095,  978,
     1095, 1095,  981,  975,  985, 1095,  989, 1095,  976,  983,
      986,  990,  982,  977,  980,  988,  984,  992,  991,  994,
     1095, 1095, 1095, 1095,  993,  987, 1095, 1095, 1095, 1004,
      997, 1095, 1095, 1095, 1095, 1003, 1095,  995,  996,  998,
      999, 1095, 1095, 1095, 1002, 1000, 1095, 1005, 1095, 1001,
     1095, 1095, 1095, 1010, 1011, 1095, 1095, 1095, 1095, 1095,

     1013, 1095, 1095, 1006, 1095, 1095, 1095, 1095, 1008, 1007,
     1012, 1009, 1018, 1095, 1019, 1017, 1020, 1021, 1095, 1095,
     1022, 1095, 1028, 1014, 1095, 1015, 1095, 1016, 1026, 1023,
     1095, 1095, 1095, 1029, 1024, 1025, 1027, 1095, 1095, 1030,
     1031, 1032, 1037, 1095, 1033, 1035, 1095, 1034, 1095, 1038,
     1039, 1095, 1036, 1095, 1041, 1095, 1095, 1095, 1040, 1095,
     1095, 1095, 1095, 1095, 1095, 1095, 1042, 1095, 1046, 1095,
     1095, 1044, 1059, 1060, 1050, 1095, 1051, 1057, 1054, 1058,
     1047, 1053, 1095, 1043, 1052, 1045, 1048, 1049, 1095, 1061,
     1062, 1064, 1095, 1063, 1055, 1095, 1095, 1095, 1056, 1095,

     1067, 1095, 1095, 1095, 1095, 1065, 1095, 1095, 1095, 1095,
     1095, 1095, 1068, 1066, 1095, 1073, 1069, 1095, 1070, 1074,
     1095, 1075, 1095, 1078, 1071, 1072, 1077, 1079, 1080, 1095,
     1095, 1095, 1095, 1076, 1095, 1081, 1095, 1084, 1082, 1095,
     1091, 1092, 1093, 1094, 1095, 1095, 1083, 1085, 1095, 1095,
     1095, 1095, 1095, 1095, 1095, 1090, 1095, 1095, 1095, 1095,
     1095, 1095, 1095, 1095, 1095, 1095, 1086, 1095, 1087, 1095,
     1088, 1095, 1095, 1089,   59,   59,  162,  162,  162,  160,
      160,  160, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095,
     1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095,  979,

     1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095,
     1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095,
     1095,  941, 1095,  937, 1095, 1095, 1095,  936, 1095, 1095,
     1095, 1095, 1095, 1095,  914,  913, 1095, 1095, 1095, 1095,
     1095, 1095, 1095,  876, 1095,  872,  870,  868,  865, 1095,
     1095, 1095,  837,  836, 1095,  799, 1095, 1095, 1095,  794,
      792,  791, 1095, 1095,  789, 1095, 1095, 1095,  786, 1095,
     1095, 1095, 1095, 1095,  773, 1095, 1095, 1095, 1095, 1095,
     1095, 1095, 1095,  715, 1095, 1095, 1095,  707,  705,  704,
     1095,  700,  699,  698,  692, 1095, 1095, 1095, 1095,  677,

      674,  673,  652,  644, 1095,  607, 1095, 1095,  596,  594,
      593,  588,  587,  586,  580, 1095,  561,  558,  557, 1095,
      534, 1095,  487, 1095, 1095,  479,  478,  477, 1095,  471,
     1095, 1095, 1095,  451, 1095, 1095, 1095,  447, 1095, 1095,
     1095, 1095, 1095,  423, 1095, 1095, 1095,  364, 1095, 1095,
     1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095,  161,
     1095, 1095, 1095,  158,   58,  157,  135,  113,  110, 1095,
       68,   67,   58, 1095,    3, 1095, 1095, 1095, 1095, 1095,
     1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095,
     1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095,

     1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095,
     1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095,
     1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095,
     1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095,
     1095, 1095, 1095, 1095, 1095
    } ;

static yyconst flex_int16_t yy_chk[2346] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        5,   18,   20,    5,    8,    8,   18,    8,    8,    8,
        8,   41,    8,   76,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,   41,   50,  276,

      276,   20,    8,    8,    8,   50,    8,   76,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   34,   35,   34,   86,
       34,   19,   38,   19, 1096,   44,   38,   34,   35,   19,
       19,   19,   19,   19,   19,   39,   43,   43,   43,   44,
       57,   75,   64,   57,   39,   39,   43,   86,   43,   60,
       83,   79,   19,   26,   43,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   83,

       60,   64,   79,   26,   26,   26,   83,   26,   77,   75,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   77,   70,   32,
       80,   32,   27,  115,   81,  373,  373, 1094,  115,   45,
       27,   27,   27,   27,   27,   27,   32,   32,   70,   45,
       32,   32,   45,   33,   72,   32,   45,   37,   32,   33,
       33,   72,   80,   33,   74,   37,   33,   32,   36,   37,
       36,   78,   81,   36,   84,   37,   33,   37,   46,   36,

       46,   36,   48,   85,   74,   90,   46,   36,   78,   46,
       46,   36,   51,   46,   51,   46,   46,   72,   46,   51,
       48,   84,   82,   92,   48,   88,   94,  167,   89,   51,
       85,   97,  167,   90,   82,   90,   92,   87,   48,   49,
       49,   49,   91,   49,   49,   89,   97,   49,   93,  100,
       94,   49,   49,   82,   88,   49,   98,  104,   49,   49,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   87,   63,   91,   95,   98,  101,   99,   96,
      102,   91,  100,  104,   91,  103,   93,   63,   63,   63,
       63,   63,   96,   99,  105,   63,  107,   63,   63,  103,

      108,  101,  109,  118,  110,  111,  106,  105,  107,  113,
       99, 1093,  102,  108,  114,  112,   95,  110,  116,  118,
      119,  123,  113,  109,  124,  125,   63,   63,   63,   63,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
      106,  117,  111,  112,  119,  114,  120,   65,  122,  127,
      116,  125,  124,  123,  137,  449,  117,  128,  126, 1092,
      130,  121,  186, 1091,  138,  141,  122,  131,  135,  449,
      127,  120,  120,  128,  121,  130,   65,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,  121,  126,  137,
      131,  121,   66,  130,  133,  138,  135,  141,  138,  186,

       66,   66,   66,   66,   66,   66,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,  133,  132,  133,
      134,   73,  140,  136,  139,  142,  144,  148,  151,   73,
       73,   73,   73,   73,   73,  132,  136,  139,  134,  145,
      143,  144,  140,  143,  143,  132,  142,  146,  136,  147,
      148,  148,  145,  143,  150,  149,  152,  154,  153,  156,
      146,  151,  147,  155,  157,  165,  159,  150,  169,  170,
      165,  174,  145,  156,  168,  154,  156,  146,  149,  155,
      196,  273,  171,  169,  152,  153,  159,  194, 1090,  173,
      165,  174,  157,  162,  162,  162,  162,  162,  162,  162,

      162,  162,  162,  162,  162,  171,  162,  170,  173,  168,
      196,  181,  166,  175,  177,  178,  189,  273,  194,  176,
      162,  162,  162,  162,  162,  166,  175,  178,  162,  180,
      162,  162,  176,  176,  182,  177,  184,  166,  176,  185,
      187,  191,  176,  181,  180,  188,  190,  182,  189,  184,
      192,  193,  197,  198,  185,  199,  191,  187,  188,  162,
      162,  162,  162,  195,  195,  195,  195,  190,  200,  197,
      198,  201,  199,  203,  192,  206,  204,  205,  209,  207,
      208,  210,  211,  212,  219,  213,  218,  220,  201,  200,
      193,  204,  206,  205,  207,  212,  216,  203,  221,  208,

      210,  213,  217,  218,  220,  217,  222,  223,  224,  216,
      209,  225,  226,  211,  221,  217,  219,  227,  228,  230,
      223,  235,  236,  229,  226,  232,  233,  237,  247,  240,
      242,  234,  245,  224, 1089,  228,  230,  223,  227,  222,
      229,  232,  225,  234,  233,  237,  242,  239,  256,  234,
      240,  223,  235,  239,  236,  229,  241,  241,  244,  245,
      253,  242,  255,  247,  248,  239,  251,  252,  254,  254,
      257,  258,  259,  239,  260,  244,  254,  248,  261,  251,
      252,  262,  256,  257,  263,  259,  266,  264,  270,  269,
      241,  265,  253,  253,  255,  260,  261,  259,  266,  258,

      270,  275,  277,  259,  264,  272,  272,  272,  272,  278,
      279,  262,  281,  262,  280,  263,  259,  285,  265,  269,
      274,  274,  274,  274,  283,  284,  286,  279,  282,  278,
      287,  280,  277,  288,  289,  292,  290,  275,  281,  294,
      282,  285,  282,  291,  297,  282,  299,  287,  298,  283,
      282,  289,  288,  300,  301,  291,  286,  302,  284,  290,
      308,  299,  294,  303,  291,  309,  292,  291,  310,  298,
      302,  314,  311,  315,  317,  312,  316,  291,  300,  318,
      303,  297,  321,  314,  319,  322,  323,  325,  332,  317,
      327,  301,  329,  316,  321,  309,  310,  308,  311,  312,

      335,  319,  337,  327,  338,  315,  318,  325,  336,  323,
      340,  341,  342,  329,  345,  322,  344,  335,  347,  337,
      332,  336,  346,  348,  349,  350,  353,  338,  351,  344,
      352,  358,  360,  342,  359,  354,  354,  341,  361,  347,
      340,  349,  353,  354,  348,  362,  350,  367,  352,  345,
      368,  351,  371,  346,  372,  359,  376,  374,  377,  379,
      378,  361,  360,  381,  358,  380,  383,  382,  367,  374,
      385,  372,  387,  403,  388,  362,  386,  376,  401,  377,
      368,  378,  402,  404,  371,  387,  380,  376,  382,  402,
      386,  379,  386,  393,  405,  381,  393,  387,  383,  388,

      393,  406,  385,  398,  403,  401,  398,  407,  387,  408,
      398,  409,  410,  411,  412,  413,  414,  417,  415,  405,
      404,  416,  420,  422,  410,  418,  419,  424,  406,  406,
      425,  407,  406,  421,  426,  408,  432,  412,  427,  414,
      418,  418,  425,  409,  415,  411,  430,  416,  417,  420,
      421,  419,  413,  414,  422,  427,  428,  429,  424,  430,
      426,  431,  433,  434,  432,  435,  436,  437,  428,  429,
      438,  439,  442,  431,  441,  443,  445,  444,  450,  446,
      453,  435,  437,  452,  442,  454,  457,  458,  433,  455,
      441,  438,  444,  445,  459,  434,  446,  460,  452,  461,

      462,  439,  463,  436,  453,  450,  455,  443,  464,  460,
      465,  466,  467,  468,  469,  472,  461,  454,  457,  458,
      469,  463,  470,  464,  462,  468,  459,  473,  472,  474,
      470,  475,  476,  467,  465,  480,  466,  481,  482,  486,
      490,  488,  483,  489,  493,  494,  491,  496,  475,  498,
      501,  495,  503,  473,  481,  482,  483,  488,  499,  476,
      489,  508,  480,  474,  490,  491,  495,  502,  493,  498,
      505,  499,  504,  501,  486,  506,  505,  510,  494,  503,
      504,  507,  509,  506,  502,  496,  511,  507,  512,  513,
      509,  515,  516,  508,  514,  517,  518,  525,  519,  528,

      520,  521,  522, 1088,  511,  512,  523,  514,  510,  518,
      525,  515,  519,  521,  522,  513,  526,  519,  523,  516,
      520,  519,  524,  530,  529,  531,  528,  517,  519,  532,
      533,  535,  526,  536,  524,  537,  530,  538,  531,  539,
      524,  529,  533,  540,  532,  543,  542,  545,  537,  538,
      544,  547,  555,  536,  546,  548,  539,  536,  549,  553,
      542,  550,  556,  540,  535,  542,  551,  544,  545,  542,
      559,  546,  552,  550,  547,  556,  542,  543,  554,  542,
      553,  560,  548,  551,  562,  549,  565,  552,  566,  555,
      554,  568,  550,  567,  569,  570,  571,  559,  572,  573,

      566,  574,  575,  576,  568,  583,  577,  582,  581,  584,
      585,  589,  560,  571,  567,  569,  591,  562,  574,  570,
      577,  584,  583,  565,  572,  592,  582,  576,  595,  575,
      598,  573,  581,  599,  600,  602,  601,  589,  604,  606,
      608,  609,  585,  610,  616,  618,  591,  619,  620,  595,
      599,  621,  592,  601,  598,  622,  616,  608,  624,  610,
      600,  623,  626,  602,  625,  604,  618,  627,  622,  631,
      628,  606,  620,  619,  629,  632,  623,  630,  609,  624,
      633,  621,  634,  625,  635,  636,  626,  628,  637,  630,
      638,  629,  631,  639,  640,  641,  642,  627,  632,  643,

      645,  633,  646,  634,  647,  635,  648,  649,  650,  637,
      652,  641,  652,  640,  654,  646,  638,  636,  653,  651,
      643,  657,  655,  649,  656,  645,  658,  639,  642,  659,
      660,  647,  651,  661,  650,  665,  662,  663,  648,  655,
      664,  656,  653,  666,  654,  668,  669,  658,  665,  661,
      670,  675,  657,  662,  672,  676,  678,  660,  680,  683,
      684,  659,  681,  663,  666,  687,  664,  670,  691,  689,
      672,  669,  668,  690,  694,  696,  703,  684,  675,  680,
      710,  706,  687,  708,  683,  689,  678,  676,  691,  681,
      690,  680,  713,  710,  714,  716,  696,  706,  694,  717,

      708,  719,  718,  703,  720,  721,  722,  714,  723,  724,
      725,  727,  726,  728,  729,  730,  735,  724,  713,  718,
      736,  723,  732,  727,  731,  733,  719,  726,  720,  734,
      717,  737,  716,  725,  738,  739,  728,  721,  730,  732,
      731,  740,  733,  722,  741,  742,  734,  743,  739,  744,
      735,  729,  745,  747,  736,  737,  748,  749,  750,  740,
      751,  752,  742,  755,  743,  741,  756,  738,  745,  748,
      757,  760,  758,  751,  759,  762,  744,  763,  749,  747,
      764,  765,  766,  767,  750,  768,  755,  752,  758,  763,
      770,  759,  769,  757,  766,  771,  772,  774,  760,  765,

      779,  762,  775,  756,  768,  776,  778,  770,  777,  782,
      780,  783,  790,  772,  787,  775,  767,  764,  769,  781,
      788,  771,  776,  780,  777,  782,  779,  778,  783,  774,
      793,  787,  795,  796,  781,  797,  788,  803,  808,  809,
      817,  818,  807, 1085,  790,  816,  822,  795,  810,  804,
      808, 1083,  797,  800,  800,  800,  800,  800,  800,  800,
      800,  810,  793,  800,  803,  796,  804,  807,  811,  812,
      809,  816,  813,  814,  815,  821,  822,  817,  818,  823,
      824,  812,  825,  811,  813,  814,  815,  827,  828,  829,
      830,  831,  821,  832,  842,  833,  834,  825,  835,  838,

      839,  824,  843,  840,  829,  823,  830,  831,  833,  841,
      834,  838,  839,  844,  835,  840,  845,  827,  828,  847,
      832,  841,  848,  849,  842,  844,  850,  851,  843,  852,
      854,  853,  856,  859,  861,  860,  862,  845,  871,  873,
      847,  874,  887,  848,  888,  851,  853,  860,  885,  859,
      890,  891,  850,  861,  892,  849,  852,  893,  871,  896,
      854,  888,  856,  894,  885,  895,  900,  902,  862,  905,
      903,  873,  896,  887,  874,  906,  907,  892,  891,  909,
      893,  912,  890,  900,  894,  911,  902,  903,  895,  915,
      916,  922,  918,  917,  919,  921,  928,  923,  925,  927,

      905,  924,  906,  907,  929,  909,  919,  922,  912,  911,
      926,  931,  915,  916,  917,  918,  923,  924,  925,  921,
      927,  933,  934,  926,  940,  942,  944,  947,  945,  928,
      946,  949,  951,  948,  929,  956,  963,  971,  950,  934,
      957,  960,  942,  931,  947,  958,  951,  959,  933,  945,
      948,  956,  944,  933,  940,  950,  946,  958,  957,  960,
      961,  962,  964,  967,  959,  949,  965,  966,  972,  971,
      963,  973,  974,  976,  977,  967,  980,  961,  962,  964,
      965,  982,  984,  983,  966,  965,  985,  972,  986,  965,
      988,  989,  995,  980,  982,  990,  991,  996,  998, 1002,

      984,  992,  994,  973,  999, 1001, 1000, 1004,  976,  974,
      983,  977,  990, 1007,  991,  989,  992,  992, 1008, 1009,
      994, 1013, 1001,  985, 1003,  986, 1012,  988,  999,  995,
     1020, 1011, 1017, 1002,  996,  998, 1000, 1021, 1018, 1003,
     1004, 1007, 1013, 1026, 1008, 1011, 1027, 1009, 1028, 1017,
     1018, 1029, 1012, 1030, 1021, 1032, 1031, 1033, 1020, 1034,
     1035, 1040, 1037, 1039, 1041, 1042, 1026, 1043, 1029, 1046,
     1050, 1028, 1044, 1044, 1033, 1047, 1034, 1042, 1039, 1043,
     1030, 1037, 1044, 1027, 1035, 1028, 1031, 1032, 1048, 1045,
     1045, 1047, 1049, 1046, 1040, 1052, 1054, 1056, 1041, 1045,

     1050, 1057, 1058, 1059, 1064, 1048, 1066, 1060, 1070, 1069,
     1071, 1072, 1052, 1049, 1073, 1059, 1054, 1074, 1056, 1060,
     1076, 1064, 1077, 1070, 1057, 1058, 1069, 1071, 1072, 1079,
     1078, 1080, 1084, 1066, 1075, 1073, 1081, 1077, 1074, 1082,
     1086, 1086, 1087, 1087, 1068, 1067, 1076, 1078, 1065, 1063,
     1086, 1062, 1087, 1061, 1055, 1084, 1053, 1051, 1038, 1036,
     1025, 1024, 1023, 1022, 1019, 1016, 1079, 1015, 1080, 1014,
     1081, 1010, 1006, 1082, 1097, 1097, 1098, 1098, 1098, 1099,
     1099, 1099, 1005,  997,  993,  987,  981,  978,  975,  970,
      969,  968,  955,  954,  953,  952,  943,  939,  938,  936,

      935,  932,  930,  920,  910,  908,  904,  901,  899,  898,
      897,  889,  886,  884,  883,  882,  881,  880,  879,  878,
      877,  876,  875,  870,  869,  867,  866,  865,  864,  863,
      858,  857,  855,  846,  837,  836,  826,  820,  819,  806,
      805,  802,  801,  799,  798,  794,  792,  789,  786,  785,
      784,  761,  754,  753,  746,  715,  712,  711,  709,  707,
      705,  704,  702,  701,  698,  697,  695,  693,  692,  688,
      686,  685,  682,  679,  674,  671,  667,  617,  615,  614,
      613,  612,  611,  607,  605,  603,  597,  596,  594,  593,
      590,  588,  587,  586,  580,  579,  578,  564,  563,  561,

      558,  557,  541,  534,  527,  500,  497,  492,  487,  485,
      484,  479,  478,  477,  471,  456,  451,  448,  447,  440,
      423,  384,  375,  370,  369,  366,  365,  364,  363,  357,
      343,  339,  334,  333,  331,  330,  328,  326,  324,  320,
      313,  296,  295,  293,  271,  268,  267,  250,  249,  246,
      243,  238,  231,  215,  214,  202,  183,  179,  172,  160,
      129,   71,   69,   59,   58,   52,   47,   42,   40,   31,
       25,   23,    6,    3, 1095, 1095, 1095, 1095, 1095, 1095,
     1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095,
     1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095,

     1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095,
     1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095,
     1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095,
     1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095,
     1095, 1095, 1095, 1095, 1095
    } ;

static yyconst flex_int16_t yy_rule_linenum[243] =
    {   0,
       44,   45,   47,   48,   49,   50,   51,   52,   53,   54,
       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,   67,   68,   69,   71,   72,   73,   74,   75,
       76,   77,   78,   79,   80,   81,   82,   83,   84,   85,
       86,   87,   88,   89,   90,   91,   92,   93,   94,   95,
       96,   97,   98,   99,  100,  101,  102,  104,  105,  106,
      107,  108,  109,  111,  113,  114,  115,  117,  118,  119,
      120,  121,  123,  124,  125,  126,  128,  129,  130,  131,
      132,  133,  135,  136,  137,  138,  139,  140,  141,  142,
      144,  145,  146,  147,  148,  149,  150,  151,  152,  153,

      154,  155,  156,  157,  158,  159,  160,  161,  162,  163,
      164,  165,  166,  167,  168,  169,  170,  172,  173,  174,
      175,  176,  177,  178,  179,  180,  181,  182,  183,  184,
      185,  186,  187,  188,  189,  190,  191,  192,  194,  195,
      196,  197,  198,  199,  200,  201,  202,  203,  204,  205,
      206,  207,  208,  209,  210,  211,  212,  213,  214,  215,
      217,  218,  219,  220,  221,  222,  223,  224,  225,  226,
      227,  228,  229,  230,  231,  232,  233,  234,  236,  237,
      238,  239,  240,  242,  243,  244,  245,  246,  248,  249,
      250,  252,  254,  255,  256,  257,  258,  259,  260,  262,

      264,  265,  266,  267,  268,  269,  270,  272,  273,  274,
      276,  277,  278,  280,  281,  282,  283,  284,  285,  286,
      287,  288,  289,  290,  292,  293,  294,  295,  296,  297,
      298,  299,  300,  301,  302,  304,  305,  306,  308,  309,
      310,  311
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "../s/bif.l"
/******************************************************************************
* Copyright 2015-2020 Xilinx, Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
******************************************************************************/
/* This is the lexer/flexer input file, that tokenizes the BIF file */
/* Run the bif.y file first through bison to generate the bif.tab.h file, which is included herein */
/* Then run this file through flex to generate the bif.yy.c source code */
#line 22 "../s/bif.l"
 #include <stdio.h>
 #include "bifscanner.h"
 #include "bif.tab.hpp"
 #include "authentication.h"
 #include "encryption.h"
 typedef BIF::BisonParser::token tok;
/* see http://www.lysator.liu.se/c/ANSI-C-grammar-l.html */
#line 35 "../s/bif.l"
     # define YY_USER_ACTION  yylloc->columns (yyleng);
#line 1428 "../bisonflex/bif.yy.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#include <unistd.h>
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */
/* %if-bison-bridge */
/* %endif */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */
/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define ECHO LexerOutput( yytext, yyleng )
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
\
/* %if-c++-only C++ definition \ */\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#define YY_FATAL_ERROR(msg) LexerError( msg )
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define YY_DECL int yyFlexLexer::yylex()
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
/* %% [7.0] user's declarations go here */
#line 38 "../s/bif.l"



   yylloc->step ();


#line 1592 "../bisonflex/bif.yy.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyin = & std::cin;
/* %endif */

		if ( ! yyout )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyout = & std::cout;
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1096 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1095 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				std::cerr << "--scanner backing up\n";
			else if ( yy_act < 243 )
				std::cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
				         "(\"" << yytext << "\")\n";
			else if ( yy_act == 243 )
				std::cerr << "--accepting default rule (\"" << yytext << "\")\n";
			else if ( yy_act == 244 )
				std::cerr << "--(end of buffer or a NUL)\n";
			else
				std::cerr << "--EOF (start condition " << YY_START << ")\n";
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 44 "../s/bif.l"
{ comment(); }
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 45 "../s/bif.l"
yylloc->lines (1); yylloc->step ();
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 47 "../s/bif.l"
return tok::BOOTLOADER;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 48 "../s/bif.l"
return tok::PRESIGN;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 49 "../s/bif.l"
return tok::UDF_DATA;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 50 "../s/bif.l"
return tok::XIP_MODE;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 51 "../s/bif.l"
return tok::BOOT;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 52 "../s/bif.l"
return tok::USER;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 53 "../s/bif.l"
return tok::STATIC;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 54 "../s/bif.l"
return tok::NOAUTOSTART;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 55 "../s/bif.l"
return tok::MULTIBOOT;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 56 "../s/bif.l"
return tok::PROTECTED;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 57 "../s/bif.l"
return tok::ALIGNMENT;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 58 "../s/bif.l"
return tok::EARLY_HANDOFF;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 59 "../s/bif.l"
return tok::DELAY_HANDOFF;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 60 "../s/bif.l"
return tok::DELAY_LOAD;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 61 "../s/bif.l"
return tok::HIVEC;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 62 "../s/bif.l"
return tok::BLOCKS;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 63 "../s/bif.l"
return tok::AUTHBLOCKS;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 64 "../s/bif.l"
return tok::BIGENDIAN;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 65 "../s/bif.l"
return tok::A32_MODE;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 66 "../s/bif.l"
return tok::PARTITION;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 67 "../s/bif.l"
return tok::IMAGE;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 68 "../s/bif.l"
return tok::METAHEADER;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 69 "../s/bif.l"
return tok::BIF_SECTION;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 71 "../s/bif.l"
yylval->number = tok::OFFSET;                   return tok::OFFSET;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 72 "../s/bif.l"
yylval->number = tok::RESERVE;                  return tok::RESERVE;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 73 "../s/bif.l"
yylval->number = tok::LOAD;                     return tok::LOAD;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 74 "../s/bif.l"
yylval->number = tok::COPY;                     return tok::COPY;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 75 "../s/bif.l"
yylval->number = tok::STARTUP;                  return tok::STARTUP;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 76 "../s/bif.l"
yylval->number = tok::PARTITION_NUM;            return tok::PARTITION_NUM;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 77 "../s/bif.l"
yylval->number = tok::INIT;                     return tok::INIT;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 78 "../s/bif.l"
yylval->number = tok::UDF_BH;                   return tok::UDF_BH;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 79 "../s/bif.l"
yylval->number = tok::AES_KEY_FILE;             return tok::AES_KEY_FILE;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 80 "../s/bif.l"
yylval->number = tok::PPK_FILE;                 return tok::PPK_FILE;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 81 "../s/bif.l"
yylval->number = tok::PSK_FILE;                 return tok::PSK_FILE;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 82 "../s/bif.l"
yylval->number = tok::SPK_FILE;                 return tok::SPK_FILE;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 83 "../s/bif.l"
yylval->number = tok::SSK_FILE;                 return tok::SSK_FILE;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 84 "../s/bif.l"
yylval->number = tok::SPK_SIGNATURE_FILE;       return tok::SPK_SIGNATURE_FILE;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 85 "../s/bif.l"
yylval->number = tok::BH_SIGNATURE_FILE;        return tok::BH_SIGNATURE_FILE;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 86 "../s/bif.l"
yylval->number = tok::HEADER_SIGNATURE_FILE;    return tok::HEADER_SIGNATURE_FILE;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 87 "../s/bif.l"
yylval->number = tok::BOOTVECTORS;              return tok::BOOTVECTORS;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 88 "../s/bif.l"
yylval->number = tok::BOOTIMAGE;                return tok::BOOTIMAGE;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 89 "../s/bif.l"
yylval->number = tok::PARENT_ID;                return tok::PARENT_ID; 
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 90 "../s/bif.l"
yylval->number = tok::ID_CODE;                  return tok::ID_CODE;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 91 "../s/bif.l"
yylval->number = tok::EXT_ID_CODE;              return tok::EXT_ID_CODE;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 92 "../s/bif.l"
yylval->number = tok::ID;                       return tok::ID; 
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 93 "../s/bif.l"
yylval->number = tok::NAME;                     return tok::NAME; 
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 94 "../s/bif.l"
yylval->number = tok::PFILE;                    return tok::PFILE;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 95 "../s/bif.l"
yylval->number = tok::BH_KEY_FILE;              return tok::BH_KEY_FILE;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 96 "../s/bif.l"
yylval->number = tok::PUF_HELPER_FILE;          return tok::PUF_HELPER_FILE;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 97 "../s/bif.l"
yylval->number = tok::PMUFW_IMAGE;              return tok::PMUFW_IMAGE;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 98 "../s/bif.l"
yylval->number = tok::PMCDATA;                  return tok::PMCDATA;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 99 "../s/bif.l"
yylval->number = tok::BH_KEY_IV;                return tok::BH_KEY_IV;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 100 "../s/bif.l"
yylval->number = tok::UNIQUE_ID;                return tok::UNIQUE_ID;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 101 "../s/bif.l"
yylval->number = tok::PARENT_UNIQUE_ID;         return tok::PARENT_UNIQUE_ID;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 102 "../s/bif.l"
yylval->number = tok::FUNCTION_ID;              return tok::FUNCTION_ID;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 104 "../s/bif.l"
yylval->number = tok::BBRAM_KEK_IV;             return tok::BBRAM_KEK_IV;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 105 "../s/bif.l"
yylval->number = tok::BH_KEK_IV;                return tok::BH_KEK_IV;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 106 "../s/bif.l"
yylval->number = tok::EFUSE_KEK_IV;             return tok::EFUSE_KEK_IV;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 107 "../s/bif.l"
yylval->number = tok::EFUSE_USER_KEK0_IV;       return tok::EFUSE_USER_KEK0_IV;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 108 "../s/bif.l"
yylval->number = tok::EFUSE_USER_KEK1_IV;       return tok::EFUSE_USER_KEK1_IV;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 109 "../s/bif.l"
yylval->number = tok::USER_KEYS;                return tok::USER_KEYS;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 111 "../s/bif.l"
yylval->number = tok::FAMILY_KEY;               return tok::FAMILY_KEY;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 113 "../s/bif.l"
return tok::ENCRYPTION;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 114 "../s/bif.l"
yylval->number = 0;                             return tok::NONE;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 115 "../s/bif.l"
yylval->number = Encryption::AES;               return tok::ENCRVALUE;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 117 "../s/bif.l"
return tok::AUTHENTICATION;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 118 "../s/bif.l"
yylval->number = Authentication::RSA;           return tok::AUTHVALUE;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 119 "../s/bif.l"
yylval->number = Authentication::ECDSA;         return tok::AUTHVALUE;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 120 "../s/bif.l"
yylval->number = Authentication::ECDSA;         return tok::AUTHVALUE;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 121 "../s/bif.l"
yylval->number = Authentication::ECDSAp521;     return tok::AUTHVALUE;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 123 "../s/bif.l"
return tok::CHECKSUM;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 124 "../s/bif.l"
yylval->number = Checksum::MD5;                 return tok::CHECKSUMVALUE;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 125 "../s/bif.l"
yylval->number = Checksum::SHA2;                return tok::CHECKSUMVALUE;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 126 "../s/bif.l"
yylval->number = Checksum::SHA3;                return tok::CHECKSUMVALUE;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 128 "../s/bif.l"
return tok::PARTITION_OWNER;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 129 "../s/bif.l"
return tok::PARTITION_OWNER;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 130 "../s/bif.l"
yylval->number = PartitionOwner::FSBL;          return tok::POWNERVALUE ;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 131 "../s/bif.l"
yylval->number = PartitionOwner::UBOOT;         return tok::POWNERVALUE ;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 132 "../s/bif.l"
yylval->number = PartitionOwner::FSBL;          return tok::POWNERVALUE ;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 133 "../s/bif.l"
yylval->number = PartitionOwner::UBOOT;         return tok::POWNERVALUE ;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 135 "../s/bif.l"
return tok::PARTITION_TYPE;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 136 "../s/bif.l"
return tok::PARTITION_TYPE;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 137 "../s/bif.l"
yylval->number = PartitionType::CONFIG_DATA_OBJ;return tok::PTYPEVALUE;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 138 "../s/bif.l"
yylval->number = PartitionType::RAW;            return tok::PTYPEVALUE;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 139 "../s/bif.l"
yylval->number = PartitionType::CFI;            return tok::PTYPEVALUE;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 140 "../s/bif.l"
yylval->number = PartitionType::CFI_GSC;        return tok::PTYPEVALUE;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 141 "../s/bif.l"
yylval->number = PartitionType::SLR_BOOT;       return tok::PTYPEVALUE;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 142 "../s/bif.l"
yylval->number = PartitionType::SLR_CONFIG;     return tok::PTYPEVALUE;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 144 "../s/bif.l"
yylval->number = tok::KEYSRC_ENCRYPTION;        return tok::KEYSRC_ENCRYPTION;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 145 "../s/bif.l"
yylval->number = tok::KEYSRC_ENCRYPTION;        return tok::KEYSRC_ENCRYPTION;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 146 "../s/bif.l"
yylval->number = KeySource::EfuseRedKey;        return tok::KEY_SRC;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 147 "../s/bif.l"
yylval->number = KeySource::BbramRedKey;        return tok::KEY_SRC;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 148 "../s/bif.l"
yylval->number = KeySource::EfuseRedKey;        return tok::KEY_SRC;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 149 "../s/bif.l"
yylval->number = KeySource::EfuseBlkKey;        return tok::KEY_SRC;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 150 "../s/bif.l"
yylval->number = KeySource::EfuseGryKey;        return tok::KEY_SRC;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 151 "../s/bif.l"
yylval->number = KeySource::BbramRedKey;        return tok::KEY_SRC;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 152 "../s/bif.l"
yylval->number = KeySource::BbramBlkKey;        return tok::KEY_SRC;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 153 "../s/bif.l"
yylval->number = KeySource::BbramGryKey;        return tok::KEY_SRC;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 154 "../s/bif.l"
yylval->number = KeySource::BhGryKey;           return tok::KEY_SRC;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 155 "../s/bif.l"
yylval->number = KeySource::BhBlkKey;           return tok::KEY_SRC;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 156 "../s/bif.l"
yylval->number = KeySource::UserKey0;           return tok::KEY_SRC;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 157 "../s/bif.l"
yylval->number = KeySource::UserKey1;           return tok::KEY_SRC;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 158 "../s/bif.l"
yylval->number = KeySource::UserKey2;           return tok::KEY_SRC;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 159 "../s/bif.l"
yylval->number = KeySource::UserKey3;           return tok::KEY_SRC;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 160 "../s/bif.l"
yylval->number = KeySource::UserKey4;           return tok::KEY_SRC;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 161 "../s/bif.l"
yylval->number = KeySource::UserKey5;           return tok::KEY_SRC;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 162 "../s/bif.l"
yylval->number = KeySource::UserKey6;           return tok::KEY_SRC;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 163 "../s/bif.l"
yylval->number = KeySource::UserKey7;           return tok::KEY_SRC;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 164 "../s/bif.l"
yylval->number = KeySource::EfuseUserKey0;      return tok::KEY_SRC;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 165 "../s/bif.l"
yylval->number = KeySource::EfuseUserBlkKey0;   return tok::KEY_SRC;
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 166 "../s/bif.l"
yylval->number = KeySource::EfuseUserGryKey0;   return tok::KEY_SRC;
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 167 "../s/bif.l"
yylval->number = KeySource::EfuseUserKey1;      return tok::KEY_SRC;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 168 "../s/bif.l"
yylval->number = KeySource::EfuseUserBlkKey1;   return tok::KEY_SRC;
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 169 "../s/bif.l"
yylval->number = KeySource::EfuseUserGryKey1;   return tok::KEY_SRC;
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 170 "../s/bif.l"
yylval->number = KeySource::BhKupKey;           return tok::KEY_SRC;
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 172 "../s/bif.l"
yylval->number = tok::FSBL_CONFIG;              return tok::FSBL_CONFIG;
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 173 "../s/bif.l"
yylval->number = tok::FSBL_CONFIG;              return tok::FSBL_CONFIG;
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 174 "../s/bif.l"
yylval->number = tok::FSBL_CONFIG;              return tok::FSBL_CONFIG;
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 175 "../s/bif.l"
yylval->number = Core::R5Single;                return tok::CORE;
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 176 "../s/bif.l"
yylval->number = Core::A53Singlex32;            return tok::CORE;
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 177 "../s/bif.l"
yylval->number = Core::A53Singlex32;            return tok::CORE;
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 178 "../s/bif.l"
yylval->number = Core::A53Singlex64;            return tok::CORE;
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 179 "../s/bif.l"
yylval->number = Core::A53Singlex64;            return tok::CORE;
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 180 "../s/bif.l"
yylval->number = Core::R5Dual;                  return tok::CORE;
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 181 "../s/bif.l"
yylval->number = BhRsa::BhRsaEnable;            return tok::BH_RSA;
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 182 "../s/bif.l"
yylval->number = AuthHash::Sha2;                return tok::AUTH_HASH;
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 183 "../s/bif.l"
yylval->number = PufHdLoc::PUFinBH;             return tok::PUFHD_LOC;
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 184 "../s/bif.l"
yylval->number = AuthOnly::Enabled;             return tok::AUTH_ONLY;
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 185 "../s/bif.l"
yylval->number = OptKey::OptKeyinSecHdr;        return tok::OPT_KEY;
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 186 "../s/bif.l"
yylval->number = PufMode::PUF4K;                return tok::PUF4KMODE;
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 187 "../s/bif.l"
yylval->number = tok::SHUTTER;                  return tok::SHUTTER;
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 188 "../s/bif.l"
yylval->number = DpaCM::DpaCMEnable;            return tok::DPA_CM;
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 189 "../s/bif.l"
yylval->number = tok::SMAP_WIDTH;               return tok::SMAP_WIDTH;
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 190 "../s/bif.l"
yylval->number = tok::BYPASS_IDCODE_CHECK;      return tok::BYPASS_IDCODE_CHECK;
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 191 "../s/bif.l"
yylval->number = tok::A_HWROT;                  return tok::A_HWROT;
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 192 "../s/bif.l"
yylval->number = tok::S_HWROT;                  return tok::S_HWROT;
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 194 "../s/bif.l"
return tok::BOOT_DEVICE;
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 195 "../s/bif.l"
yylval->number = tok::ADDRESS;                  return tok::ADDRESS;
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 196 "../s/bif.l"
yylval->number = BootDevice::QSPI32;            return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 197 "../s/bif.l"
yylval->number = BootDevice::QSPI24;            return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 198 "../s/bif.l"
yylval->number = BootDevice::NAND;              return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 199 "../s/bif.l"
yylval->number = BootDevice::SD0;               return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 200 "../s/bif.l"
yylval->number = BootDevice::SD1;               return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 201 "../s/bif.l"
yylval->number = BootDevice::SDLS;              return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 202 "../s/bif.l"
yylval->number = BootDevice::MMC;               return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 203 "../s/bif.l"
yylval->number = BootDevice::USB;               return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 204 "../s/bif.l"
yylval->number = BootDevice::ETHERNET;          return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 205 "../s/bif.l"
yylval->number = BootDevice::PCIE;              return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 206 "../s/bif.l"
yylval->number = BootDevice::SATA;              return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 207 "../s/bif.l"
yylval->number = BootDevice::OSPI;              return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 208 "../s/bif.l"
yylval->number = BootDevice::SMAP;              return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 209 "../s/bif.l"
yylval->number = BootDevice::SBI;               return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 210 "../s/bif.l"
yylval->number = BootDevice::SD0RAW;            return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 211 "../s/bif.l"
yylval->number = BootDevice::SD1RAW;            return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 212 "../s/bif.l"
yylval->number = BootDevice::SDLSRAW;           return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 213 "../s/bif.l"
yylval->number = BootDevice::MMCRAW;            return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 214 "../s/bif.l"
yylval->number = BootDevice::MMC0;              return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 215 "../s/bif.l"
yylval->number = BootDevice::MMC0RAW;           return tok::BOOT_DEVICE_TYPE ;
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 217 "../s/bif.l"
return tok::DEST_CPU;
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 218 "../s/bif.l"
return tok::DEST_CPU;
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 219 "../s/bif.l"
yylval->number = DestinationCPU::A53_0;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 220 "../s/bif.l"
yylval->number = DestinationCPU::A53_0;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 221 "../s/bif.l"
yylval->number = DestinationCPU::A53_0;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 222 "../s/bif.l"
yylval->number = DestinationCPU::A53_1;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 223 "../s/bif.l"
yylval->number = DestinationCPU::A53_1;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 224 "../s/bif.l"
yylval->number = DestinationCPU::A53_1;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 225 "../s/bif.l"
yylval->number = DestinationCPU::A53_2;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 226 "../s/bif.l"
yylval->number = DestinationCPU::A53_2;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 227 "../s/bif.l"
yylval->number = DestinationCPU::A53_3;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 228 "../s/bif.l"
yylval->number = DestinationCPU::A53_3;         return tok::DEST_CPU_TYPE;
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 229 "../s/bif.l"
yylval->number = DestinationCPU::R5_0;          return tok::DEST_CPU_TYPE;
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 230 "../s/bif.l"
yylval->number = DestinationCPU::R5_1;          return tok::DEST_CPU_TYPE;
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 231 "../s/bif.l"
yylval->number = DestinationCPU::R5_lockstep;   return tok::DEST_CPU_TYPE;
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 232 "../s/bif.l"
yylval->number = DestinationCPU::PMU;           return tok::DEST_CPU_TYPE;
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 233 "../s/bif.l"
yylval->number = DestinationCPU::PMU;           return tok::DEST_CPU_TYPE;
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 234 "../s/bif.l"
yylval->number = DestinationCPU::AIE;            return tok::DEST_CPU_TYPE;
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 236 "../s/bif.l"
return tok::DEST_DEVICE;
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 237 "../s/bif.l"
yylval->number = DestinationDevice::DEST_DEV_PS;    return tok::DEST_DEVICE_TYPE;
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 238 "../s/bif.l"
yylval->number = DestinationDevice::DEST_DEV_PL;    return tok::DEST_DEVICE_TYPE;
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 239 "../s/bif.l"
yylval->number = DestinationDevice::DEST_DEV_PMU;   return tok::DEST_DEVICE_TYPE;
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 240 "../s/bif.l"
yylval->number = DestinationDevice::DEST_DEV_XIP;   return tok::DEST_DEVICE_TYPE;
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 242 "../s/bif.l"
return tok::EXCEPTION_LEVEL;
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 243 "../s/bif.l"
yylval->number = ExceptionLevel::EL0;           return tok::EXCEPTION_LEVEL_TYPE;
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 244 "../s/bif.l"
yylval->number = ExceptionLevel::EL1;           return tok::EXCEPTION_LEVEL_TYPE;
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 245 "../s/bif.l"
yylval->number = ExceptionLevel::EL2;           return tok::EXCEPTION_LEVEL_TYPE;
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 246 "../s/bif.l"
yylval->number = ExceptionLevel::EL3;           return tok::EXCEPTION_LEVEL_TYPE;
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 248 "../s/bif.l"
return tok::TRUSTZONE;
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 249 "../s/bif.l"
yylval->number = TrustZone::Secure;             return tok::TRUSTZONE_TYPE;
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 250 "../s/bif.l"
yylval->number = TrustZone::NonSecure;          return tok::TRUSTZONE_TYPE;
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 252 "../s/bif.l"
yylval->number = tok::SLR_NUM;                  return tok::SLR_NUM;
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 254 "../s/bif.l"
yylval->number = tok::AUTH_PARAMS;              return tok::AUTH_PARAMS;
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 255 "../s/bif.l"
yylval->number = tok::PPK_SELECT;               return tok::PPK_SELECT;
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 256 "../s/bif.l"
yylval->number = tok::SPK_SELECT;               return tok::SPK_SELECT;
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 257 "../s/bif.l"
yylval->number = SpkSelect::SPK_eFUSE;          return tok::SPKSELECT;
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 258 "../s/bif.l"
yylval->number = SpkSelect::USER_eFUSE;         return tok::SPKSELECT;
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 259 "../s/bif.l"
yylval->number = tok::SPK_ID;                   return tok::SPK_ID; 
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 260 "../s/bif.l"
return tok::HEADER_AUTH;
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 262 "../s/bif.l"
yylval->number = tok::REVOKE_ID;                return tok::REVOKE_ID;
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 264 "../s/bif.l"
yylval->number = tok::SPLIT;                    return tok::SPLIT;
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 265 "../s/bif.l"
yylval->number = tok::SPLIT_MODE;               return tok::SPLIT_MODE;
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 266 "../s/bif.l"
yylval->number = SplitMode::SlaveMode;          return tok::SPLITMODE;
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 267 "../s/bif.l"
yylval->number = SplitMode::Normal;             return tok::SPLITMODE;
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 268 "../s/bif.l"
yylval->number = tok::SPLIT_FMT;                return tok::SPLIT_FMT; 
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 269 "../s/bif.l"
return tok::MCS;
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 270 "../s/bif.l"
return tok::BIN;
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 272 "../s/bif.l"
yylval->number = tok::AUTHJTAG_CONFIG;          return tok::AUTHJTAG_CONFIG;
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 273 "../s/bif.l"
yylval->number = tok::DEVICE_DNA;               return tok::DEVICE_DNA;
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 274 "../s/bif.l"
yylval->number = tok::JTAG_TIMEOUT;             return tok::JTAG_TIMEOUT;
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 276 "../s/bif.l"
yylval->number=atoi(yytext);                    return tok::DECVALUE;
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 277 "../s/bif.l"
yylval->number=strtoul(yytext+2,NULL,16);       return tok::HEXVALUE;
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 278 "../s/bif.l"
yylval->string=strdup(yytext);                  return tok::HEXWORD;
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 280 "../s/bif.l"
return tok::COLON;
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 281 "../s/bif.l"
return tok::SEMICOLON;
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 282 "../s/bif.l"
return tok::EQUAL;
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 283 "../s/bif.l"
return tok::COMMA;
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 284 "../s/bif.l"
return tok::OBRACKET;
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 285 "../s/bif.l"
return tok::EBRACKET;
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 286 "../s/bif.l"
return tok::OBRACE;
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 287 "../s/bif.l"
return tok::EBRACE;
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 288 "../s/bif.l"
return tok::LPAREN;
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 289 "../s/bif.l"
return tok::RPAREN;
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 290 "../s/bif.l"
return tok::ASTERISK;
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 292 "../s/bif.l"
return tok::PLUS;
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 293 "../s/bif.l"
return tok::MINUS;
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 294 "../s/bif.l"
return tok::LSHIFT;
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 295 "../s/bif.l"
return tok::RSHIFT;
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 296 "../s/bif.l"
return tok::MULT;
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 297 "../s/bif.l"
return tok::DIVIDE;
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 298 "../s/bif.l"
return tok::MODULO;
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 299 "../s/bif.l"
return tok::NEGATION;
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 300 "../s/bif.l"
return tok::AND;
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 301 "../s/bif.l"
return tok::OR;
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 302 "../s/bif.l"
return tok::XOR;
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 304 "../s/bif.l"
yylval->string=strdup(yytext);      return tok::WORD;
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 305 "../s/bif.l"
yylval->string=strdup(yytext);      return tok::FILENAME;
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 306 "../s/bif.l"
yylval->string=strdup(yytext+1); yylval->string[strlen(yytext)-2]=0; return tok::QFILENAME;
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 308 "../s/bif.l"
yylloc->step ();
	YY_BREAK
case 240:
/* rule 240 can match eol */
YY_RULE_SETUP
#line 309 "../s/bif.l"
yylloc->lines (yyleng); yylloc->step ();
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 310 "../s/bif.l"
/* ignore (Linux only) */
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 311 "../s/bif.l"
printf("WARNING: bad character! '%s' (0x%02X)\n",yytext,yytext[0]);
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 312 "../s/bif.l"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 2918 "../bisonflex/bif.yy.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	biffree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	biffree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
int yyFlexLexer::yy_get_next_buffer()
/* %endif */
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					bifrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) bifrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_get_previous_state()
/* %endif */
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1096 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
/* %endif */
{
	register int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1096 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1095);

	return yy_is_jam ? 0 : yy_current_state;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyunput( int c, register char* yy_bp)
/* %endif */
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yyinput()
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyrestart( std::istream* input_file )
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_load_buffer_state()
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) bifalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) bifalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		biffree((void *) b->yy_ch_buf  );

	biffree((void *) b  );
}

/* %if-c-only */
/* %endif */

/* %if-c++-only */

extern "C" int isatty (int );

/* %endif */

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_is_interactive = 0;
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypop_buffer_state (void)
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yyensure_buffer_stack(void)
/* %endif */
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)bifalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)bifrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_push_state( int new_state )
/* %endif */
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) bifalloc(new_size  );

		else
			(yy_start_stack) = (int *) bifrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_pop_state()
/* %endif */
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yy_top_state()
/* %endif */
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* %if-reentrant */
/* %endif */
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *bifalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *bifrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void biffree (void * ptr )
{
	free( (char *) ptr );	/* see bifrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 312 "../s/bif.l"




void BIF::FlexScanner::comment()
{
    char c, c1;
loop:
    while ((c = yyinput()) != '*' && c != 0) 
    {
        // putchar(c);
        if (c == '\n') yylloc->lines (1);
    }

    if ((c1 = yyinput()) != '/' && c != 0)
    {
        unput(c1);
        goto loop;
    }
}

